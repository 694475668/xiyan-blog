{"version":3,"file":"ApiStaticMixin.js","sourceRoot":"","sources":["../../src/mixins/ApiStaticMixin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,4DAA4D;;;AAiB5D,MAAM,SAAS,GAAkB,MAAM,CAAC,0BAA0B,CAAC,CAAC;AA4BpE;;;;;;;GAOG;AACH,SAAgB,cAAc,CAC5B,SAAqB;AACrB,8DAA8D;;IAE9D,MAAe,UAAW,SAAQ,SAAS;QAGzC,8DAA8D;QAC9D,YAAmB,GAAG,IAAW;YAC/B,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YAEf,MAAM,OAAO,GAA2B,IAAI,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;QACrC,CAAC;QAED,gBAAgB;QACT,MAAM,CAAC,iBAAiB,CAC7B,OAAwC,EACxC,OAA4B,EAC5B,UAA+B;YAE/B,SAAS,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YAE1D,OAAO,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACzC,CAAC;QAED,IAAW,QAAQ;YACjB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC;QAED,gBAAgB;QACT,aAAa,CAAC,UAAwC;YAC3D,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAEhC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACtC,CAAC;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAvCD,wCAuCC;AAED;;;GAGG;AACH,WAAiB,cAAc;IAC7B;;;;;;;;OAQG;IACH,SAAgB,aAAa,CAAC,OAAgB;QAC5C,OAAO,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IAC3C,CAAC;IAFe,4BAAa,gBAE5B,CAAA;AACH,CAAC,EAbgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAa9B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.s\r\n\r\nimport { ApiItem, IApiItemJson, IApiItemConstructor, IApiItemOptions } from '../items/ApiItem';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\n\r\n/**\r\n * Constructor options for {@link (IApiStaticMixinOptions:interface)}.\r\n * @public\r\n */\r\nexport interface IApiStaticMixinOptions extends IApiItemOptions {\r\n  isStatic: boolean;\r\n}\r\n\r\nexport interface IApiStaticMixinJson extends IApiItemJson {\r\n  isStatic: boolean;\r\n}\r\n\r\nconst _isStatic: unique symbol = Symbol('ApiStaticMixin._isStatic');\r\n\r\n/**\r\n * The mixin base class for API items that can have the TypeScript `static` keyword applied to them.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.  The non-abstract classes (e.g. `ApiClass`, `ApiEnum`, `ApiInterface`, etc.) use\r\n * TypeScript \"mixin\" functions (e.g. `ApiDeclaredItem`, `ApiItemContainerMixin`, etc.) to add various\r\n * features that cannot be represented as a normal inheritance chain (since TypeScript does not allow a child class\r\n * to extend more than one base class).  The \"mixin\" is a TypeScript merged declaration with three components:\r\n * the function that generates a subclass, an interface that describes the members of the subclass, and\r\n * a namespace containing static members of the class.\r\n *\r\n * @public\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface ApiStaticMixin extends ApiItem {\r\n  /**\r\n   * Whether the declaration has the TypeScript `static` keyword.\r\n   */\r\n  readonly isStatic: boolean;\r\n\r\n  /** @override */\r\n  serializeInto(jsonObject: Partial<IApiItemJson>): void;\r\n}\r\n\r\n/**\r\n * Mixin function for {@link (ApiStaticMixin:interface)}.\r\n *\r\n * @param baseClass - The base class to be extended\r\n * @returns A child class that extends baseClass, adding the {@link (ApiStaticMixin:interface)} functionality.\r\n *\r\n * @public\r\n */\r\nexport function ApiStaticMixin<TBaseClass extends IApiItemConstructor>(\r\n  baseClass: TBaseClass\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n): TBaseClass & (new (...args: any[]) => ApiStaticMixin) {\r\n  abstract class MixedClass extends baseClass implements ApiStaticMixin {\r\n    public [_isStatic]: boolean;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public constructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      const options: IApiStaticMixinOptions = args[0];\r\n      this[_isStatic] = options.isStatic;\r\n    }\r\n\r\n    /** @override */\r\n    public static onDeserializeInto(\r\n      options: Partial<IApiStaticMixinOptions>,\r\n      context: DeserializerContext,\r\n      jsonObject: IApiStaticMixinJson\r\n    ): void {\r\n      baseClass.onDeserializeInto(options, context, jsonObject);\r\n\r\n      options.isStatic = jsonObject.isStatic;\r\n    }\r\n\r\n    public get isStatic(): boolean {\r\n      return this[_isStatic];\r\n    }\r\n\r\n    /** @override */\r\n    public serializeInto(jsonObject: Partial<IApiStaticMixinJson>): void {\r\n      super.serializeInto(jsonObject);\r\n\r\n      jsonObject.isStatic = this.isStatic;\r\n    }\r\n  }\r\n\r\n  return MixedClass;\r\n}\r\n\r\n/**\r\n * Static members for {@link (ApiStaticMixin:interface)}.\r\n * @public\r\n */\r\nexport namespace ApiStaticMixin {\r\n  /**\r\n   * A type guard that tests whether the specified `ApiItem` subclass extends the `ApiStaticMixin` mixin.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The JavaScript `instanceof` operator cannot be used to test for mixin inheritance, because each invocation of\r\n   * the mixin function produces a different subclass.  (This could be mitigated by `Symbol.hasInstance`, however\r\n   * the TypeScript type system cannot invoke a runtime test.)\r\n   */\r\n  export function isBaseClassOf(apiItem: ApiItem): apiItem is ApiStaticMixin {\r\n    return apiItem.hasOwnProperty(_isStatic);\r\n  }\r\n}\r\n"]}