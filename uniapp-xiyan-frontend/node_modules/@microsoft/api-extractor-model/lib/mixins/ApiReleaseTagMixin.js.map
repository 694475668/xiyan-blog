{"version":3,"file":"ApiReleaseTagMixin.js","sourceRoot":"","sources":["../../src/mixins/ApiReleaseTagMixin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,4DAA4D;;;AAE5D,oEAAoD;AAGpD,oDAAiD;AAejD,MAAM,WAAW,GAAkB,MAAM,CAAC,gCAAgC,CAAC,CAAC;AAiC5E;;;;;;;GAOG;AACH,SAAgB,kBAAkB,CAChC,SAAqB;AACrB,8DAA8D;;IAE9D,MAAe,UAAW,SAAQ,SAAS;QAGzC,8DAA8D;QAC9D,YAAmB,GAAG,IAAW;YAC/B,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YAEf,MAAM,OAAO,GAA+B,IAAI,CAAC,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;QACzC,CAAC;QAED,gBAAgB;QACT,MAAM,CAAC,iBAAiB,CAC7B,OAA4C,EAC5C,OAA4B,EAC5B,UAAmC;YAEnC,SAAS,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YAE1D,MAAM,sBAAsB,GAA2B,wBAAI,CAAC,gBAAgB,CAC1E,uBAAiB,EAAE,sBAAsB;YACzC,UAAU,CAAC,UAAU,CACtB,CAAC;YACF,IAAI,sBAAsB,KAAK,SAAS,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,qCAAqC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;aAC/F;YAED,OAAO,CAAC,UAAU,GAAG,sBAAsB,CAAC;QAC9C,CAAC;QAED,IAAW,UAAU;YACnB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC;QAED,gBAAgB;QACT,aAAa,CAAC,UAA4C;YAC/D,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAEhC,UAAU,CAAC,UAAU,GAAG,uBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtD,CAAC;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AA/CD,gDA+CC;AAED;;;GAGG;AACH,WAAiB,kBAAkB;IACjC;;;;;;;;OAQG;IACH,SAAgB,aAAa,CAAC,OAAgB;QAC5C,OAAO,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAFe,gCAAa,gBAE5B,CAAA;AACH,CAAC,EAbgB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAalC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.s\r\n\r\nimport { Enum } from '@rushstack/node-core-library';\r\n\r\nimport { ApiItem, IApiItemJson, IApiItemConstructor, IApiItemOptions } from '../items/ApiItem';\r\nimport { ReleaseTag } from '../aedoc/ReleaseTag';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\n\r\n/**\r\n * Constructor options for {@link (ApiReleaseTagMixin:interface)}.\r\n * @public\r\n */\r\nexport interface IApiReleaseTagMixinOptions extends IApiItemOptions {\r\n  releaseTag: ReleaseTag;\r\n}\r\n\r\nexport interface IApiReleaseTagMixinJson extends IApiItemJson {\r\n  releaseTag: string;\r\n}\r\n\r\nconst _releaseTag: unique symbol = Symbol('ApiReleaseTagMixin._releaseTag');\r\n\r\n/**\r\n * The mixin base class for API items that can be attributed with a TSDoc tag such as `@internal`,\r\n * `@alpha`, `@beta`, or `@public`.  These \"release tags\" indicate the support level for an API.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.  The non-abstract classes (e.g. `ApiClass`, `ApiEnum`, `ApiInterface`, etc.) use\r\n * TypeScript \"mixin\" functions (e.g. `ApiDeclaredItem`, `ApiItemContainerMixin`, etc.) to add various\r\n * features that cannot be represented as a normal inheritance chain (since TypeScript does not allow a child class\r\n * to extend more than one base class).  The \"mixin\" is a TypeScript merged declaration with three components:\r\n * the function that generates a subclass, an interface that describes the members of the subclass, and\r\n * a namespace containing static members of the class.\r\n *\r\n * @public\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface ApiReleaseTagMixin extends ApiItem {\r\n  /**\r\n   * The effective release tag for this declaration.  If it is not explicitly specified, the value may be\r\n   * inherited from a containing declaration.\r\n   *\r\n   * @remarks\r\n   * For example, an `ApiEnumMember` may inherit its release tag from the containing `ApiEnum`.\r\n   */\r\n  readonly releaseTag: ReleaseTag;\r\n\r\n  /** @override */\r\n  serializeInto(jsonObject: Partial<IApiItemJson>): void;\r\n}\r\n\r\n/**\r\n * Mixin function for {@link (ApiReleaseTagMixin:interface)}.\r\n *\r\n * @param baseClass - The base class to be extended\r\n * @returns A child class that extends baseClass, adding the {@link (ApiReleaseTagMixin:interface)} functionality.\r\n *\r\n * @public\r\n */\r\nexport function ApiReleaseTagMixin<TBaseClass extends IApiItemConstructor>(\r\n  baseClass: TBaseClass\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n): TBaseClass & (new (...args: any[]) => ApiReleaseTagMixin) {\r\n  abstract class MixedClass extends baseClass implements ApiReleaseTagMixin {\r\n    public [_releaseTag]: ReleaseTag;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public constructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      const options: IApiReleaseTagMixinOptions = args[0];\r\n      this[_releaseTag] = options.releaseTag;\r\n    }\r\n\r\n    /** @override */\r\n    public static onDeserializeInto(\r\n      options: Partial<IApiReleaseTagMixinOptions>,\r\n      context: DeserializerContext,\r\n      jsonObject: IApiReleaseTagMixinJson\r\n    ): void {\r\n      baseClass.onDeserializeInto(options, context, jsonObject);\r\n\r\n      const deserializedReleaseTag: ReleaseTag | undefined = Enum.tryGetValueByKey<ReleaseTag>(\r\n        ReleaseTag as any, // eslint-disable-line\r\n        jsonObject.releaseTag\r\n      );\r\n      if (deserializedReleaseTag === undefined) {\r\n        throw new Error(`Failed to deserialize release tag ${JSON.stringify(jsonObject.releaseTag)}`);\r\n      }\r\n\r\n      options.releaseTag = deserializedReleaseTag;\r\n    }\r\n\r\n    public get releaseTag(): ReleaseTag {\r\n      return this[_releaseTag];\r\n    }\r\n\r\n    /** @override */\r\n    public serializeInto(jsonObject: Partial<IApiReleaseTagMixinJson>): void {\r\n      super.serializeInto(jsonObject);\r\n\r\n      jsonObject.releaseTag = ReleaseTag[this.releaseTag];\r\n    }\r\n  }\r\n\r\n  return MixedClass;\r\n}\r\n\r\n/**\r\n * Static members for {@link (ApiReleaseTagMixin:interface)}.\r\n * @public\r\n */\r\nexport namespace ApiReleaseTagMixin {\r\n  /**\r\n   * A type guard that tests whether the specified `ApiItem` subclass extends the `ApiReleaseTagMixin` mixin.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The JavaScript `instanceof` operator cannot be used to test for mixin inheritance, because each invocation of\r\n   * the mixin function produces a different subclass.  (This could be mitigated by `Symbol.hasInstance`, however\r\n   * the TypeScript type system cannot invoke a runtime test.)\r\n   */\r\n  export function isBaseClassOf(apiItem: ApiItem): apiItem is ApiReleaseTagMixin {\r\n    return apiItem.hasOwnProperty(_releaseTag);\r\n  }\r\n}\r\n"]}