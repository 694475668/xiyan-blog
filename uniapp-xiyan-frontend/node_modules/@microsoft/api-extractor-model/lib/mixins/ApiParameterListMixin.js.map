{"version":3,"file":"ApiParameterListMixin.js","sourceRoot":"","sources":["../../src/mixins/ApiParameterListMixin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,4DAA4D;;;AAG5D,kDAA+C;AAC/C,8DAA2D;AAE3D,oEAA6D;AA0B7D,MAAM,cAAc,GAAkB,MAAM,CAAC,sCAAsC,CAAC,CAAC;AACrF,MAAM,WAAW,GAAkB,MAAM,CAAC,mCAAmC,CAAC,CAAC;AAwD/E;;;;;;;GAOG;AACH,SAAgB,qBAAqB,CACnC,SAAqB;AACrB,8DAA8D;;IAE9D,MAAe,UAAW,SAAQ,SAAS;QAIzC,8DAA8D;QAC9D,YAAmB,GAAG,IAAW;YAC/B,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YAEf,MAAM,OAAO,GAAkC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC;YAE7C,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;YAEvB,IAAI,IAAI,YAAY,iCAAe,EAAE;gBACnC,IAAI,OAAO,CAAC,UAAU,EAAE;oBACtB,KAAK,MAAM,gBAAgB,IAAI,OAAO,CAAC,UAAU,EAAE;wBACjD,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC;4BACzC,IAAI,EAAE,gBAAgB,CAAC,aAAa;4BACpC,oBAAoB,EAAE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,uBAAuB,CAAC;4BACjF,MAAM,EAAE,IAAI;yBACb,CAAC,CAAC;wBAEH,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACnC;iBACF;aACF;iBAAM;gBACL,MAAM,IAAI,iCAAa,CAAC,4EAA4E,CAAC,CAAC;aACvG;QACH,CAAC;QAED,gBAAgB;QACT,MAAM,CAAC,iBAAiB,CAC7B,OAA+C,EAC/C,OAA4B,EAC5B,UAAiC;YAEjC,SAAS,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YAE1D,OAAO,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;YACjD,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC;QACnD,CAAC;QAED,IAAW,aAAa;YACtB,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9B,CAAC;QAED,IAAW,UAAU;YACnB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC;QAED,gBAAgB;QACT,aAAa,CAAC,UAA0C;YAC7D,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAEhC,UAAU,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YAE9C,MAAM,gBAAgB,GAA2B,EAAE,CAAC;YACpD,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;gBACvC,gBAAgB,CAAC,IAAI,CAAC;oBACpB,aAAa,EAAE,SAAS,CAAC,IAAI;oBAC7B,uBAAuB,EAAE,SAAS,CAAC,oBAAoB,CAAC,UAAU;iBACnE,CAAC,CAAC;aACJ;YAED,UAAU,CAAC,UAAU,GAAG,gBAAgB,CAAC;QAC3C,CAAC;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAzED,sDAyEC;AAED;;;GAGG;AACH,WAAiB,qBAAqB;IACpC;;;;;;;;OAQG;IACH,SAAgB,aAAa,CAAC,OAAgB;QAC5C,OAAO,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAFe,mCAAa,gBAE5B,CAAA;AACH,CAAC,EAbgB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAarC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.s\r\n\r\nimport { ApiItem, IApiItemJson, IApiItemConstructor, IApiItemOptions } from '../items/ApiItem';\r\nimport { Parameter } from '../model/Parameter';\r\nimport { ApiDeclaredItem } from '../items/ApiDeclaredItem';\r\nimport { IExcerptTokenRange } from './Excerpt';\r\nimport { InternalError } from '@rushstack/node-core-library';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\n\r\n/**\r\n * Represents parameter information that is part of {@link IApiParameterListMixinOptions}\r\n * @public\r\n */\r\nexport interface IApiParameterOptions {\r\n  parameterName: string;\r\n  parameterTypeTokenRange: IExcerptTokenRange;\r\n}\r\n\r\n/**\r\n * Constructor options for {@link (ApiParameterListMixin:interface)}.\r\n * @public\r\n */\r\nexport interface IApiParameterListMixinOptions extends IApiItemOptions {\r\n  overloadIndex: number;\r\n  parameters: IApiParameterOptions[];\r\n}\r\n\r\nexport interface IApiParameterListJson extends IApiItemJson {\r\n  overloadIndex: number;\r\n  parameters: IApiParameterOptions[];\r\n}\r\n\r\nconst _overloadIndex: unique symbol = Symbol('ApiParameterListMixin._overloadIndex');\r\nconst _parameters: unique symbol = Symbol('ApiParameterListMixin._parameters');\r\n\r\n/**\r\n * The mixin base class for API items that can have function parameters (but not necessarily a return value).\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.  The non-abstract classes (e.g. `ApiClass`, `ApiEnum`, `ApiInterface`, etc.) use\r\n * TypeScript \"mixin\" functions (e.g. `ApiDeclaredItem`, `ApiItemContainerMixin`, etc.) to add various\r\n * features that cannot be represented as a normal inheritance chain (since TypeScript does not allow a child class\r\n * to extend more than one base class).  The \"mixin\" is a TypeScript merged declaration with three components:\r\n * the function that generates a subclass, an interface that describes the members of the subclass, and\r\n * a namespace containing static members of the class.\r\n *\r\n * @public\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface ApiParameterListMixin extends ApiItem {\r\n  /**\r\n   * When a function has multiple overloaded declarations, this zero-based integer index can be used to unqiuely\r\n   * identify them.\r\n   *\r\n   * @remarks\r\n   *\r\n   * Consider this overloaded declaration:\r\n   *\r\n   * ```ts\r\n   * export namespace Versioning {\r\n   *   // TSDoc: Versioning.(addVersions:1)\r\n   *   export function addVersions(x: number, y: number): number;\r\n   *\r\n   *   // TSDoc: Versioning.(addVersions:2)\r\n   *   export function addVersions(x: string, y: string): string;\r\n   *\r\n   *   // (implementation)\r\n   *   export function addVersions(x: number|string, y: number|string): number|string {\r\n   *     // . . .\r\n   *   }\r\n   * }\r\n   * ```\r\n   *\r\n   * In the above example, there are two overloaded declarations.  The overload using numbers will have\r\n   * `overloadIndex = 1`.  The overload using strings will have `overloadIndex = 2`.  The third declaration that\r\n   * accepts all possible inputs is considered part of the implementation, and is not processed by API Extractor.\r\n   */\r\n  readonly overloadIndex: number;\r\n\r\n  /**\r\n   * The function parameters.\r\n   */\r\n  readonly parameters: ReadonlyArray<Parameter>;\r\n\r\n  serializeInto(jsonObject: Partial<IApiItemJson>): void;\r\n}\r\n\r\n/**\r\n * Mixin function for {@link (ApiParameterListMixin:interface)}.\r\n *\r\n * @param baseClass - The base class to be extended\r\n * @returns A child class that extends baseClass, adding the {@link (ApiParameterListMixin:interface)} functionality.\r\n *\r\n * @public\r\n */\r\nexport function ApiParameterListMixin<TBaseClass extends IApiItemConstructor>(\r\n  baseClass: TBaseClass\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n): TBaseClass & (new (...args: any[]) => ApiParameterListMixin) {\r\n  abstract class MixedClass extends baseClass implements ApiParameterListMixin {\r\n    public readonly [_overloadIndex]: number;\r\n    public readonly [_parameters]: Parameter[];\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public constructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      const options: IApiParameterListMixinOptions = args[0];\r\n      this[_overloadIndex] = options.overloadIndex;\r\n\r\n      this[_parameters] = [];\r\n\r\n      if (this instanceof ApiDeclaredItem) {\r\n        if (options.parameters) {\r\n          for (const parameterOptions of options.parameters) {\r\n            const parameter: Parameter = new Parameter({\r\n              name: parameterOptions.parameterName,\r\n              parameterTypeExcerpt: this.buildExcerpt(parameterOptions.parameterTypeTokenRange),\r\n              parent: this\r\n            });\r\n\r\n            this[_parameters].push(parameter);\r\n          }\r\n        }\r\n      } else {\r\n        throw new InternalError('ApiReturnTypeMixin expects a base class that inherits from ApiDeclaredItem');\r\n      }\r\n    }\r\n\r\n    /** @override */\r\n    public static onDeserializeInto(\r\n      options: Partial<IApiParameterListMixinOptions>,\r\n      context: DeserializerContext,\r\n      jsonObject: IApiParameterListJson\r\n    ): void {\r\n      baseClass.onDeserializeInto(options, context, jsonObject);\r\n\r\n      options.overloadIndex = jsonObject.overloadIndex;\r\n      options.parameters = jsonObject.parameters || [];\r\n    }\r\n\r\n    public get overloadIndex(): number {\r\n      return this[_overloadIndex];\r\n    }\r\n\r\n    public get parameters(): ReadonlyArray<Parameter> {\r\n      return this[_parameters];\r\n    }\r\n\r\n    /** @override */\r\n    public serializeInto(jsonObject: Partial<IApiParameterListJson>): void {\r\n      super.serializeInto(jsonObject);\r\n\r\n      jsonObject.overloadIndex = this.overloadIndex;\r\n\r\n      const parameterObjects: IApiParameterOptions[] = [];\r\n      for (const parameter of this.parameters) {\r\n        parameterObjects.push({\r\n          parameterName: parameter.name,\r\n          parameterTypeTokenRange: parameter.parameterTypeExcerpt.tokenRange\r\n        });\r\n      }\r\n\r\n      jsonObject.parameters = parameterObjects;\r\n    }\r\n  }\r\n\r\n  return MixedClass;\r\n}\r\n\r\n/**\r\n * Static members for {@link (ApiParameterListMixin:interface)}.\r\n * @public\r\n */\r\nexport namespace ApiParameterListMixin {\r\n  /**\r\n   * A type guard that tests whether the specified `ApiItem` subclass extends the `ApiParameterListMixin` mixin.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The JavaScript `instanceof` operator cannot be used to test for mixin inheritance, because each invocation of\r\n   * the mixin function produces a different subclass.  (This could be mitigated by `Symbol.hasInstance`, however\r\n   * the TypeScript type system cannot invoke a runtime test.)\r\n   */\r\n  export function isBaseClassOf(apiItem: ApiItem): apiItem is ApiParameterListMixin {\r\n    return apiItem.hasOwnProperty(_parameters);\r\n  }\r\n}\r\n"]}