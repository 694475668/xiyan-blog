{"version":3,"file":"ApiItemContainerMixin.js","sourceRoot":"","sources":["../../src/mixins/ApiItemContainerMixin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.s\r\n\r\nimport {\r\n  ApiItem,\r\n  apiItem_onParentChanged,\r\n  IApiItemJson,\r\n  IApiItemOptions,\r\n  IApiItemConstructor,\r\n  ApiItemKind\r\n} from '../items/ApiItem';\r\nimport { ApiNameMixin } from './ApiNameMixin';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\nimport { InternalError, LegacyAdapters } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Constructor options for {@link (ApiItemContainerMixin:interface)}.\r\n * @public\r\n */\r\nexport interface IApiItemContainerMixinOptions extends IApiItemOptions {\r\n  members?: ApiItem[];\r\n}\r\n\r\nexport interface IApiItemContainerJson extends IApiItemJson {\r\n  members: IApiItemJson[];\r\n}\r\n\r\nconst _members: unique symbol = Symbol('ApiItemContainerMixin._members');\r\nconst _membersSorted: unique symbol = Symbol('ApiItemContainerMixin._membersSorted');\r\nconst _membersByContainerKey: unique symbol = Symbol('ApiItemContainerMixin._membersByContainerKey');\r\nconst _membersByName: unique symbol = Symbol('ApiItemContainerMixin._membersByName');\r\nconst _membersByKind: unique symbol = Symbol('ApiItemContainerMixin._membersByKind');\r\n\r\n/**\r\n * The mixin base class for API items that act as containers for other child items.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.  The non-abstract classes (e.g. `ApiClass`, `ApiEnum`, `ApiInterface`, etc.) use\r\n * TypeScript \"mixin\" functions (e.g. `ApiDeclaredItem`, `ApiItemContainerMixin`, etc.) to add various\r\n * features that cannot be represented as a normal inheritance chain (since TypeScript does not allow a child class\r\n * to extend more than one base class).  The \"mixin\" is a TypeScript merged declaration with three components:\r\n * the function that generates a subclass, an interface that describes the members of the subclass, and\r\n * a namespace containing static members of the class.\r\n *\r\n * Examples of `ApiItemContainerMixin` child classes include `ApiModel`, `ApiPackage`, `ApiEntryPoint`,\r\n * and `ApiEnum`.  But note that `Parameter` is not considered a \"member\" of an `ApiMethod`; this relationship\r\n * is modeled using {@link (ApiParameterListMixin:interface).parameters} instead\r\n * of {@link ApiItem.members}.\r\n *\r\n * @public\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface ApiItemContainerMixin extends ApiItem {\r\n  /**\r\n   * Adds a new member to the container.\r\n   *\r\n   * @remarks\r\n   * An ApiItem cannot be added to more than one container.\r\n   */\r\n  addMember(member: ApiItem): void;\r\n\r\n  /**\r\n   * Attempts to retrieve a member using its containerKey, or returns `undefined` if no matching member was found.\r\n   *\r\n   * @remarks\r\n   * Use the `getContainerKey()` static member to construct the key.  Each subclass has a different implementation\r\n   * of this function, according to the aspects that are important for identifying it.\r\n   *\r\n   * See {@link ApiItem.containerKey} for more information.\r\n   */\r\n  tryGetMemberByKey(containerKey: string): ApiItem | undefined;\r\n\r\n  /**\r\n   * Returns a list of members with the specified name.\r\n   */\r\n  findMembersByName(name: string): ReadonlyArray<ApiItem>;\r\n\r\n  /**\r\n   * For a given member of this container, return its `ApiItem.getMergedSiblings()` list.\r\n   * @internal\r\n   */\r\n  _getMergedSiblingsForMember(memberApiItem: ApiItem): ReadonlyArray<ApiItem>;\r\n\r\n  /** @override */\r\n  serializeInto(jsonObject: Partial<IApiItemJson>): void;\r\n}\r\n\r\n/**\r\n * Mixin function for {@link ApiDeclaredItem}.\r\n *\r\n * @param baseClass - The base class to be extended\r\n * @returns A child class that extends baseClass, adding the {@link (ApiItemContainerMixin:interface)} functionality.\r\n *\r\n * @public\r\n */\r\nexport function ApiItemContainerMixin<TBaseClass extends IApiItemConstructor>(\r\n  baseClass: TBaseClass\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n): TBaseClass & (new (...args: any[]) => ApiItemContainerMixin) {\r\n  abstract class MixedClass extends baseClass implements ApiItemContainerMixin {\r\n    public readonly [_members]: ApiItem[];\r\n    public [_membersSorted]: boolean;\r\n    public [_membersByContainerKey]: Map<string, ApiItem>;\r\n\r\n    // For members of this container that extend ApiNameMixin, this stores the list of members with a given name.\r\n    // Examples include merged declarations, overloaded functions, etc.\r\n    public [_membersByName]: Map<string, ApiItem[]> | undefined;\r\n\r\n    // For members of this container that do NOT extend ApiNameMixin, this stores the list of members\r\n    // that share a common ApiItemKind.  Examples include overloaded constructors or index signatures.\r\n    public [_membersByKind]: Map<string, ApiItem[]> | undefined; // key is ApiItemKind\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public constructor(...args: any[]) {\r\n      super(...args);\r\n      const options: IApiItemContainerMixinOptions = args[0] as IApiItemContainerMixinOptions;\r\n\r\n      this[_members] = [];\r\n      this[_membersByContainerKey] = new Map<string, ApiItem>();\r\n\r\n      if (options.members) {\r\n        for (const member of options.members) {\r\n          this.addMember(member);\r\n        }\r\n      }\r\n    }\r\n\r\n    /** @override */\r\n    public static onDeserializeInto(\r\n      options: Partial<IApiItemContainerMixinOptions>,\r\n      context: DeserializerContext,\r\n      jsonObject: IApiItemContainerJson\r\n    ): void {\r\n      baseClass.onDeserializeInto(options, context, jsonObject);\r\n\r\n      options.members = [];\r\n      for (const memberObject of jsonObject.members) {\r\n        options.members.push(ApiItem.deserialize(memberObject, context));\r\n      }\r\n    }\r\n\r\n    /** @override */\r\n    public get members(): ReadonlyArray<ApiItem> {\r\n      if (!this[_membersSorted]) {\r\n        LegacyAdapters.sortStable(this[_members], (x, y) => x.getSortKey().localeCompare(y.getSortKey()));\r\n        this[_membersSorted] = true;\r\n      }\r\n\r\n      return this[_members];\r\n    }\r\n\r\n    public addMember(member: ApiItem): void {\r\n      if (this[_membersByContainerKey].has(member.containerKey)) {\r\n        throw new Error(\r\n          `Another member has already been added with the same name (${member.displayName})` +\r\n            ` and containerKey (${member.containerKey})`\r\n        );\r\n      }\r\n\r\n      const existingParent: ApiItem | undefined = member.parent;\r\n      if (existingParent !== undefined) {\r\n        throw new Error(\r\n          `This item has already been added to another container: \"${existingParent.displayName}\"`\r\n        );\r\n      }\r\n\r\n      this[_members].push(member);\r\n      this[_membersByName] = undefined; // invalidate the lookup\r\n      this[_membersByKind] = undefined; // invalidate the lookup\r\n      this[_membersSorted] = false;\r\n      this[_membersByContainerKey].set(member.containerKey, member);\r\n\r\n      member[apiItem_onParentChanged](this);\r\n    }\r\n\r\n    public tryGetMemberByKey(containerKey: string): ApiItem | undefined {\r\n      return this[_membersByContainerKey].get(containerKey);\r\n    }\r\n\r\n    public findMembersByName(name: string): ReadonlyArray<ApiItem> {\r\n      this._ensureMemberMaps();\r\n      return this[_membersByName]!.get(name) || [];\r\n    }\r\n\r\n    /** @internal */\r\n    public _getMergedSiblingsForMember(memberApiItem: ApiItem): ReadonlyArray<ApiItem> {\r\n      this._ensureMemberMaps();\r\n      let result: ApiItem[] | undefined;\r\n      if (ApiNameMixin.isBaseClassOf(memberApiItem)) {\r\n        result = this[_membersByName]!.get(memberApiItem.name);\r\n      } else {\r\n        result = this[_membersByKind]!.get(memberApiItem.kind);\r\n      }\r\n      if (!result) {\r\n        throw new InternalError('Item was not found in the _membersByName/_membersByKind lookup');\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /** @internal */\r\n    public _ensureMemberMaps(): void {\r\n      // Build the _membersByName and _membersByKind tables if they don't already exist\r\n      if (this[_membersByName] === undefined) {\r\n        const membersByName: Map<string, ApiItem[]> = new Map<string, ApiItem[]>();\r\n        const membersByKind: Map<string, ApiItem[]> = new Map<string, ApiItem[]>();\r\n\r\n        for (const member of this[_members]) {\r\n          let map: Map<string, ApiItem[]> | Map<ApiItemKind, ApiItem[]>;\r\n          let key: string | ApiItemKind;\r\n\r\n          if (ApiNameMixin.isBaseClassOf(member)) {\r\n            map = membersByName;\r\n            key = member.name;\r\n          } else {\r\n            map = membersByKind;\r\n            key = member.kind;\r\n          }\r\n\r\n          let list: ApiItem[] | undefined = map.get(key);\r\n          if (list === undefined) {\r\n            list = [];\r\n            map.set(key, list);\r\n          }\r\n          list.push(member);\r\n        }\r\n\r\n        this[_membersByName] = membersByName;\r\n        this[_membersByKind] = membersByKind;\r\n      }\r\n    }\r\n\r\n    /** @override */\r\n    public serializeInto(jsonObject: Partial<IApiItemContainerJson>): void {\r\n      super.serializeInto(jsonObject);\r\n\r\n      const memberObjects: IApiItemJson[] = [];\r\n\r\n      for (const member of this.members) {\r\n        const memberJsonObject: Partial<IApiItemJson> = {};\r\n        member.serializeInto(memberJsonObject);\r\n        memberObjects.push(memberJsonObject as IApiItemJson);\r\n      }\r\n\r\n      jsonObject.members = memberObjects;\r\n    }\r\n  }\r\n\r\n  return MixedClass;\r\n}\r\n\r\n/**\r\n * Static members for {@link (ApiItemContainerMixin:interface)}.\r\n * @public\r\n */\r\nexport namespace ApiItemContainerMixin {\r\n  /**\r\n   * A type guard that tests whether the specified `ApiItem` subclass extends the `ApiItemContainerMixin` mixin.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The JavaScript `instanceof` operator cannot be used to test for mixin inheritance, because each invocation of\r\n   * the mixin function produces a different subclass.  (This could be mitigated by `Symbol.hasInstance`, however\r\n   * the TypeScript type system cannot invoke a runtime test.)\r\n   */\r\n  export function isBaseClassOf(apiItem: ApiItem): apiItem is ApiItemContainerMixin {\r\n    return apiItem.hasOwnProperty(_members);\r\n  }\r\n}\r\n"]}