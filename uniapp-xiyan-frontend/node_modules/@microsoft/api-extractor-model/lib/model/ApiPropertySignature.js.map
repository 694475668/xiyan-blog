{"version":3,"file":"ApiPropertySignature.js","sourceRoot":"","sources":["../../src/model/ApiPropertySignature.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kGAKiE;AAEjE,8DAAoF;AAQpF;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAa,oBAAqB,SAAQ,iCAAe;IACvD,YAAmB,OAAqC;QACtD,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,IAAY;QACxC,OAAO,GAAG,IAAI,IAAI,2CAA6B,EAAE,CAAC;IACpD,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,mDAAqC;IACvC,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,OAAO,oBAAoB,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;IAED,sBAAsB;IACf,uBAAuB;QAC5B,MAAM,aAAa,GAAc,2CAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,2CAAoB,CAAC,KAAK,EAAE,CAAC;aACjF,iBAAiB,oBAAqB,aAAa,CAAC;aACpD,WAAW,uBAAgB,CAAC;IACjC,CAAC;CACF;AA1BD,oDA0BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DeclarationReference,\r\n  Meaning,\r\n  Navigation,\r\n  Component\r\n} from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiPropertyItem, IApiPropertyItemOptions } from '../items/ApiPropertyItem';\r\n\r\n/**\r\n * Constructor options for {@link ApiPropertySignature}.\r\n * @public\r\n */\r\nexport interface IApiPropertySignatureOptions extends IApiPropertyItemOptions {}\r\n\r\n/**\r\n * Represents a TypeScript property declaration that belongs to an `ApiInterface`.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiPropertySignature` represents a TypeScript declaration such as the `width` and `height` members in this example:\r\n *\r\n * ```ts\r\n * export interface IWidget {\r\n *   readonly width: number;\r\n *   height: number;\r\n * }\r\n * ```\r\n *\r\n * Compare with {@link ApiProperty}, which represents a property belonging to a class.\r\n * For example, a class property can be `static` but an interface property cannot.\r\n *\r\n * @public\r\n */\r\nexport class ApiPropertySignature extends ApiPropertyItem {\r\n  public constructor(options: IApiPropertySignatureOptions) {\r\n    super(options);\r\n  }\r\n\r\n  public static getContainerKey(name: string): string {\r\n    return `${name}|${ApiItemKind.PropertySignature}`;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.PropertySignature;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    return ApiPropertySignature.getContainerKey(this.name);\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    const nameComponent: Component = DeclarationReference.parseComponent(this.name);\r\n    return (this.parent ? this.parent.canonicalReference : DeclarationReference.empty())\r\n      .addNavigationStep(Navigation.Members, nameComponent)\r\n      .withMeaning(Meaning.Member);\r\n  }\r\n}\r\n"]}