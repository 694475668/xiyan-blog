{"version":3,"file":"TypeParameter.js","sourceRoot":"","sources":["../../src/model/TypeParameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,kEAA+D;AAe/D;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAa,aAAa;IAoCxB,YAAmB,OAA8B;QAC/C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,IAAW,mBAAmB;QAC5B,IAAI,IAAI,CAAC,OAAO,YAAY,qCAAiB,EAAE;YAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1E;SACF;IACH,CAAC;CACF;AArDD,sCAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\n\r\nimport { ApiDocumentedItem } from '../items/ApiDocumentedItem';\r\nimport { Excerpt } from '../mixins/Excerpt';\r\nimport { ApiTypeParameterListMixin } from '../mixins/ApiTypeParameterListMixin';\r\n\r\n/**\r\n * Constructor options for {@link TypeParameter}.\r\n * @public\r\n */\r\nexport interface ITypeParameterOptions {\r\n  name: string;\r\n  constraintExcerpt: Excerpt;\r\n  defaultTypeExcerpt: Excerpt;\r\n  parent: ApiTypeParameterListMixin;\r\n}\r\n\r\n/**\r\n * Represents a named type parameter for a generic declaration.\r\n *\r\n * @remarks\r\n *\r\n * `TypeParameter` represents a TypeScript declaration such as `T` in this example:\r\n *\r\n * ```ts\r\n * interface IIdentifier {\r\n *     getCode(): string;\r\n * }\r\n *\r\n * class BarCode implements IIdentifier {\r\n *     private _value: number;\r\n *     public getCode(): string { return this._value.toString(); }\r\n * }\r\n *\r\n * class Book<TIdentifier extends IIdentifier = BarCode> {\r\n *     public identifier: TIdentifier;\r\n * }\r\n * ```\r\n *\r\n * `TypeParameter` objects belong to the {@link (ApiTypeParameterListMixin:interface).typeParameters} collection.\r\n *\r\n * @public\r\n */\r\nexport class TypeParameter {\r\n  /**\r\n   * An {@link Excerpt} that describes the base constraint of the type parameter.\r\n   *\r\n   * @remarks\r\n   * In the example below, the `constraintExcerpt` would correspond to the `IIdentifier` subexpression:\r\n   *\r\n   * ```ts\r\n   * class Book<TIdentifier extends IIdentifier = BarCode> {\r\n   *     public identifier: TIdentifier;\r\n   * }\r\n   * ```\r\n   */\r\n  public readonly constraintExcerpt: Excerpt;\r\n\r\n  /**\r\n   * An {@link Excerpt} that describes the default type of the type parameter.\r\n   *\r\n   * @remarks\r\n   * In the example below, the `defaultTypeExcerpt` would correspond to the `BarCode` subexpression:\r\n   *\r\n   * ```ts\r\n   * class Book<TIdentifier extends IIdentifier = BarCode> {\r\n   *     public identifier: TIdentifier;\r\n   * }\r\n   * ```\r\n   */\r\n  public readonly defaultTypeExcerpt: Excerpt;\r\n\r\n  /**\r\n   * The parameter name.\r\n   */\r\n  public name: string;\r\n\r\n  private _parent: ApiTypeParameterListMixin;\r\n\r\n  public constructor(options: ITypeParameterOptions) {\r\n    this.name = options.name;\r\n    this.constraintExcerpt = options.constraintExcerpt;\r\n    this.defaultTypeExcerpt = options.defaultTypeExcerpt;\r\n    this._parent = options.parent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `@typeParam` documentation for this parameter, if present.\r\n   */\r\n  public get tsdocTypeParamBlock(): tsdoc.DocParamBlock | undefined {\r\n    if (this._parent instanceof ApiDocumentedItem) {\r\n      if (this._parent.tsdocComment) {\r\n        return this._parent.tsdocComment.typeParams.tryGetBlockByName(this.name);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}