{"version":3,"file":"ApiCallSignature.js","sourceRoot":"","sources":["../../src/model/ApiCallSignature.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kGAIiE;AAEjE,8DAAoF;AACpF,2EAAuG;AACvG,qEAA8F;AAC9F,qEAA8F;AAC9F,mFAG6C;AAa7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAa,gBAAiB,SAAQ,qDAAyB,CAC7D,6CAAqB,CAAC,uCAAkB,CAAC,uCAAkB,CAAC,iCAAe,CAAC,CAAC,CAAC,CAC/E;IACC,YAAmB,OAAiC;QAClD,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,aAAqB;QACjD,OAAO,IAAI,mCAAyB,IAAI,aAAa,EAAE,CAAC;IAC1D,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,2CAAiC;IACnC,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,OAAO,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;IAED,sBAAsB;IACf,uBAAuB;QAC5B,MAAM,MAAM,GAAyB,IAAI,CAAC,MAAM;YAC9C,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB;YAChC,CAAC,CAAC,iDAAiD;gBACjD,2CAAoB,CAAC,KAAK,EAAE,CAAC,iBAAiB,oBAAqB,UAAU,CAAC,CAAC;QACnF,OAAO,MAAM,CAAC,WAAW,4BAAuB,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzF,CAAC;CACF;AA7BD,4CA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DeclarationReference,\r\n  Meaning,\r\n  Navigation\r\n} from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { IApiDeclaredItemOptions, ApiDeclaredItem } from '../items/ApiDeclaredItem';\r\nimport { IApiParameterListMixinOptions, ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\nimport { IApiReleaseTagMixinOptions, ApiReleaseTagMixin } from '../mixins/ApiReleaseTagMixin';\r\nimport { IApiReturnTypeMixinOptions, ApiReturnTypeMixin } from '../mixins/ApiReturnTypeMixin';\r\nimport {\r\n  IApiTypeParameterListMixinOptions,\r\n  ApiTypeParameterListMixin\r\n} from '../mixins/ApiTypeParameterListMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiCallSignature}.\r\n * @public\r\n */\r\nexport interface IApiCallSignatureOptions\r\n  extends IApiTypeParameterListMixinOptions,\r\n    IApiParameterListMixinOptions,\r\n    IApiReleaseTagMixinOptions,\r\n    IApiReturnTypeMixinOptions,\r\n    IApiDeclaredItemOptions {}\r\n\r\n/**\r\n * Represents a TypeScript function call signature.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiCallSignature` represents a TypeScript declaration such as `(x: number, y: number): number`\r\n * in this example:\r\n *\r\n * ```ts\r\n * export interface IChooser {\r\n *   // A call signature:\r\n *   (x: number, y: number): number;\r\n *\r\n *   // Another overload for this call signature:\r\n *   (x: string, y: string): string;\r\n * }\r\n *\r\n * function chooseFirst<T>(x: T, y: T): T {\r\n *   return x;\r\n * }\r\n *\r\n * let chooser: IChooser = chooseFirst;\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class ApiCallSignature extends ApiTypeParameterListMixin(\r\n  ApiParameterListMixin(ApiReleaseTagMixin(ApiReturnTypeMixin(ApiDeclaredItem)))\r\n) {\r\n  public constructor(options: IApiCallSignatureOptions) {\r\n    super(options);\r\n  }\r\n\r\n  public static getContainerKey(overloadIndex: number): string {\r\n    return `|${ApiItemKind.CallSignature}|${overloadIndex}`;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.CallSignature;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    return ApiCallSignature.getContainerKey(this.overloadIndex);\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    const parent: DeclarationReference = this.parent\r\n      ? this.parent.canonicalReference\r\n      : // .withMeaning() requires some kind of component\r\n        DeclarationReference.empty().addNavigationStep(Navigation.Members, '(parent)');\r\n    return parent.withMeaning(Meaning.CallSignature).withOverloadIndex(this.overloadIndex);\r\n  }\r\n}\r\n"]}