{"version":3,"file":"ApiPackage.js","sourceRoot":"","sources":["../../src/model/ApiPackage.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { DeclarationReference } from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { ApiItem, ApiItemKind, IApiItemJson } from '../items/ApiItem';\r\nimport { ApiItemContainerMixin, IApiItemContainerMixinOptions } from '../mixins/ApiItemContainerMixin';\r\nimport {\r\n  JsonFile,\r\n  IJsonFileSaveOptions,\r\n  PackageJsonLookup,\r\n  IPackageJson,\r\n  JsonObject\r\n} from '@rushstack/node-core-library';\r\nimport { ApiDocumentedItem, IApiDocumentedItemOptions } from '../items/ApiDocumentedItem';\r\nimport { ApiEntryPoint } from './ApiEntryPoint';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\nimport { DeserializerContext, ApiJsonSchemaVersion } from './DeserializerContext';\r\nimport { TSDocConfiguration } from '@microsoft/tsdoc';\r\nimport { TSDocConfigFile } from '@microsoft/tsdoc-config';\r\n\r\n/**\r\n * Constructor options for {@link ApiPackage}.\r\n * @public\r\n */\r\nexport interface IApiPackageOptions\r\n  extends IApiItemContainerMixinOptions,\r\n    IApiNameMixinOptions,\r\n    IApiDocumentedItemOptions {\r\n  tsdocConfiguration: TSDocConfiguration;\r\n}\r\n\r\nexport interface IApiPackageMetadataJson {\r\n  /**\r\n   * The NPM package name for the tool that wrote the *.api.json file.\r\n   * For informational purposes only.\r\n   */\r\n  toolPackage: string;\r\n\r\n  /**\r\n   * The NPM package version for the tool that wrote the *.api.json file.\r\n   * For informational purposes only.\r\n   */\r\n  toolVersion: string;\r\n\r\n  /**\r\n   * The schema version for the .api.json file format.  Used for determining whether the file format is\r\n   * supported, and for backwards compatibility.\r\n   */\r\n  schemaVersion: ApiJsonSchemaVersion;\r\n\r\n  /**\r\n   * To support forwards compatibility, the `oldestForwardsCompatibleVersion` field tracks the oldest schema version\r\n   * whose corresponding deserializer could safely load this file.\r\n   *\r\n   * @remarks\r\n   * Normally api-extractor-model should refuse to load a schema version that is newer than the latest version\r\n   * that its deserializer understands.  However, sometimes a schema change may merely introduce some new fields\r\n   * without modifying or removing any existing fields.  In this case, an older api-extractor-model library can\r\n   * safely deserialize the newer version (by ignoring the extra fields that it doesn't recognize).  The newer\r\n   * serializer can use this field to communicate that.\r\n   *\r\n   * If present, the `oldestForwardsCompatibleVersion` must be less than or equal to\r\n   * `IApiPackageMetadataJson.schemaVersion`.\r\n   */\r\n  oldestForwardsCompatibleVersion?: ApiJsonSchemaVersion;\r\n\r\n  /**\r\n   * The TSDoc configuration that was used when analyzing the API for this package.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The structure of this objet is defined by the `@microsoft/tsdoc-config` library.\r\n   * Normally this configuration is loaded from the project's tsdoc.json file.  It is stored\r\n   * in the .api.json file so that doc comments can be parsed accurately when loading the file.\r\n   */\r\n  tsdocConfig: JsonObject;\r\n}\r\n\r\nexport interface IApiPackageJson extends IApiItemJson {\r\n  /**\r\n   * A file header that stores metadata about the tool that wrote the *.api.json file.\r\n   */\r\n  metadata: IApiPackageMetadataJson;\r\n}\r\n\r\n/**\r\n * Options for {@link ApiPackage.saveToJsonFile}.\r\n * @public\r\n */\r\nexport interface IApiPackageSaveOptions extends IJsonFileSaveOptions {\r\n  /**\r\n   * Optionally specifies a value for the \"toolPackage\" field in the output .api.json data file;\r\n   * otherwise, the value will be \"api-extractor-model\".\r\n   */\r\n  toolPackage?: string;\r\n\r\n  /**\r\n   * Optionally specifies a value for the \"toolVersion\" field in the output .api.json data file;\r\n   * otherwise, the value will be the current version of the api-extractor-model package.\r\n   */\r\n  toolVersion?: string;\r\n\r\n  /**\r\n   * Set to true only when invoking API Extractor's test harness.\r\n   *\r\n   * @remarks\r\n   * When `testMode` is true, the `toolVersion` field in the .api.json file is assigned an empty string\r\n   * to prevent spurious diffs in output files tracked for tests.\r\n   */\r\n  testMode?: boolean;\r\n}\r\n\r\n/**\r\n * Represents an NPM package containing API declarations.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * @public\r\n */\r\nexport class ApiPackage extends ApiItemContainerMixin(ApiNameMixin(ApiDocumentedItem)) {\r\n  private readonly _tsdocConfiguration: TSDocConfiguration;\r\n\r\n  public constructor(options: IApiPackageOptions) {\r\n    super(options);\r\n\r\n    this._tsdocConfiguration = options.tsdocConfiguration;\r\n  }\r\n\r\n  public static loadFromJsonFile(apiJsonFilename: string): ApiPackage {\r\n    const jsonObject: IApiPackageJson = JsonFile.load(apiJsonFilename);\r\n\r\n    if (!jsonObject || !jsonObject.metadata || typeof jsonObject.metadata.schemaVersion !== 'number') {\r\n      throw new Error(\r\n        `Error loading ${apiJsonFilename}:` +\r\n          `\\nThe file format is not recognized; the \"metadata.schemaVersion\" field is missing or invalid`\r\n      );\r\n    }\r\n\r\n    const schemaVersion: number = jsonObject.metadata.schemaVersion;\r\n\r\n    if (schemaVersion < ApiJsonSchemaVersion.OLDEST_SUPPORTED) {\r\n      throw new Error(\r\n        `Error loading ${apiJsonFilename}:` +\r\n          `\\nThe file format is version ${schemaVersion},` +\r\n          ` whereas ${ApiJsonSchemaVersion.OLDEST_SUPPORTED} is the oldest version supported by this tool`\r\n      );\r\n    }\r\n\r\n    let oldestForwardsCompatibleVersion: number = schemaVersion;\r\n    if (jsonObject.metadata.oldestForwardsCompatibleVersion) {\r\n      // Sanity check\r\n      if (jsonObject.metadata.oldestForwardsCompatibleVersion > schemaVersion) {\r\n        throw new Error(\r\n          `Error loading ${apiJsonFilename}:` +\r\n            `\\nInvalid file format; \"oldestForwardsCompatibleVersion\" cannot be newer than \"schemaVersion\"`\r\n        );\r\n      }\r\n      oldestForwardsCompatibleVersion = jsonObject.metadata.oldestForwardsCompatibleVersion;\r\n    }\r\n\r\n    let versionToDeserialize: number = schemaVersion;\r\n    if (versionToDeserialize > ApiJsonSchemaVersion.LATEST) {\r\n      // If the file format is too new, can we treat it as some earlier compatible version\r\n      // as indicated by oldestForwardsCompatibleVersion?\r\n      versionToDeserialize = Math.max(oldestForwardsCompatibleVersion, ApiJsonSchemaVersion.LATEST);\r\n\r\n      if (versionToDeserialize > ApiJsonSchemaVersion.LATEST) {\r\n        // Nope, still too new\r\n        throw new Error(\r\n          `Error loading ${apiJsonFilename}:` +\r\n            `\\nThe file format version ${schemaVersion} was written by a newer release of` +\r\n            ` the api-extractor-model library; you may need to upgrade your software`\r\n        );\r\n      }\r\n    }\r\n\r\n    const tsdocConfiguration: TSDocConfiguration = new TSDocConfiguration();\r\n\r\n    if (versionToDeserialize >= ApiJsonSchemaVersion.V_1004) {\r\n      const tsdocConfigFile: TSDocConfigFile = TSDocConfigFile.loadFromObject(\r\n        jsonObject.metadata.tsdocConfig\r\n      );\r\n      if (tsdocConfigFile.hasErrors) {\r\n        throw new Error(`Error loading ${apiJsonFilename}:\\n` + tsdocConfigFile.getErrorSummary());\r\n      }\r\n\r\n      tsdocConfigFile.configureParser(tsdocConfiguration);\r\n    }\r\n\r\n    const context: DeserializerContext = new DeserializerContext({\r\n      apiJsonFilename,\r\n      toolPackage: jsonObject.metadata.toolPackage,\r\n      toolVersion: jsonObject.metadata.toolVersion,\r\n      versionToDeserialize: versionToDeserialize,\r\n      tsdocConfiguration\r\n    });\r\n\r\n    return ApiItem.deserialize(jsonObject, context) as ApiPackage;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Package;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    // No prefix needed, because ApiPackage is the only possible member of an ApiModel\r\n    return this.name;\r\n  }\r\n\r\n  public get entryPoints(): ReadonlyArray<ApiEntryPoint> {\r\n    return this.members as ReadonlyArray<ApiEntryPoint>;\r\n  }\r\n\r\n  /**\r\n   * The TSDoc configuration that was used when analyzing the API for this package.\r\n   *\r\n   * @remarks\r\n   *\r\n   * Normally this configuration is loaded from the project's tsdoc.json file.  It is stored\r\n   * in the .api.json file so that doc comments can be parsed accurately when loading the file.\r\n   */\r\n  public get tsdocConfiguration(): TSDocConfiguration {\r\n    return this._tsdocConfiguration;\r\n  }\r\n\r\n  /** @override */\r\n  public addMember(member: ApiEntryPoint): void {\r\n    if (member.kind !== ApiItemKind.EntryPoint) {\r\n      throw new Error('Only items of type ApiEntryPoint may be added to an ApiPackage');\r\n    }\r\n    super.addMember(member);\r\n  }\r\n\r\n  public findEntryPointsByPath(importPath: string): ReadonlyArray<ApiEntryPoint> {\r\n    return this.findMembersByName(importPath) as ReadonlyArray<ApiEntryPoint>;\r\n  }\r\n\r\n  public saveToJsonFile(apiJsonFilename: string, options?: IApiPackageSaveOptions): void {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    const packageJson: IPackageJson = PackageJsonLookup.loadOwnPackageJson(__dirname);\r\n\r\n    const tsdocConfigFile: TSDocConfigFile = TSDocConfigFile.loadFromParser(this.tsdocConfiguration);\r\n    const tsdocConfig: JsonObject = tsdocConfigFile.saveToObject();\r\n\r\n    const jsonObject: IApiPackageJson = {\r\n      metadata: {\r\n        toolPackage: options.toolPackage || packageJson.name,\r\n        // In test mode, we don't write the real version, since that would cause spurious diffs whenever\r\n        // the version is bumped.  Instead we write a placeholder string.\r\n        toolVersion: options.testMode ? '[test mode]' : options.toolVersion || packageJson.version,\r\n        schemaVersion: ApiJsonSchemaVersion.LATEST,\r\n        oldestForwardsCompatibleVersion: ApiJsonSchemaVersion.OLDEST_FORWARDS_COMPATIBLE,\r\n        tsdocConfig\r\n      }\r\n    } as IApiPackageJson;\r\n    this.serializeInto(jsonObject);\r\n    JsonFile.save(jsonObject, apiJsonFilename, options);\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    return DeclarationReference.package(this.name);\r\n  }\r\n}\r\n"]}