{"version":3,"file":"Parameter.js","sourceRoot":"","sources":["../../src/model/Parameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,kEAA+D;AAc/D;;;;;;;;;;;;;;;;GAgBG;AACH,MAAa,SAAS;IAapB,YAAmB,OAA0B;QAC3C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;QACzD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,IAAW,eAAe;QACxB,IAAI,IAAI,CAAC,OAAO,YAAY,qCAAiB,EAAE;YAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACtE;SACF;IACH,CAAC;CACF;AA7BD,8BA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\n\r\nimport { ApiDocumentedItem } from '../items/ApiDocumentedItem';\r\nimport { Excerpt } from '../mixins/Excerpt';\r\nimport { ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\n\r\n/**\r\n * Constructor options for {@link Parameter}.\r\n * @public\r\n */\r\nexport interface IParameterOptions {\r\n  name: string;\r\n  parameterTypeExcerpt: Excerpt;\r\n  parent: ApiParameterListMixin;\r\n}\r\n\r\n/**\r\n * Represents a named parameter for a function-like declaration.\r\n *\r\n * @remarks\r\n *\r\n * `Parameter` represents a TypeScript declaration such as `x: number` in this example:\r\n *\r\n * ```ts\r\n * export function add(x: number, y: number): number {\r\n *   return x + y;\r\n * }\r\n * ```\r\n *\r\n * `Parameter` objects belong to the {@link (ApiParameterListMixin:interface).parameters} collection.\r\n *\r\n * @public\r\n */\r\nexport class Parameter {\r\n  /**\r\n   * An {@link Excerpt} that describes the type of the parameter.\r\n   */\r\n  public readonly parameterTypeExcerpt: Excerpt;\r\n\r\n  /**\r\n   * The parameter name.\r\n   */\r\n  public name: string;\r\n\r\n  private _parent: ApiParameterListMixin;\r\n\r\n  public constructor(options: IParameterOptions) {\r\n    this.name = options.name;\r\n    this.parameterTypeExcerpt = options.parameterTypeExcerpt;\r\n    this._parent = options.parent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `@param` documentation for this parameter, if present.\r\n   */\r\n  public get tsdocParamBlock(): tsdoc.DocParamBlock | undefined {\r\n    if (this._parent instanceof ApiDocumentedItem) {\r\n      if (this._parent.tsdocComment) {\r\n        return this._parent.tsdocComment.params.tryGetBlockByName(this.name);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}