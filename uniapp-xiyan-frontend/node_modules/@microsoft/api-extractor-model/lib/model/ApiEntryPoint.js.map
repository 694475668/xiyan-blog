{"version":3,"file":"ApiEntryPoint.js","sourceRoot":"","sources":["../../src/model/ApiEntryPoint.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kGAA+F;AAC/F,8CAAwD;AACxD,2EAAuG;AACvG,yDAA4E;AAC5E,6CAA0C;AAQ1C;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAa,aAAc,SAAQ,6CAAqB,CAAC,2BAAY,CAAC,iBAAO,CAAC,CAAC;IAC7E,YAAmB,OAA8B;QAC/C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,qCAA8B;IAChC,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,uFAAuF;QACvF,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,sBAAsB;IACf,uBAAuB;QAC5B,IAAI,IAAI,CAAC,MAAM,YAAY,uBAAU,EAAE;YACrC,OAAO,2CAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACxE;QAED,OAAO,2CAAoB,CAAC,KAAK,EAAE,CAAC;IACtC,CAAC;CACF;AAxCD,sCAwCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { DeclarationReference } from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { ApiItem, ApiItemKind } from '../items/ApiItem';\r\nimport { ApiItemContainerMixin, IApiItemContainerMixinOptions } from '../mixins/ApiItemContainerMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\nimport { ApiPackage } from './ApiPackage';\r\n\r\n/**\r\n * Constructor options for {@link ApiEntryPoint}.\r\n * @public\r\n */\r\nexport interface IApiEntryPointOptions extends IApiItemContainerMixinOptions, IApiNameMixinOptions {}\r\n\r\n/**\r\n * Represents the entry point for an NPM package.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiEntryPoint` represents the entry point to an NPM package.  API Extractor does not currently support\r\n * analysis of multiple entry points, but the `ApiEntryPoint` object is included to support a future feature.\r\n * In the current implementation, `ApiEntryPoint.importPath` is always the empty string.\r\n *\r\n * For example, suppose the package.json file looks like this:\r\n *\r\n * ```json\r\n * {\r\n *   \"name\": \"example-library\",\r\n *   \"version\": \"1.0.0\",\r\n *   \"main\": \"./lib/index.js\",\r\n *   \"typings\": \"./lib/index.d.ts\"\r\n * }\r\n * ```\r\n *\r\n * In this example, the `ApiEntryPoint` would represent the TypeScript module for `./lib/index.js`.\r\n *\r\n * @public\r\n */\r\nexport class ApiEntryPoint extends ApiItemContainerMixin(ApiNameMixin(ApiItem)) {\r\n  public constructor(options: IApiEntryPointOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.EntryPoint;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    // No prefix needed, because ApiEntryPoint is the only possible member of an ApiPackage\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * The module path for this entry point, relative to the parent `ApiPackage`.  In the current implementation,\r\n   * this is always the empty string, indicating the default entry point.\r\n   *\r\n   * @remarks\r\n   *\r\n   * API Extractor does not currently support analysis of multiple entry points.  If that feature is implemented\r\n   * in the future, then the `ApiEntryPoint.importPath` will be used to distinguish different entry points,\r\n   * for example: `controls/Button` in `import { Button } from \"example-package/controls/Button\";`.\r\n   *\r\n   * The `ApiEntryPoint.name` property stores the same value as `ApiEntryPoint.importPath`.\r\n   */\r\n  public get importPath(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    if (this.parent instanceof ApiPackage) {\r\n      return DeclarationReference.package(this.parent.name, this.importPath);\r\n    }\r\n\r\n    return DeclarationReference.empty();\r\n  }\r\n}\r\n"]}