{"version":3,"file":"ApiProperty.js","sourceRoot":"","sources":["../../src/model/ApiProperty.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kGAKiE;AAEjE,6DAAkF;AAClF,8DAAoF;AAQpF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAa,WAAY,SAAQ,+BAAc,CAAC,iCAAe,CAAC;IAC9D,YAAmB,OAA4B;QAC7C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,IAAY,EAAE,QAAiB;QAC3D,IAAI,QAAQ,EAAE;YACZ,OAAO,GAAG,IAAI,IAAI,yBAAoB,SAAS,CAAC;SACjD;aAAM;YACL,OAAO,GAAG,IAAI,IAAI,yBAAoB,WAAW,CAAC;SACnD;IACH,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,iCAA4B;IAC9B,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,OAAO,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/D,CAAC;IAED,sBAAsB;IACf,uBAAuB;QAC5B,MAAM,aAAa,GAAc,2CAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,2CAAoB,CAAC,KAAK,EAAE,CAAC;aACjF,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,mBAAoB,CAAC,kBAAmB,EAAE,aAAa,CAAC;aACzF,WAAW,uBAAgB,CAAC;IACjC,CAAC;CACF;AA9BD,kCA8BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DeclarationReference,\r\n  Meaning,\r\n  Navigation,\r\n  Component\r\n} from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiStaticMixin, IApiStaticMixinOptions } from '../mixins/ApiStaticMixin';\r\nimport { ApiPropertyItem, IApiPropertyItemOptions } from '../items/ApiPropertyItem';\r\n\r\n/**\r\n * Constructor options for {@link ApiProperty}.\r\n * @public\r\n */\r\nexport interface IApiPropertyOptions extends IApiPropertyItemOptions, IApiStaticMixinOptions {}\r\n\r\n/**\r\n * Represents a TypeScript property declaration that belongs to an `ApiClass`.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiProperty` represents a TypeScript declaration such as the `width` and `height` members in this example:\r\n *\r\n * ```ts\r\n * export class Widget {\r\n *   public width: number = 100;\r\n *\r\n *   public get height(): number {\r\n *     if (this.isSquashed()) {\r\n *       return 0;\r\n *     } else {\r\n *       return this.clientArea.height;\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Note that member variables are also considered to be properties.\r\n *\r\n * If the property has both a getter function and setter function, they will be represented by a single `ApiProperty`\r\n * and must have a single documentation comment.\r\n *\r\n * Compare with {@link ApiPropertySignature}, which represents a property belonging to an interface.\r\n * For example, a class property can be `static` but an interface property cannot.\r\n *\r\n * @public\r\n */\r\nexport class ApiProperty extends ApiStaticMixin(ApiPropertyItem) {\r\n  public constructor(options: IApiPropertyOptions) {\r\n    super(options);\r\n  }\r\n\r\n  public static getContainerKey(name: string, isStatic: boolean): string {\r\n    if (isStatic) {\r\n      return `${name}|${ApiItemKind.Property}|static`;\r\n    } else {\r\n      return `${name}|${ApiItemKind.Property}|instance`;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Property;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    return ApiProperty.getContainerKey(this.name, this.isStatic);\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    const nameComponent: Component = DeclarationReference.parseComponent(this.name);\r\n    return (this.parent ? this.parent.canonicalReference : DeclarationReference.empty())\r\n      .addNavigationStep(this.isStatic ? Navigation.Exports : Navigation.Members, nameComponent)\r\n      .withMeaning(Meaning.Member);\r\n  }\r\n}\r\n"]}