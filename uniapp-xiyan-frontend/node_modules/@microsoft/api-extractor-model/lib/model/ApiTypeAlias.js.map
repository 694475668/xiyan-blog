{"version":3,"file":"ApiTypeAlias.js","sourceRoot":"","sources":["../../src/model/ApiTypeAlias.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kGAKiE;AAGjE,8DAA0G;AAC1G,qEAA8F;AAC9F,yDAA4E;AAC5E,mFAI6C;AAmB7C;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAa,YAAa,SAAQ,qDAAyB,CACzD,2BAAY,CAAC,uCAAkB,CAAC,iCAAe,CAAC,CAAC,CAClD;IAcC,YAAmB,OAA6B;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/D,CAAC;IAED,gBAAgB;IACT,MAAM,CAAC,iBAAiB,CAC7B,OAAsC,EACtC,OAA4B,EAC5B,UAA6B;QAE7B,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAEtD,OAAO,CAAC,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;IACrD,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,IAAY;QACxC,OAAO,GAAG,IAAI,IAAI,2BAAqB,EAAE,CAAC;IAC5C,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,mCAA6B;IAC/B,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,OAAO,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,gBAAgB;IACT,aAAa,CAAC,UAAsC;QACzD,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAEhC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;IAC1D,CAAC;IAED,sBAAsB;IACf,uBAAuB;QAC5B,MAAM,aAAa,GAAc,2CAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,2CAAoB,CAAC,KAAK,EAAE,CAAC;aACjF,iBAAiB,oBAAqB,aAAa,CAAC;aACpD,WAAW,wBAAmB,CAAC;IACpC,CAAC;CACF;AA7DD,oCA6DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DeclarationReference,\r\n  Meaning,\r\n  Navigation,\r\n  Component\r\n} from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { Excerpt, IExcerptTokenRange } from '../mixins/Excerpt';\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiDeclaredItem, IApiDeclaredItemOptions, IApiDeclaredItemJson } from '../items/ApiDeclaredItem';\r\nimport { ApiReleaseTagMixin, IApiReleaseTagMixinOptions } from '../mixins/ApiReleaseTagMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\nimport {\r\n  ApiTypeParameterListMixin,\r\n  IApiTypeParameterListMixinOptions,\r\n  IApiTypeParameterListMixinJson\r\n} from '../mixins/ApiTypeParameterListMixin';\r\nimport { DeserializerContext } from './DeserializerContext';\r\n\r\n/**\r\n * Constructor options for {@link ApiTypeAlias}.\r\n * @public\r\n */\r\nexport interface IApiTypeAliasOptions\r\n  extends IApiNameMixinOptions,\r\n    IApiReleaseTagMixinOptions,\r\n    IApiDeclaredItemOptions,\r\n    IApiTypeParameterListMixinOptions {\r\n  typeTokenRange: IExcerptTokenRange;\r\n}\r\n\r\nexport interface IApiTypeAliasJson extends IApiDeclaredItemJson, IApiTypeParameterListMixinJson {\r\n  typeTokenRange: IExcerptTokenRange;\r\n}\r\n\r\n/**\r\n * Represents a TypeScript type alias declaration.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiTypeAlias` represents a definition such as one of these examples:\r\n *\r\n * ```ts\r\n * // A union type:\r\n * export type Shape = Square | Triangle | Circle;\r\n *\r\n * // A generic type alias:\r\n * export type BoxedValue<T> = { value: T };\r\n *\r\n * export type BoxedArray<T> = { array: T[] };\r\n *\r\n * // A conditional type alias:\r\n * export type Boxed<T> = T extends any[] ? BoxedArray<T[number]> : BoxedValue<T>;\r\n *\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class ApiTypeAlias extends ApiTypeParameterListMixin(\r\n  ApiNameMixin(ApiReleaseTagMixin(ApiDeclaredItem))\r\n) {\r\n  /**\r\n   * An {@link Excerpt} that describes the type of the alias.\r\n   *\r\n   * @remarks\r\n   * In the example below, the `typeExcerpt` would correspond to the subexpression\r\n   * `T extends any[] ? BoxedArray<T[number]> : BoxedValue<T>;`:\r\n   *\r\n   * ```ts\r\n   * export type Boxed<T> = T extends any[] ? BoxedArray<T[number]> : BoxedValue<T>;\r\n   * ```\r\n   */\r\n  public readonly typeExcerpt: Excerpt;\r\n\r\n  public constructor(options: IApiTypeAliasOptions) {\r\n    super(options);\r\n\r\n    this.typeExcerpt = this.buildExcerpt(options.typeTokenRange);\r\n  }\r\n\r\n  /** @override */\r\n  public static onDeserializeInto(\r\n    options: Partial<IApiTypeAliasOptions>,\r\n    context: DeserializerContext,\r\n    jsonObject: IApiTypeAliasJson\r\n  ): void {\r\n    super.onDeserializeInto(options, context, jsonObject);\r\n\r\n    options.typeTokenRange = jsonObject.typeTokenRange;\r\n  }\r\n\r\n  public static getContainerKey(name: string): string {\r\n    return `${name}|${ApiItemKind.TypeAlias}`;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.TypeAlias;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    return ApiTypeAlias.getContainerKey(this.name);\r\n  }\r\n\r\n  /** @override */\r\n  public serializeInto(jsonObject: Partial<IApiTypeAliasJson>): void {\r\n    super.serializeInto(jsonObject);\r\n\r\n    jsonObject.typeTokenRange = this.typeExcerpt.tokenRange;\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    const nameComponent: Component = DeclarationReference.parseComponent(this.name);\r\n    return (this.parent ? this.parent.canonicalReference : DeclarationReference.empty())\r\n      .addNavigationStep(Navigation.Exports, nameComponent)\r\n      .withMeaning(Meaning.TypeAlias);\r\n  }\r\n}\r\n"]}