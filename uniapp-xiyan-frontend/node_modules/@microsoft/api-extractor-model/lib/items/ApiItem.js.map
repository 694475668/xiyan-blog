{"version":3,"file":"ApiItem.js","sourceRoot":"","sources":["../../src/items/ApiItem.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAK3D,2EAAwE;AAExE,oEAA6D;AAC7D,2EAAwE;AA0CxE,+DAA+D;AAC/D,EAAE;AACW,QAAA,uBAAuB,GAAkB,MAAM,CAAC,2BAA2B,CAAC,CAAC;AAE1F;;;;;;;GAOG;AACH,MAAa,OAAO;IAIlB,YAAmB,OAAwB;QACzC,oEAAoE;IACtE,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,UAAwB,EAAE,OAA4B;QAC9E,yFAAyF;QACzF,iCAAiC;QACjC,MAAM,kBAAkB,GAA2C,OAAO,CAAC,uBAAuB,CAAC,CAAC;QACpG,OAAO,kBAAkB,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAC1E,CAAC;IAED,eAAe;IACR,MAAM,CAAC,iBAAiB,CAC7B,OAAiC,EACjC,OAA4B,EAC5B,UAAwB;QAExB,8BAA8B;IAChC,CAAC;IAED,eAAe;IACR,aAAa,CAAC,UAAiC;QACpD,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;IACrE,CAAC;IAED;;;OAGG;IACH,IAAW,IAAI;QACb,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IACzE,CAAC;IAED;;;;;;;;OAQG;IACH,IAAW,kBAAkB;QAC3B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,IAAI;gBACF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;aAC3D;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,GAAW,IAAI,CAAC,0BAA0B,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;gBAC3E,MAAM,IAAI,iCAAa,CAAC,0CAA0C,IAAI,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;aAC1F;SACF;QACD,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED;;;;;;;;;OASG;IACH,IAAW,YAAY;QACrB,MAAM,IAAI,iCAAa,CAAC,6DAA6D,CAAC,CAAC;IACzF,CAAC;IAED;;;;;;;;OAQG;IACH,IAAW,WAAW;QACpB,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB;gBACE,OAAO,QAAQ,CAAC;YAClB;gBACE,OAAO,eAAe,CAAC;YACzB;gBACE,OAAO,OAAO,CAAC;YACjB;gBACE,OAAO,WAAW,CAAC;YACrB;gBACE,OAAO,SAAS,CAAC;SACpB;QACD,OAAO,OAAO,CAAC,CAAC,gFAAgF;IAClG,CAAC;IAED;;;;;OAKG;IACH,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACH,IAAW,OAAO;QAChB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;;;;;;OASG;IACI,iBAAiB;QACtB,MAAM,MAAM,GAAwB,IAAI,CAAC,OAAO,CAAC;QACjD,IAAI,MAAM,IAAI,6CAAqB,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YACzD,OAAO,MAAM,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;SACjD;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,MAAM,SAAS,GAAc,EAAE,CAAC;QAChC,KAAK,IAAI,OAAO,GAAwB,IAAI,EAAE,OAAO,KAAK,SAAS,EAAE,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE;YAC7F,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACzB;QACD,SAAS,CAAC,OAAO,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;;OAMG;IACI,0BAA0B;QAC/B,MAAM,aAAa,GAAa,EAAE,CAAC;QAEnC,KAAK,IAAI,OAAO,GAAwB,IAAI,EAAE,OAAO,KAAK,SAAS,EAAE,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE;YAC7F,IACE,OAAO,CAAC,IAAI,wBAAsB;gBAClC,OAAO,CAAC,IAAI,4BAAwB;gBACpC,OAAO,CAAC,IAAI,kCAA2B,EACvC;gBACA,MAAM;aACP;YACD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACzB;iBAAM;gBACL,QAAQ,OAAO,CAAC,IAAI,EAAE;oBACpB,yCAA+B;oBAC/B,mDAAoC;oBACpC,qCAA6B;oBAC7B;wBACE,sFAAsF;wBACtF,MAAM;oBACR;wBACE,IAAI,6CAAqB,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;4BAChD,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAC1B;iBACJ;aACF;YACD,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SACzC;QAED,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,oBAAoB;QACzB,KAAK,IAAI,OAAO,GAAwB,IAAI,EAAE,OAAO,KAAK,SAAS,EAAE,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE;YAC7F,IAAI,OAAO,CAAC,IAAI,4BAAwB,EAAE;gBACxC,OAAO,OAAqB,CAAC;aAC9B;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,eAAe;IACR,UAAU;QACf,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;;;OAOG;IACI,CAAC,+BAAuB,CAAC,CAAC,MAA2B;QAC1D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;IACvC,CAAC;IAED;;;OAGG;IACO,uBAAuB;QAC/B,MAAM,IAAI,iCAAa,CAAC,mEAAmE,CAAC,CAAC;IAC/F,CAAC;CACF;AAlOD,0BAkOC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { DeclarationReference } from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { Constructor, PropertiesOf } from '../mixins/Mixin';\r\nimport { ApiPackage } from '../model/ApiPackage';\r\nimport { ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\nimport { InternalError } from '@rushstack/node-core-library';\r\nimport { ApiItemContainerMixin } from '../mixins/ApiItemContainerMixin';\r\n\r\n/**\r\n * The type returned by the {@link ApiItem.kind} property, which can be used to easily distinguish subclasses of\r\n * {@link ApiItem}.\r\n *\r\n * @public\r\n */\r\nexport const enum ApiItemKind {\r\n  CallSignature = 'CallSignature',\r\n  Class = 'Class',\r\n  Constructor = 'Constructor',\r\n  ConstructSignature = 'ConstructSignature',\r\n  EntryPoint = 'EntryPoint',\r\n  Enum = 'Enum',\r\n  EnumMember = 'EnumMember',\r\n  Function = 'Function',\r\n  IndexSignature = 'IndexSignature',\r\n  Interface = 'Interface',\r\n  Method = 'Method',\r\n  MethodSignature = 'MethodSignature',\r\n  Model = 'Model',\r\n  Namespace = 'Namespace',\r\n  Package = 'Package',\r\n  Property = 'Property',\r\n  PropertySignature = 'PropertySignature',\r\n  TypeAlias = 'TypeAlias',\r\n  Variable = 'Variable',\r\n  None = 'None'\r\n}\r\n\r\n/**\r\n * Constructor options for {@link ApiItem}.\r\n * @public\r\n */\r\nexport interface IApiItemOptions {}\r\n\r\nexport interface IApiItemJson {\r\n  kind: ApiItemKind;\r\n  canonicalReference: string;\r\n}\r\n\r\n// PRIVATE - Allows ApiItemContainerMixin to assign the parent.\r\n//\r\nexport const apiItem_onParentChanged: unique symbol = Symbol('ApiItem._onAddToContainer');\r\n\r\n/**\r\n * The abstract base class for all members of an `ApiModel` object.\r\n *\r\n * @remarks\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n * @public\r\n */\r\nexport class ApiItem {\r\n  private _canonicalReference: DeclarationReference | undefined;\r\n  private _parent: ApiItem | undefined;\r\n\r\n  public constructor(options: IApiItemOptions) {\r\n    // (\"options\" is not used here, but part of the inheritance pattern)\r\n  }\r\n\r\n  public static deserialize(jsonObject: IApiItemJson, context: DeserializerContext): ApiItem {\r\n    // The Deserializer class is coupled with a ton of other classes, so  we delay loading it\r\n    // to avoid ES5 circular imports.\r\n    const deserializerModule: typeof import('../model/Deserializer') = require('../model/Deserializer');\r\n    return deserializerModule.Deserializer.deserialize(context, jsonObject);\r\n  }\r\n\r\n  /** @virtual */\r\n  public static onDeserializeInto(\r\n    options: Partial<IApiItemOptions>,\r\n    context: DeserializerContext,\r\n    jsonObject: IApiItemJson\r\n  ): void {\r\n    // (implemented by subclasses)\r\n  }\r\n\r\n  /** @virtual */\r\n  public serializeInto(jsonObject: Partial<IApiItemJson>): void {\r\n    jsonObject.kind = this.kind;\r\n    jsonObject.canonicalReference = this.canonicalReference.toString();\r\n  }\r\n\r\n  /**\r\n   * Identifies the subclass of the `ApiItem` base class.\r\n   * @virtual\r\n   */\r\n  public get kind(): ApiItemKind {\r\n    throw new Error('ApiItem.kind was not implemented by the child class');\r\n  }\r\n\r\n  /**\r\n   * Warning: This API is used internally by API extractor but is not yet ready for general usage.\r\n   *\r\n   * @remarks\r\n   *\r\n   * Returns a `DeclarationReference` object using the experimental new declaration reference notation.\r\n   *\r\n   * @beta\r\n   */\r\n  public get canonicalReference(): DeclarationReference {\r\n    if (!this._canonicalReference) {\r\n      try {\r\n        this._canonicalReference = this.buildCanonicalReference();\r\n      } catch (e) {\r\n        const name: string = this.getScopedNameWithinPackage() || this.displayName;\r\n        throw new InternalError(`Error building canonical reference for ${name}:\\n` + e.message);\r\n      }\r\n    }\r\n    return this._canonicalReference;\r\n  }\r\n\r\n  /**\r\n   * Returns a string key that can be used to efficiently retrieve an `ApiItem` from an `ApiItemContainerMixin`.\r\n   * The key is unique within the container.  Its format is undocumented and may change at any time.\r\n   *\r\n   * @remarks\r\n   * Use the `getContainerKey()` static member to construct the key.  Each subclass has a different implementation\r\n   * of this function, according to the aspects that are important for identifying it.\r\n   *\r\n   * @virtual\r\n   */\r\n  public get containerKey(): string {\r\n    throw new InternalError('ApiItem.containerKey was not implemented by the child class');\r\n  }\r\n\r\n  /**\r\n   * Returns a name for this object that can be used in diagnostic messages, for example.\r\n   *\r\n   * @remarks\r\n   * For an object that inherits ApiNameMixin, this will return the declared name (e.g. the name of a TypeScript\r\n   * function).  Otherwise, it will return a string such as \"(call signature)\" or \"(model)\".\r\n   *\r\n   * @virtual\r\n   */\r\n  public get displayName(): string {\r\n    switch (this.kind) {\r\n      case ApiItemKind.CallSignature:\r\n        return '(call)';\r\n      case ApiItemKind.Constructor:\r\n        return '(constructor)';\r\n      case ApiItemKind.ConstructSignature:\r\n        return '(new)';\r\n      case ApiItemKind.IndexSignature:\r\n        return '(indexer)';\r\n      case ApiItemKind.Model:\r\n        return '(model)';\r\n    }\r\n    return '(???)'; // All other types should inherit ApiNameMixin which will override this property\r\n  }\r\n\r\n  /**\r\n   * If this item was added to a ApiItemContainerMixin item, then this returns the container item.\r\n   * If this is an Parameter that was added to a method or function, then this returns the function item.\r\n   * Otherwise, it returns undefined.\r\n   * @virtual\r\n   */\r\n  public get parent(): ApiItem | undefined {\r\n    return this._parent;\r\n  }\r\n\r\n  /**\r\n   * This property supports a visitor pattern for walking the tree.\r\n   * For items with ApiItemContainerMixin, it returns the contained items, sorted alphabetically.\r\n   * Otherwise it returns an empty array.\r\n   * @virtual\r\n   */\r\n  public get members(): ReadonlyArray<ApiItem> {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * If this item has a name (i.e. extends `ApiNameMixin`), then return all items that have the same parent\r\n   * and the same name.  Otherwise, return all items that have the same parent and the same `ApiItemKind`.\r\n   *\r\n   * @remarks\r\n   * Examples: For a function, this would return all overloads for the function.  For a constructor, this would\r\n   * return all overloads for the constructor.  For a merged declaration (e.g. a `namespace` and `enum` with the\r\n   * same name), this would return both declarations.  If this item does not have a parent, or if it is the only\r\n   * item of its name/kind, then the result is an array containing only this item.\r\n   */\r\n  public getMergedSiblings(): ReadonlyArray<ApiItem> {\r\n    const parent: ApiItem | undefined = this._parent;\r\n    if (parent && ApiItemContainerMixin.isBaseClassOf(parent)) {\r\n      return parent._getMergedSiblingsForMember(this);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Returns the chain of ancestors, starting from the root of the tree, and ending with the this item.\r\n   */\r\n  public getHierarchy(): ReadonlyArray<ApiItem> {\r\n    const hierarchy: ApiItem[] = [];\r\n    for (let current: ApiItem | undefined = this; current !== undefined; current = current.parent) {\r\n      hierarchy.push(current);\r\n    }\r\n    hierarchy.reverse();\r\n    return hierarchy;\r\n  }\r\n\r\n  /**\r\n   * This returns a scoped name such as `\"Namespace1.Namespace2.MyClass.myMember()\"`.  It does not include the\r\n   * package name or entry point.\r\n   *\r\n   * @remarks\r\n   * If called on an ApiEntrypoint, ApiPackage, or ApiModel item, the result is an empty string.\r\n   */\r\n  public getScopedNameWithinPackage(): string {\r\n    const reversedParts: string[] = [];\r\n\r\n    for (let current: ApiItem | undefined = this; current !== undefined; current = current.parent) {\r\n      if (\r\n        current.kind === ApiItemKind.Model ||\r\n        current.kind === ApiItemKind.Package ||\r\n        current.kind === ApiItemKind.EntryPoint\r\n      ) {\r\n        break;\r\n      }\r\n      if (reversedParts.length !== 0) {\r\n        reversedParts.push('.');\r\n      } else {\r\n        switch (current.kind) {\r\n          case ApiItemKind.CallSignature:\r\n          case ApiItemKind.ConstructSignature:\r\n          case ApiItemKind.Constructor:\r\n          case ApiItemKind.IndexSignature:\r\n            // These functional forms don't have a proper name, so we don't append the \"()\" suffix\r\n            break;\r\n          default:\r\n            if (ApiParameterListMixin.isBaseClassOf(current)) {\r\n              reversedParts.push('()');\r\n            }\r\n        }\r\n      }\r\n      reversedParts.push(current.displayName);\r\n    }\r\n\r\n    return reversedParts.reverse().join('');\r\n  }\r\n\r\n  /**\r\n   * If this item is an ApiPackage or has an ApiPackage as one of its parents, then that object is returned.\r\n   * Otherwise undefined is returned.\r\n   */\r\n  public getAssociatedPackage(): ApiPackage | undefined {\r\n    for (let current: ApiItem | undefined = this; current !== undefined; current = current.parent) {\r\n      if (current.kind === ApiItemKind.Package) {\r\n        return current as ApiPackage;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /** @virtual */\r\n  public getSortKey(): string {\r\n    return this.containerKey;\r\n  }\r\n\r\n  /**\r\n   * PRIVATE\r\n   *\r\n   * @privateRemarks\r\n   * Allows ApiItemContainerMixin to assign the parent when the item is added to a container.\r\n   *\r\n   * @internal\r\n   */\r\n  public [apiItem_onParentChanged](parent: ApiItem | undefined): void {\r\n    this._parent = parent;\r\n    this._canonicalReference = undefined;\r\n  }\r\n\r\n  /**\r\n   * Builds the cached object used by the `canonicalReference` property.\r\n   * @virtual\r\n   */\r\n  protected buildCanonicalReference(): DeclarationReference {\r\n    throw new InternalError('ApiItem.canonicalReference was not implemented by the child class');\r\n  }\r\n}\r\n\r\n/**\r\n * This abstraction is used by the mixin pattern.\r\n * It describes a class type that inherits from {@link ApiItem}.\r\n *\r\n * @public\r\n */\r\nexport interface IApiItemConstructor extends Constructor<ApiItem>, PropertiesOf<typeof ApiItem> {}\r\n"]}