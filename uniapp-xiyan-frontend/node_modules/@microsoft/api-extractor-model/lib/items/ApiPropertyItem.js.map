{"version":3,"file":"ApiPropertyItem.js","sourceRoot":"","sources":["../../src/items/ApiPropertyItem.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,8DAA0G;AAC1G,qEAA8F;AAC9F,yDAA4E;AAE5E,iEAAwF;AAkBxF;;;;GAIG;AACH,MAAa,eAAgB,SAAQ,2BAAY,CAAC,uCAAkB,CAAC,mCAAgB,CAAC,iCAAe,CAAC,CAAC,CAAC;IAMtG,YAAmB,OAAgC;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAC/E,CAAC;IAED,gBAAgB;IACT,MAAM,CAAC,iBAAiB,CAC7B,OAAyC,EACzC,OAA4B,EAC5B,UAAgC;QAEhC,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAEtD,OAAO,CAAC,sBAAsB,GAAG,UAAU,CAAC,sBAAsB,CAAC;IACrE,CAAC;IAED;;;;;;;;;OASG;IACH,IAAW,eAAe;QACxB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC;SAC3D;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,gBAAgB;IACT,aAAa,CAAC,UAAyC;QAC5D,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAEhC,UAAU,CAAC,sBAAsB,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;IAC1E,CAAC;CACF;AA9CD,0CA8CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Excerpt, IExcerptTokenRange } from '../mixins/Excerpt';\r\nimport { IApiDeclaredItemOptions, ApiDeclaredItem, IApiDeclaredItemJson } from '../items/ApiDeclaredItem';\r\nimport { ApiReleaseTagMixin, IApiReleaseTagMixinOptions } from '../mixins/ApiReleaseTagMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\nimport { ApiOptionalMixin, IApiOptionalMixinOptions } from '../mixins/ApiOptionalMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiPropertyItem}.\r\n * @public\r\n */\r\nexport interface IApiPropertyItemOptions\r\n  extends IApiNameMixinOptions,\r\n    IApiReleaseTagMixinOptions,\r\n    IApiOptionalMixinOptions,\r\n    IApiDeclaredItemOptions {\r\n  propertyTypeTokenRange: IExcerptTokenRange;\r\n}\r\n\r\nexport interface IApiPropertyItemJson extends IApiDeclaredItemJson {\r\n  propertyTypeTokenRange: IExcerptTokenRange;\r\n}\r\n\r\n/**\r\n * The abstract base class for {@link ApiProperty} and {@link ApiPropertySignature}.\r\n *\r\n * @public\r\n */\r\nexport class ApiPropertyItem extends ApiNameMixin(ApiReleaseTagMixin(ApiOptionalMixin(ApiDeclaredItem))) {\r\n  /**\r\n   * An {@link Excerpt} that describes the type of the property.\r\n   */\r\n  public readonly propertyTypeExcerpt: Excerpt;\r\n\r\n  public constructor(options: IApiPropertyItemOptions) {\r\n    super(options);\r\n\r\n    this.propertyTypeExcerpt = this.buildExcerpt(options.propertyTypeTokenRange);\r\n  }\r\n\r\n  /** @override */\r\n  public static onDeserializeInto(\r\n    options: Partial<IApiPropertyItemOptions>,\r\n    context: DeserializerContext,\r\n    jsonObject: IApiPropertyItemJson\r\n  ): void {\r\n    super.onDeserializeInto(options, context, jsonObject);\r\n\r\n    options.propertyTypeTokenRange = jsonObject.propertyTypeTokenRange;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this property should be documented as an event.\r\n   *\r\n   * @remarks\r\n   * The `@eventProperty` TSDoc modifier can be added to readonly properties to indicate that they return an\r\n   * event object that event handlers can be attached to.  The event-handling API is implementation-defined, but\r\n   * typically the return type would be a class with members such as `addHandler()` and `removeHandler()`.\r\n   * The documentation should display such properties under an \"Events\" heading instead of the\r\n   * usual \"Properties\" heading.\r\n   */\r\n  public get isEventProperty(): boolean {\r\n    if (this.tsdocComment) {\r\n      return this.tsdocComment.modifierTagSet.isEventProperty();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** @override */\r\n  public serializeInto(jsonObject: Partial<IApiPropertyItemJson>): void {\r\n    super.serializeInto(jsonObject);\r\n\r\n    jsonObject.propertyTypeTokenRange = this.propertyTypeExcerpt.tokenRange;\r\n  }\r\n}\r\n"]}