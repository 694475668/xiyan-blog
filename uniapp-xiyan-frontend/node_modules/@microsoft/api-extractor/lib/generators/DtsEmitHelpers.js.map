{"version":3,"file":"DtsEmitHelpers.js","sourceRoot":"","sources":["../../src/generators/DtsEmitHelpers.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,+CAAiC;AAEjC,oEAA6D;AAE7D,qDAAiE;AAIjE;;GAEG;AACH,MAAa,cAAc;IAClB,MAAM,CAAC,UAAU,CACtB,YAA0B,EAC1B,eAAgC,EAChC,SAAoB;QAEpB,MAAM,YAAY,GAAW,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC;QAEvF,QAAQ,SAAS,CAAC,UAAU,EAAE;YAC5B,KAAK,yBAAa,CAAC,aAAa;gBAC9B,IAAI,eAAe,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE;oBACxD,YAAY,CAAC,KAAK,CAAC,GAAG,YAAY,iBAAiB,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;iBACrF;qBAAM;oBACL,YAAY,CAAC,KAAK,CAAC,GAAG,YAAY,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;iBAC/D;gBACD,YAAY,CAAC,SAAS,CAAC,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBAC3D,MAAM;YACR,KAAK,yBAAa,CAAC,WAAW;gBAC5B,IAAI,eAAe,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE;oBACxD,YAAY,CAAC,KAAK,CAAC,GAAG,YAAY,MAAM,SAAS,CAAC,UAAU,OAAO,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;iBACrG;qBAAM;oBACL,YAAY,CAAC,KAAK,CAAC,GAAG,YAAY,MAAM,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;iBACnE;gBACD,YAAY,CAAC,SAAS,CAAC,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBAC3D,MAAM;YACR,KAAK,yBAAa,CAAC,UAAU;gBAC3B,YAAY,CAAC,SAAS,CACpB,GAAG,YAAY,SAAS,eAAe,CAAC,WAAW,UAAU,SAAS,CAAC,UAAU,IAAI,CACtF,CAAC;gBACF,MAAM;YACR,KAAK,yBAAa,CAAC,YAAY;gBAC7B,YAAY,CAAC,SAAS,CACpB,GAAG,YAAY,IAAI,eAAe,CAAC,WAAW,eAAe,SAAS,CAAC,UAAU,KAAK,CACvF,CAAC;gBACF,MAAM;YACR;gBACE,MAAM,IAAI,iCAAa,CAAC,6BAA6B,CAAC,CAAC;SAC1D;IACH,CAAC;IAEM,MAAM,CAAC,eAAe,CAC3B,YAA0B,EAC1B,UAAkB,EAClB,eAAgC;QAEhC,IAAI,UAAU,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE;YAChD,YAAY,CAAC,SAAS,CAAC,kBAAkB,eAAe,CAAC,WAAW,GAAG,CAAC,CAAC;SAC1E;aAAM,IAAI,eAAe,CAAC,WAAW,KAAK,UAAU,EAAE;YACrD,YAAY,CAAC,SAAS,CAAC,YAAY,eAAe,CAAC,WAAW,OAAO,UAAU,IAAI,CAAC,CAAC;SACtF;aAAM;YACL,YAAY,CAAC,SAAS,CAAC,YAAY,UAAU,IAAI,CAAC,CAAC;SACpD;IACH,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,YAA0B,EAAE,SAAoB;QAC5E,IAAI,SAAS,CAAC,+BAA+B,CAAC,MAAM,GAAG,CAAC,EAAE;YACxD,YAAY,CAAC,SAAS,EAAE,CAAC;YACzB,KAAK,MAAM,8BAA8B,IAAI,SAAS,CAAC,+BAA+B,EAAE;gBACtF,YAAY,CAAC,SAAS,CAAC,kBAAkB,8BAA8B,IAAI,CAAC,CAAC;aAC9E;SACF;IACH,CAAC;CACF;AA9DD,wCA8DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { InternalError } from '@rushstack/node-core-library';\r\nimport { CollectorEntity } from '../collector/CollectorEntity';\r\nimport { AstImport, AstImportKind } from '../analyzer/AstImport';\r\nimport { StringWriter } from './StringWriter';\r\nimport { Collector } from '../collector/Collector';\r\n\r\n/**\r\n * Some common code shared between DtsRollupGenerator and ApiReportGenerator.\r\n */\r\nexport class DtsEmitHelpers {\r\n  public static emitImport(\r\n    stringWriter: StringWriter,\r\n    collectorEntity: CollectorEntity,\r\n    astImport: AstImport\r\n  ): void {\r\n    const importPrefix: string = astImport.isTypeOnlyEverywhere ? 'import type' : 'import';\r\n\r\n    switch (astImport.importKind) {\r\n      case AstImportKind.DefaultImport:\r\n        if (collectorEntity.nameForEmit !== astImport.exportName) {\r\n          stringWriter.write(`${importPrefix} { default as ${collectorEntity.nameForEmit} }`);\r\n        } else {\r\n          stringWriter.write(`${importPrefix} ${astImport.exportName}`);\r\n        }\r\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.NamedImport:\r\n        if (collectorEntity.nameForEmit !== astImport.exportName) {\r\n          stringWriter.write(`${importPrefix} { ${astImport.exportName} as ${collectorEntity.nameForEmit} }`);\r\n        } else {\r\n          stringWriter.write(`${importPrefix} { ${astImport.exportName} }`);\r\n        }\r\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.StarImport:\r\n        stringWriter.writeLine(\r\n          `${importPrefix} * as ${collectorEntity.nameForEmit} from '${astImport.modulePath}';`\r\n        );\r\n        break;\r\n      case AstImportKind.EqualsImport:\r\n        stringWriter.writeLine(\r\n          `${importPrefix} ${collectorEntity.nameForEmit} = require('${astImport.modulePath}');`\r\n        );\r\n        break;\r\n      default:\r\n        throw new InternalError('Unimplemented AstImportKind');\r\n    }\r\n  }\r\n\r\n  public static emitNamedExport(\r\n    stringWriter: StringWriter,\r\n    exportName: string,\r\n    collectorEntity: CollectorEntity\r\n  ): void {\r\n    if (exportName === ts.InternalSymbolName.Default) {\r\n      stringWriter.writeLine(`export default ${collectorEntity.nameForEmit};`);\r\n    } else if (collectorEntity.nameForEmit !== exportName) {\r\n      stringWriter.writeLine(`export { ${collectorEntity.nameForEmit} as ${exportName} }`);\r\n    } else {\r\n      stringWriter.writeLine(`export { ${exportName} }`);\r\n    }\r\n  }\r\n\r\n  public static emitStarExports(stringWriter: StringWriter, collector: Collector): void {\r\n    if (collector.starExportedExternalModulePaths.length > 0) {\r\n      stringWriter.writeLine();\r\n      for (const starExportedExternalModulePath of collector.starExportedExternalModulePaths) {\r\n        stringWriter.writeLine(`export * from \"${starExportedExternalModulePath}\";`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}