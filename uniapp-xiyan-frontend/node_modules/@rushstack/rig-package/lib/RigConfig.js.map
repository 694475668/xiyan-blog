{"version":3,"file":"RigConfig.js","sourceRoot":"","sources":["../src/RigConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as nodeResolve from 'resolve';\r\nimport stripJsonComments from 'strip-json-comments';\r\n\r\nimport { Helpers } from './Helpers';\r\n\r\n/**\r\n * Represents the literal contents of the `config/rig.json` file.\r\n *\r\n * @public\r\n */\r\nexport interface IRigConfigJson {\r\n  /**\r\n   * The name of the rig package to use.\r\n   *\r\n   * @remarks\r\n   * The name must be a valid NPM package name, and must end with the `-rig` suffix.\r\n   *\r\n   * Example: `example-rig`\r\n   */\r\n  rigPackageName: string;\r\n\r\n  /**\r\n   * Specify which rig profile to use from the rig package.\r\n   *\r\n   * @remarks\r\n   * The name must consist of lowercase alphanumeric words separated by hyphens, for example `\"sample-profile\"`.\r\n   * If the `\"rigProfile\"` is not specified, then the profile name `\"default\"` will be used.\r\n   *\r\n   * Example: `example-profile`\r\n   */\r\n  rigProfile?: string;\r\n}\r\n\r\ninterface IRigConfigOptions {\r\n  projectFolderPath: string;\r\n\r\n  rigFound: boolean;\r\n  filePath: string;\r\n  rigPackageName: string;\r\n  rigProfile: string;\r\n}\r\n\r\n/**\r\n * Options for {@link RigConfig.loadForProjectFolder}.\r\n *\r\n * @public\r\n */\r\nexport interface ILoadForProjectFolderOptions {\r\n  /**\r\n   * The path to the folder of the project to be analyzed.  This folder should contain a `package.json` file.\r\n   */\r\n  projectFolderPath: string;\r\n\r\n  /**\r\n   * If specified, instead of loading the `config/rig.json` from disk, this object will be substituted instead.\r\n   */\r\n  overrideRigJsonObject?: IRigConfigJson;\r\n}\r\n\r\n/**\r\n * This is the main API for loading the `config/rig.json` file format.\r\n *\r\n * @public\r\n */\r\nexport class RigConfig {\r\n  // For syntax details, see PackageNameParser from @rushstack/node-core-library\r\n  private static readonly _packageNameRegExp: RegExp = /^(@[A-Za-z0-9\\-_\\.]+\\/)?[A-Za-z0-9\\-_\\.]+$/;\r\n\r\n  // Rig package names must have the \"-rig\" suffix.\r\n  // Also silently accept \"-rig-test\" for our build test projects.\r\n  private static readonly _rigNameRegExp: RegExp = /-rig(-test)?$/;\r\n\r\n  // Profiles must be lowercase alphanumeric words separated by hyphens\r\n  private static readonly _profileNameRegExp: RegExp = /^[a-z0-9_\\.]+(\\-[a-z0-9_\\.]+)*$/;\r\n\r\n  /**\r\n   * Returns the absolute path of the `rig.schema.json` JSON schema file for `config/rig.json`,\r\n   * which is bundled with this NPM package.\r\n   *\r\n   * @remarks\r\n   * The `RigConfig` class already performs schema validation when loading `rig.json`; however\r\n   * this schema file may be useful for integration with other validation tools.\r\n   *\r\n   * @public\r\n   */\r\n  public static jsonSchemaPath: string = path.resolve(__dirname, './schemas/rig.schema.json');\r\n  private static _jsonSchemaObject: object | undefined = undefined;\r\n\r\n  /**\r\n   * The project folder path that was passed to {@link RigConfig.loadForProjectFolder},\r\n   * which maybe an absolute or relative path.\r\n   *\r\n   * @remarks\r\n   * Example: `.`\r\n   */\r\n  public readonly projectFolderOriginalPath: string;\r\n\r\n  /**\r\n   * The absolute path for the project folder path that was passed to {@link RigConfig.loadForProjectFolder}.\r\n   *\r\n   * @remarks\r\n   * Example: `/path/to/your-project`\r\n   */\r\n  public readonly projectFolderPath: string;\r\n\r\n  /**\r\n   * Returns `true` if `config/rig.json` was found, or `false` otherwise.\r\n   */\r\n  public readonly rigFound: boolean;\r\n\r\n  /**\r\n   * The full path to the `rig.json` file that was found, or `\"\"` if none was found.\r\n   *\r\n   * @remarks\r\n   * Example: `/path/to/your-project/config/rig.json`\r\n   */\r\n  public readonly filePath: string;\r\n\r\n  /**\r\n   * The `\"rigPackageName\"` field from `rig.json`, or `\"\"` if the file was not found.\r\n   *\r\n   * @remarks\r\n   * The name must be a valid NPM package name, and must end with the `-rig` suffix.\r\n   *\r\n   * Example: `example-rig`\r\n   */\r\n  public readonly rigPackageName: string;\r\n\r\n  /**\r\n   * The `\"rigProfile\"` value that was loaded from `rig.json`, or `\"\"` if the file was not found.\r\n   *\r\n   * @remarks\r\n   * The name must consist of lowercase alphanumeric words separated by hyphens, for example `\"sample-profile\"`.\r\n   * If the `rig.json` file exists, but the `\"rigProfile\"` is not specified, then the profile\r\n   * name will be `\"default\"`.\r\n   *\r\n   * Example: `example-profile`\r\n   */\r\n  public readonly rigProfile: string;\r\n\r\n  /**\r\n   * The relative path to the rig profile specified by `rig.json`, or `\"\"` if the file was not found.\r\n   *\r\n   * @remarks\r\n   * Example: `profiles/example-profile`\r\n   */\r\n  public readonly relativeProfileFolderPath: string;\r\n\r\n  // Example: /path/to/your-project/node_modules/example-rig/\r\n  // If the value is `undefined`, then getResolvedProfileFolder() has not calculated it yet\r\n  private _resolvedRigPackageFolder: string | undefined;\r\n\r\n  // Example: /path/to/your-project/node_modules/example-rig/profiles/example-profile\r\n  // If the value is `undefined`, then getResolvedProfileFolder() has not calculated it yet\r\n  private _resolvedProfileFolder: string | undefined;\r\n\r\n  private constructor(options: IRigConfigOptions) {\r\n    this.projectFolderOriginalPath = options.projectFolderPath;\r\n    this.projectFolderPath = path.resolve(options.projectFolderPath);\r\n\r\n    this.rigFound = options.rigFound;\r\n    this.filePath = options.filePath;\r\n    this.rigPackageName = options.rigPackageName;\r\n    this.rigProfile = options.rigProfile;\r\n\r\n    if (this.rigFound) {\r\n      this.relativeProfileFolderPath = 'profiles/' + this.rigProfile;\r\n    } else {\r\n      this.relativeProfileFolderPath = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The JSON contents of the {@link RigConfig.jsonSchemaPath} file.\r\n   *\r\n   * @remarks\r\n   * The JSON object will be lazily loaded when this property getter is accessed, and the result\r\n   * will be cached.\r\n   * Accessing this property may make a synchronous filesystem call.\r\n   */\r\n  public static get jsonSchemaObject(): object {\r\n    if (RigConfig._jsonSchemaObject === undefined) {\r\n      const jsonSchemaContent: string = fs.readFileSync(RigConfig.jsonSchemaPath).toString();\r\n      RigConfig._jsonSchemaObject = JSON.parse(jsonSchemaContent);\r\n    }\r\n    return RigConfig._jsonSchemaObject!;\r\n  }\r\n\r\n  /**\r\n   * Use this method to load the `config/rig.json` file for a given project.\r\n   *\r\n   * @remarks\r\n   * If the file cannot be found, an empty `RigConfig` object will be returned with {@link RigConfig.rigFound}\r\n   * equal to `false`.\r\n   */\r\n  public static loadForProjectFolder(options: ILoadForProjectFolderOptions): RigConfig {\r\n    const rigConfigFilePath: string = path.join(options.projectFolderPath, 'config/rig.json');\r\n\r\n    let json: IRigConfigJson;\r\n    try {\r\n      if (options.overrideRigJsonObject) {\r\n        json = options.overrideRigJsonObject;\r\n      } else {\r\n        if (!fs.existsSync(rigConfigFilePath)) {\r\n          return new RigConfig({\r\n            projectFolderPath: options.projectFolderPath,\r\n\r\n            rigFound: false,\r\n            filePath: '',\r\n            rigPackageName: '',\r\n            rigProfile: ''\r\n          });\r\n        }\r\n\r\n        const rigConfigFileContent: string = fs.readFileSync(rigConfigFilePath).toString();\r\n        json = JSON.parse(stripJsonComments(rigConfigFileContent));\r\n      }\r\n      RigConfig._validateSchema(json);\r\n    } catch (error) {\r\n      throw new Error(error.message + '\\nError loading config file: ' + rigConfigFilePath);\r\n    }\r\n\r\n    return new RigConfig({\r\n      projectFolderPath: options.projectFolderPath,\r\n\r\n      rigFound: true,\r\n      filePath: rigConfigFilePath,\r\n      rigPackageName: json.rigPackageName,\r\n      rigProfile: json.rigProfile || 'default'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * An async variant of {@link RigConfig.loadForProjectFolder}\r\n   */\r\n  public static async loadForProjectFolderAsync(options: ILoadForProjectFolderOptions): Promise<RigConfig> {\r\n    const rigConfigFilePath: string = path.join(options.projectFolderPath, 'config/rig.json');\r\n\r\n    let json: IRigConfigJson;\r\n    try {\r\n      if (options.overrideRigJsonObject) {\r\n        json = options.overrideRigJsonObject;\r\n      } else {\r\n        if (!(await Helpers.fsExistsAsync(rigConfigFilePath))) {\r\n          return new RigConfig({\r\n            projectFolderPath: options.projectFolderPath,\r\n\r\n            rigFound: false,\r\n            filePath: '',\r\n            rigPackageName: '',\r\n            rigProfile: ''\r\n          });\r\n        }\r\n\r\n        const rigConfigFileContent: string = (await fs.promises.readFile(rigConfigFilePath)).toString();\r\n        json = JSON.parse(stripJsonComments(rigConfigFileContent));\r\n      }\r\n\r\n      RigConfig._validateSchema(json);\r\n    } catch (error) {\r\n      throw new Error(error.message + '\\nError loading config file: ' + rigConfigFilePath);\r\n    }\r\n\r\n    return new RigConfig({\r\n      projectFolderPath: options.projectFolderPath,\r\n\r\n      rigFound: true,\r\n      filePath: rigConfigFilePath,\r\n      rigPackageName: json.rigPackageName,\r\n      rigProfile: json.rigProfile || 'default'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Performs Node.js module resolution to locate the rig package folder, then returns the absolute path\r\n   * of the rig profile folder specified by `rig.json`.\r\n   *\r\n   * @remarks\r\n   * If no `rig.json` file was found, then this method throws an error.  The first time this method\r\n   * is called, the result is cached and will be returned by all subsequent calls.\r\n   *\r\n   * Example: `/path/to/your-project/node_modules/example-rig/profiles/example-profile`\r\n   */\r\n  public getResolvedProfileFolder(): string {\r\n    if (this._resolvedRigPackageFolder === undefined) {\r\n      if (!this.rigFound) {\r\n        throw new Error('Cannot resolve the rig package because no rig was specified for this project');\r\n      }\r\n\r\n      const rigPackageJsonModuleSpecifier: string = `${this.rigPackageName}/package.json`;\r\n      const resolveOptions: nodeResolve.Opts = { basedir: this.projectFolderPath };\r\n      const resolvedRigPackageJsonPath: string = nodeResolve.sync(\r\n        rigPackageJsonModuleSpecifier,\r\n        resolveOptions\r\n      );\r\n\r\n      this._resolvedRigPackageFolder = path.dirname(resolvedRigPackageJsonPath);\r\n    }\r\n\r\n    if (this._resolvedProfileFolder === undefined) {\r\n      this._resolvedProfileFolder = path.join(this._resolvedRigPackageFolder, this.relativeProfileFolderPath);\r\n\r\n      if (!fs.existsSync(this._resolvedProfileFolder)) {\r\n        throw new Error(\r\n          `The rig profile \"${this.rigProfile}\" is not defined` +\r\n            ` by the rig package \"${this.rigPackageName}\"`\r\n        );\r\n      }\r\n    }\r\n\r\n    return this._resolvedProfileFolder;\r\n  }\r\n\r\n  /**\r\n   * An async variant of {@link RigConfig.getResolvedProfileFolder}\r\n   */\r\n  public async getResolvedProfileFolderAsync(): Promise<string> {\r\n    if (this._resolvedRigPackageFolder === undefined) {\r\n      if (!this.rigFound) {\r\n        throw new Error('Cannot resolve the rig package because no rig was specified for this project');\r\n      }\r\n\r\n      const rigPackageJsonModuleSpecifier: string = `${this.rigPackageName}/package.json`;\r\n      const resolveOptions: nodeResolve.Opts = { basedir: this.projectFolderPath };\r\n      const resolvedRigPackageJsonPath: string = await Helpers.nodeResolveAsync(\r\n        rigPackageJsonModuleSpecifier,\r\n        resolveOptions\r\n      );\r\n\r\n      this._resolvedRigPackageFolder = path.dirname(resolvedRigPackageJsonPath);\r\n    }\r\n\r\n    if (this._resolvedProfileFolder === undefined) {\r\n      this._resolvedProfileFolder = path.join(this._resolvedRigPackageFolder, this.relativeProfileFolderPath);\r\n\r\n      if (!(await Helpers.fsExistsAsync(this._resolvedProfileFolder))) {\r\n        throw new Error(\r\n          `The rig profile \"${this.rigProfile}\" is not defined` +\r\n            ` by the rig package \"${this.rigPackageName}\"`\r\n        );\r\n      }\r\n    }\r\n\r\n    return this._resolvedProfileFolder;\r\n  }\r\n\r\n  /**\r\n   * This lookup first checks for the specified relative path under `projectFolderPath`; if it does\r\n   * not exist there, then it checks in the resolved rig profile folder.  If the file is found,\r\n   * its absolute path is returned. Otherwise, `undefined` is returned.\r\n   *\r\n   * @remarks\r\n   * For example, suppose the rig profile is:\r\n   *\r\n   * `/path/to/your-project/node_modules/example-rig/profiles/example-profile`\r\n   *\r\n   * And suppose `configFileRelativePath` is `folder/file.json`. Then the following locations will be checked:\r\n   *\r\n   * `/path/to/your-project/folder/file.json`\r\n   *\r\n   * `/path/to/your-project/node_modules/example-rig/profiles/example-profile/folder/file.json`\r\n   */\r\n  public tryResolveConfigFilePath(configFileRelativePath: string): string | undefined {\r\n    if (!Helpers.isDownwardRelative(configFileRelativePath)) {\r\n      throw new Error('The configFileRelativePath is not a relative path: ' + configFileRelativePath);\r\n    }\r\n\r\n    const localPath: string = path.join(this.projectFolderPath, configFileRelativePath);\r\n    if (fs.existsSync(localPath)) {\r\n      return localPath;\r\n    }\r\n    if (this.rigFound) {\r\n      const riggedPath: string = path.join(this.getResolvedProfileFolder(), configFileRelativePath);\r\n      if (fs.existsSync(riggedPath)) {\r\n        return riggedPath;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * An async variant of {@link RigConfig.tryResolveConfigFilePath}\r\n   */\r\n  public async tryResolveConfigFilePathAsync(configFileRelativePath: string): Promise<string | undefined> {\r\n    if (!Helpers.isDownwardRelative(configFileRelativePath)) {\r\n      throw new Error('The configFileRelativePath is not a relative path: ' + configFileRelativePath);\r\n    }\r\n\r\n    const localPath: string = path.join(this.projectFolderPath, configFileRelativePath);\r\n    if (await Helpers.fsExistsAsync(localPath)) {\r\n      return localPath;\r\n    }\r\n    if (this.rigFound) {\r\n      const riggedPath: string = path.join(\r\n        await this.getResolvedProfileFolderAsync(),\r\n        configFileRelativePath\r\n      );\r\n      if (await Helpers.fsExistsAsync(riggedPath)) {\r\n        return riggedPath;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private static _validateSchema(json: IRigConfigJson): void {\r\n    for (const key of Object.getOwnPropertyNames(json)) {\r\n      switch (key) {\r\n        case '$schema':\r\n        case 'rigPackageName':\r\n        case 'rigProfile':\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported field ${JSON.stringify(key)}`);\r\n      }\r\n    }\r\n    if (!json.rigPackageName) {\r\n      throw new Error('Missing required field \"rigPackageName\"');\r\n    }\r\n\r\n    if (!RigConfig._packageNameRegExp.test(json.rigPackageName)) {\r\n      throw new Error(\r\n        `The \"rigPackageName\" value is not a valid NPM package name: ${JSON.stringify(json.rigPackageName)}`\r\n      );\r\n    }\r\n\r\n    if (!RigConfig._rigNameRegExp.test(json.rigPackageName)) {\r\n      throw new Error(\r\n        `The \"rigPackageName\" value is missing the \"-rig\" suffix: ` + JSON.stringify(json.rigProfile)\r\n      );\r\n    }\r\n\r\n    if (json.rigProfile !== undefined) {\r\n      if (!RigConfig._profileNameRegExp.test(json.rigProfile)) {\r\n        throw new Error(\r\n          `The profile name must consist of lowercase alphanumeric words separated by hyphens: ` +\r\n            JSON.stringify(json.rigProfile)\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}