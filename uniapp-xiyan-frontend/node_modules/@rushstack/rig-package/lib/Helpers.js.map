{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../src/Helpers.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,uCAAyB;AACzB,sDAAkC;AAElC,gEAAgE;AAChE,MAAa,OAAO;IAIX,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAU,EAAE,IAA2B;QAC1E,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAiC,EAAE,MAA8B,EAAE,EAAE;YAC7F,iBAAW,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,KAAmB,EAAE,MAA0B,EAAE,EAAE;gBACxE,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;qBAAM;oBACL,OAAO,CAAC,MAAO,CAAC,CAAC;iBAClB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAiB;QACjD,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAkC,EAAE,EAAE;YAC9D,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,MAAe,EAAE,EAAE;gBAClC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uEAAuE;IAChE,MAAM,CAAC,kBAAkB,CAAC,SAAiB;QAChD,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,uBAAuB;QACvB,IAAI,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACnD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;AAlCH,0BAmCC;AAlCC,uEAAuE;AACxD,+BAAuB,GAAW,0BAA0B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport nodeResolve from 'resolve';\r\n\r\n// These helpers avoid taking dependencies on other NPM packages\r\nexport class Helpers {\r\n  // Based on Path.isDownwardRelative() from @rushstack/node-core-library\r\n  private static _upwardPathSegmentRegex: RegExp = /([\\/\\\\]|^)\\.\\.([\\/\\\\]|$)/;\r\n\r\n  public static async nodeResolveAsync(id: string, opts: nodeResolve.AsyncOpts): Promise<string> {\r\n    return await new Promise((resolve: (result: string) => void, reject: (error: Error) => void) => {\r\n      nodeResolve(id, opts, (error: Error | null, result: string | undefined) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve(result!);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public static async fsExistsAsync(path: fs.PathLike): Promise<boolean> {\r\n    return await new Promise((resolve: (result: boolean) => void) => {\r\n      fs.exists(path, (exists: boolean) => {\r\n        resolve(exists);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Based on Path.isDownwardRelative() from @rushstack/node-core-library\r\n  public static isDownwardRelative(inputPath: string): boolean {\r\n    if (path.isAbsolute(inputPath)) {\r\n      return false;\r\n    }\r\n    // Does it contain \"..\"\r\n    if (Helpers._upwardPathSegmentRegex.test(inputPath)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"]}