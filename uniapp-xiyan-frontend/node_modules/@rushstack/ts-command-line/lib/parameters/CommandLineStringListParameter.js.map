{"version":3,"file":"CommandLineStringListParameter.js","sourceRoot":"","sources":["../../src/parameters/CommandLineStringListParameter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ICommandLineStringListDefinition } from './CommandLineDefinition';\r\nimport { CommandLineParameterWithArgument, CommandLineParameterKind } from './BaseClasses';\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringListParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringListParameter extends CommandLineParameterWithArgument {\r\n  private _values: string[] = [];\r\n\r\n  /** @internal */\r\n  public constructor(definition: ICommandLineStringListDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.StringList;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public _setValue(data: any): void {\r\n    // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (!Array.isArray(data)) {\r\n        this.reportInvalidData(data);\r\n      }\r\n      for (const arrayItem of data) {\r\n        if (typeof arrayItem !== 'string') {\r\n          this.reportInvalidData(data);\r\n        }\r\n      }\r\n      this._values = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined) {\r\n        // NOTE: If the environment variable is defined as an empty string,\r\n        // here we will accept the empty string as our value.  (For number/flag we don't do that.)\r\n\r\n        if (environmentValue.trimLeft()[0] === '[') {\r\n          // Specifying multiple items in an environment variable is a somewhat rare case.  But environment\r\n          // variables are actually a pretty reliable way for a tool to avoid shell escaping problems\r\n          // when spawning another tool.  For this case, we need a reliable way to pass an array of strings\r\n          // that could contain any character.  For example, if we simply used \";\" as the list delimiter,\r\n          // then what to do if a string contains that character?  We'd need to design an escaping mechanism.\r\n          // Since JSON is simple and standard and can escape every possible string, it's a better option\r\n          // than a custom delimiter.\r\n          try {\r\n            const parsedJson: unknown = JSON.parse(environmentValue);\r\n            if (\r\n              !Array.isArray(parsedJson) ||\r\n              !parsedJson.every(\r\n                (x) => typeof x === 'string' || typeof x === 'boolean' || typeof x === 'number'\r\n              )\r\n            ) {\r\n              throw new Error(\r\n                `The ${environmentValue} environment variable value must be a JSON ` +\r\n                  ` array containing only strings, numbers, and booleans.`\r\n              );\r\n            }\r\n            this._values = parsedJson.map((x) => x.toString());\r\n          } catch (ex) {\r\n            throw new Error(\r\n              `The ${environmentValue} environment variable value looks like a JSON array` +\r\n                ` but failed to parse: ` +\r\n                ex.message\r\n            );\r\n          }\r\n        } else {\r\n          // As a shorthand, a single value may be specified without JSON encoding, as long as it does not\r\n          // start with the \"[\" character.\r\n          this._values = [environmentValue];\r\n        }\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    // (No default value for string lists)\r\n\r\n    this._values = [];\r\n  }\r\n\r\n  /**\r\n   * Returns the string arguments for a string list parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The array will be empty if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get values(): ReadonlyArray<string> {\r\n    return this._values;\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.values.length > 0) {\r\n      for (const value of this.values) {\r\n        argList.push(this.longName);\r\n        argList.push(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}