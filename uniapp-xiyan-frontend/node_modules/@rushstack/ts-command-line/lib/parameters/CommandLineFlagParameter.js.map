{"version":3,"file":"CommandLineFlagParameter.js","sourceRoot":"","sources":["../../src/parameters/CommandLineFlagParameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,+CAA+E;AAE/E;;;GAGG;AACH,MAAa,wBAAyB,SAAQ,kCAAoB;IAGhE,gBAAgB;IAChB,YAAmB,UAAsC;QACvD,KAAK,CAAC,UAAU,CAAC,CAAC;QAJZ,WAAM,GAAY,KAAK,CAAC;IAKhC,CAAC;IAED,8CAA8C;IAC9C,IAAW,IAAI;QACb,OAAO,sCAAwB,CAAC,IAAI,CAAC;IACvC,CAAC;IAED;;;OAGG;IACH,8DAA8D;IACvD,SAAS,CAAC,IAAS;QACxB,WAAW;QACX,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YACvC,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;gBAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9B;YAED,yFAAyF;YACzF,uGAAuG;YACvG,qFAAqF;YACrF,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,OAAO;aACR;SACF;QAED,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,EAAE;YAC1C,uCAAuC;YACvC,MAAM,gBAAgB,GAAuB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnF,IAAI,gBAAgB,KAAK,SAAS,IAAI,gBAAgB,KAAK,EAAE,EAAE;gBAC7D,IAAI,gBAAgB,KAAK,GAAG,IAAI,gBAAgB,KAAK,GAAG,EAAE;oBACxD,MAAM,IAAI,KAAK,CACb,kBAAkB,gBAAgB,gCAAgC;wBAChE,IAAI,IAAI,CAAC,mBAAmB,8BAA8B,CAC7D,CAAC;iBACH;gBACD,IAAI,CAAC,MAAM,GAAG,gBAAgB,KAAK,GAAG,CAAC;gBACvC,OAAO;aACR;SACF;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED;;;;;;OAMG;IACH,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,mEAAmE;IAC5D,eAAe,CAAC,OAAiB;QACtC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC7B;IACH,CAAC;CACF;AArED,4DAqEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ICommandLineFlagDefinition } from './CommandLineDefinition';\r\nimport { CommandLineParameter, CommandLineParameterKind } from './BaseClasses';\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineFlagParameter}.\r\n * @public\r\n */\r\nexport class CommandLineFlagParameter extends CommandLineParameter {\r\n  private _value: boolean = false;\r\n\r\n  /** @internal */\r\n  public constructor(definition: ICommandLineFlagDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Flag;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public _setValue(data: any): void {\r\n    // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (typeof data !== 'boolean') {\r\n        this.reportInvalidData(data);\r\n      }\r\n\r\n      // If the flag is omitted, then argparse sets the data to \"false\" instead of \"undefined\".\r\n      // This design prevents a syntax such as \"--flag=false\", probably because argparse prefers \"--no-flag\".\r\n      // If we switch to a new CLI parser, we should try to add support for \"--flag=false\".\r\n      if (data) {\r\n        this._value = data;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined && environmentValue !== '') {\r\n        if (environmentValue !== '0' && environmentValue !== '1') {\r\n          throw new Error(\r\n            `Invalid value \"${environmentValue}\" for the environment variable` +\r\n              ` ${this.environmentVariable}.  Valid choices are 0 or 1.`\r\n          );\r\n        }\r\n        this._value = environmentValue === '1';\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._value = false;\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean indicating whether the parameter was included in the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be false if the command-line has not been parsed yet,\r\n   * or if the flag was not used.\r\n   */\r\n  public get value(): boolean {\r\n    return this._value;\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.value) {\r\n      argList.push(this.longName);\r\n    }\r\n  }\r\n}\r\n"]}