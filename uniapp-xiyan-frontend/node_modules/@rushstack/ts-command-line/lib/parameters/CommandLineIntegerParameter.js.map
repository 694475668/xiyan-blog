{"version":3,"file":"CommandLineIntegerParameter.js","sourceRoot":"","sources":["../../src/parameters/CommandLineIntegerParameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,+CAA2F;AAE3F;;;GAGG;AACH,MAAa,2BAA4B,SAAQ,8CAAgC;IAM/E,gBAAgB;IAChB,YAAmB,UAAyC;QAC1D,KAAK,CAAC,UAAU,CAAC,CAAC;QAJZ,WAAM,GAAuB,SAAS,CAAC;QAK7C,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;QAC5C,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;IAED,8CAA8C;IAC9C,IAAW,IAAI;QACb,OAAO,sCAAwB,CAAC,OAAO,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,8DAA8D;IACvD,SAAS,CAAC,IAAS;QACxB,WAAW;QACX,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YACvC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO;SACR;QAED,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,EAAE;YAC1C,uCAAuC;YACvC,MAAM,gBAAgB,GAAuB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnF,IAAI,gBAAgB,KAAK,SAAS,IAAI,gBAAgB,KAAK,EAAE,EAAE;gBAC7D,MAAM,MAAM,GAAW,QAAQ,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;gBACtD,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBACvD,MAAM,IAAI,KAAK,CACb,kBAAkB,gBAAgB,gCAAgC;wBAChE,IAAI,IAAI,CAAC,mBAAmB,iCAAiC,CAChE,CAAC;iBACH;gBACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,OAAO;aACR;SACF;QAED,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;YAChC,OAAO;SACR;QAED,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,sBAAsB,CAAC,kBAA4B;QACxD,UAAU;QACV,KAAK,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;QACjD,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACnC,kBAAkB,CAAC,IAAI,CAAC,wBAAwB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;SACvE;IACH,CAAC;IAED;;;;;;OAMG;IACH,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,mEAAmE;IAC5D,eAAe,CAAC,OAAiB;QACtC,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;YAC5B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACH,CAAC;CACF;AAvFD,kEAuFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ICommandLineIntegerDefinition } from './CommandLineDefinition';\r\nimport { CommandLineParameterWithArgument, CommandLineParameterKind } from './BaseClasses';\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineIntegerParameter}.\r\n * @public\r\n */\r\nexport class CommandLineIntegerParameter extends CommandLineParameterWithArgument {\r\n  /** {@inheritDoc ICommandLineStringDefinition.defaultValue} */\r\n  public readonly defaultValue: number | undefined;\r\n\r\n  private _value: number | undefined = undefined;\r\n\r\n  /** @internal */\r\n  public constructor(definition: ICommandLineIntegerDefinition) {\r\n    super(definition);\r\n    this.defaultValue = definition.defaultValue;\r\n    this.validateDefaultValue(!!this.defaultValue);\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Integer;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public _setValue(data: any): void {\r\n    // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (typeof data !== 'number') {\r\n        this.reportInvalidData(data);\r\n      }\r\n      this._value = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined && environmentValue !== '') {\r\n        const parsed: number = parseInt(environmentValue, 10);\r\n        if (isNaN(parsed) || environmentValue.indexOf('.') >= 0) {\r\n          throw new Error(\r\n            `Invalid value \"${environmentValue}\" for the environment variable` +\r\n              ` ${this.environmentVariable}.  It must be an integer value.`\r\n          );\r\n        }\r\n        this._value = parsed;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.defaultValue !== undefined) {\r\n      this._value = this.defaultValue;\r\n      return;\r\n    }\r\n\r\n    this._value = undefined;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameter._getSupplementaryNotes}\r\n   * @internal\r\n   */\r\n  public _getSupplementaryNotes(supplementaryNotes: string[]): void {\r\n    // virtual\r\n    super._getSupplementaryNotes(supplementaryNotes);\r\n    if (this.defaultValue !== undefined) {\r\n      supplementaryNotes.push(`The default value is ${this.defaultValue}.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for an integer parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be undefined if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): number | undefined {\r\n    return this._value;\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.value !== undefined) {\r\n      argList.push(this.longName);\r\n      argList.push(this.value.toString());\r\n    }\r\n  }\r\n}\r\n"]}