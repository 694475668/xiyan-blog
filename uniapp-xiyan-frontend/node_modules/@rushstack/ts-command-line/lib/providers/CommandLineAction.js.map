{"version":3,"file":"CommandLineAction.js","sourceRoot":"","sources":["../../src/providers/CommandLineAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,iFAAsG;AA0BtG;;;;;;;;;;;;GAYG;AACH,MAAsB,iBAAkB,SAAQ,2DAA4B;IAe1E,YAAmB,OAAkC;QACnD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACjE,MAAM,IAAI,KAAK,CACb,wBAAwB,OAAO,CAAC,UAAU,KAAK;gBAC7C,2FAA2F,CAC9F,CAAC;SACH;QAED,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAE3C,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,gBAAoC;QACtD,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE;YACjE,IAAI,EAAE,IAAI,CAAC,OAAO;YAClB,WAAW,EAAE,IAAI,CAAC,aAAa;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,IAA4B;QACpD,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACO,kBAAkB;QAC1B,WAAW;QACX,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,qCAAqC;YACrC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;SACrG;QAED,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;;AAzEH,8CAoFC;AAnFC,0BAA0B;AACX,mCAAiB,GAAW,kCAAkC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as argparse from 'argparse';\r\nimport { CommandLineParameterProvider, ICommandLineParserData } from './CommandLineParameterProvider';\r\n\r\n/**\r\n * Options for the CommandLineAction constructor.\r\n * @public\r\n */\r\nexport interface ICommandLineActionOptions {\r\n  /**\r\n   * The name of the action.  For example, if the tool is called \"example\",\r\n   * then the \"build\" action might be invoked as: \"example build -q --some-other-option\"\r\n   */\r\n  actionName: string;\r\n\r\n  /**\r\n   * A quick summary that is shown on the main help page, which is displayed\r\n   * by the command \"example --help\"\r\n   */\r\n  summary: string;\r\n\r\n  /**\r\n   * A detailed description that is shown on the action help page, which is displayed\r\n   * by the command \"example build --help\", e.g. for actionName=\"build\".\r\n   */\r\n  documentation: string;\r\n}\r\n\r\n/**\r\n * Represents a sub-command that is part of the CommandLineParser command line.\r\n * Applications should create subclasses of CommandLineAction corresponding to\r\n * each action that they want to expose.\r\n *\r\n * The action name should be comprised of lower case words separated by hyphens\r\n * or colons. The name should include an English verb (e.g. \"deploy\"). Use a\r\n * hyphen to separate words (e.g. \"upload-docs\"). A group of related commands\r\n * can be prefixed with a colon (e.g. \"docs:generate\", \"docs:deploy\",\r\n * \"docs:serve\", etc).\r\n *\r\n * @public\r\n */\r\nexport abstract class CommandLineAction extends CommandLineParameterProvider {\r\n  // Example: \"do-something\"\r\n  private static _actionNameRegExp: RegExp = /^[a-z][a-z0-9]*([-:][a-z0-9]+)*$/;\r\n\r\n  /** {@inheritDoc ICommandLineActionOptions.actionName} */\r\n  public readonly actionName: string;\r\n\r\n  /** {@inheritDoc ICommandLineActionOptions.summary} */\r\n  public readonly summary: string;\r\n\r\n  /** {@inheritDoc ICommandLineActionOptions.documentation} */\r\n  public readonly documentation: string;\r\n\r\n  private _argumentParser: argparse.ArgumentParser | undefined;\r\n\r\n  public constructor(options: ICommandLineActionOptions) {\r\n    super();\r\n\r\n    if (!CommandLineAction._actionNameRegExp.test(options.actionName)) {\r\n      throw new Error(\r\n        `Invalid action name \"${options.actionName}\". ` +\r\n          `The name must be comprised of lower-case words optionally separated by hyphens or colons.`\r\n      );\r\n    }\r\n\r\n    this.actionName = options.actionName;\r\n    this.summary = options.summary;\r\n    this.documentation = options.documentation;\r\n\r\n    this._argumentParser = undefined;\r\n  }\r\n\r\n  /**\r\n   * This is called internally by CommandLineParser.addAction()\r\n   * @internal\r\n   */\r\n  public _buildParser(actionsSubParser: argparse.SubParser): void {\r\n    this._argumentParser = actionsSubParser.addParser(this.actionName, {\r\n      help: this.summary,\r\n      description: this.documentation\r\n    });\r\n\r\n    this.onDefineParameters();\r\n  }\r\n\r\n  /**\r\n   * This is called internally by CommandLineParser.execute()\r\n   * @internal\r\n   */\r\n  public _processParsedData(data: ICommandLineParserData): void {\r\n    super._processParsedData(data);\r\n  }\r\n\r\n  /**\r\n   * Invoked by CommandLineParser.onExecute().\r\n   * @internal\r\n   */\r\n  public _execute(): Promise<void> {\r\n    return this.onExecute();\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameterProvider._getArgumentParser}\r\n   * @internal\r\n   */\r\n  protected _getArgumentParser(): argparse.ArgumentParser {\r\n    // override\r\n    if (!this._argumentParser) {\r\n      // We will improve this in the future\r\n      throw new Error('The CommandLineAction must be added to a CommandLineParser before it can be used');\r\n    }\r\n\r\n    return this._argumentParser;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameterProvider.onDefineParameters}\r\n   */\r\n  protected abstract onDefineParameters(): void;\r\n\r\n  /**\r\n   * Your subclass should implement this hook to perform the operation.\r\n   */\r\n  protected abstract onExecute(): Promise<void>;\r\n}\r\n"]}