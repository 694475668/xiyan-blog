{"version":3,"file":"IPackageJson.js","sourceRoot":"","sources":["../src/IPackageJson.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * This interface is part of the IPackageJson file format.  It is used for the\r\n * \"dependencies\", \"optionalDependencies\", and \"devDependencies\" fields.\r\n * @public\r\n */\r\nexport interface IPackageJsonDependencyTable {\r\n  /**\r\n   * The key is the name of a dependency.  The value is a Semantic Versioning (SemVer)\r\n   * range specifier.\r\n   */\r\n  [dependencyName: string]: string;\r\n}\r\n\r\n/**\r\n * This interface is part of the IPackageJson file format.  It is used for the\r\n * \"scripts\" field.\r\n * @public\r\n */\r\nexport interface IPackageJsonScriptTable {\r\n  /**\r\n   * The key is the name of the script hook.  The value is the script body which may\r\n   * be a file path or shell script command.\r\n   */\r\n  [scriptName: string]: string;\r\n}\r\n\r\n/**\r\n * An interface for accessing common fields from a package.json file whose version field may be missing.\r\n *\r\n * @remarks\r\n * This interface is the same as {@link IPackageJson}, except that the `version` field is optional.\r\n * According to the {@link https://docs.npmjs.com/files/package.json | NPM documentation}\r\n * and {@link http://wiki.commonjs.org/wiki/Packages/1.0 | CommonJS Packages specification}, the `version` field\r\n * is normally a required field for package.json files.\r\n *\r\n * However, NodeJS relaxes this requirement for its `require()` API.  The\r\n * {@link https://nodejs.org/dist/latest-v10.x/docs/api/modules.html#modules_folders_as_modules\r\n * | \"Folders as Modules\" section} from the NodeJS documentation gives an example of a package.json file\r\n * that has only the `name` and `main` fields.  NodeJS does not consider the `version` field during resolution,\r\n * so it can be omitted.  Some libraries do this.\r\n *\r\n * Use the `INodePackageJson` interface when loading such files.  Use `IPackageJson` for package.json files\r\n * that are installed from an NPM registry, or are otherwise known to have a `version` field.\r\n *\r\n * @public\r\n */\r\nexport interface INodePackageJson {\r\n  /**\r\n   * The name of the package.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * A version number conforming to the Semantic Versioning (SemVer) standard.\r\n   */\r\n  version?: string;\r\n\r\n  /**\r\n   * Indicates whether this package is allowed to be published or not.\r\n   */\r\n  private?: boolean;\r\n\r\n  /**\r\n   * A brief description of the package.\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * The URL of the project's repository.\r\n   */\r\n  repository?: string;\r\n\r\n  /**\r\n   * The URL to the project's web page.\r\n   */\r\n  homepage?: string;\r\n\r\n  /**\r\n   * The name of the license.\r\n   */\r\n  license?: string;\r\n\r\n  /**\r\n   * The path to the module file that will act as the main entry point.\r\n   */\r\n  main?: string;\r\n\r\n  /**\r\n   * The path to the TypeScript *.d.ts file describing the module file\r\n   * that will act as the main entry point.\r\n   */\r\n  types?: string;\r\n\r\n  /**\r\n   * Alias for `types`\r\n   */\r\n  typings?: string;\r\n\r\n  /**\r\n   * The path to the TSDoc metadata file.\r\n   * This is still being standardized: https://github.com/microsoft/tsdoc/issues/7#issuecomment-442271815\r\n   * @beta\r\n   */\r\n  tsdocMetadata?: string;\r\n\r\n  /**\r\n   * The main entry point for the package.\r\n   */\r\n  bin?: string;\r\n\r\n  /**\r\n   * An array of dependencies that must always be installed for this package.\r\n   */\r\n  dependencies?: IPackageJsonDependencyTable;\r\n\r\n  /**\r\n   * An array of optional dependencies that may be installed for this package.\r\n   */\r\n  optionalDependencies?: IPackageJsonDependencyTable;\r\n\r\n  /**\r\n   * An array of dependencies that must only be installed for developers who will\r\n   * build this package.\r\n   */\r\n  devDependencies?: IPackageJsonDependencyTable;\r\n\r\n  /**\r\n   * An array of dependencies that must be installed by a consumer of this package,\r\n   * but which will not be automatically installed by this package.\r\n   */\r\n  peerDependencies?: IPackageJsonDependencyTable;\r\n\r\n  /**\r\n   * A table of script hooks that a package manager or build tool may invoke.\r\n   */\r\n  scripts?: IPackageJsonScriptTable;\r\n}\r\n\r\n/**\r\n * An interface for accessing common fields from a package.json file.\r\n *\r\n * @remarks\r\n * This interface describes a package.json file format whose `name` and `version` field are required.\r\n * In some situations, the `version` field is optional; in that case, use the {@link INodePackageJson}\r\n * interface instead.\r\n *\r\n * More fields may be added to this interface in the future.  For documentation about the package.json file format,\r\n * see the {@link http://wiki.commonjs.org/wiki/Packages/1.0 | CommonJS Packages specification}\r\n * and the {@link https://docs.npmjs.com/files/package.json | NPM manual page}.\r\n *\r\n * @public\r\n */\r\nexport interface IPackageJson extends INodePackageJson {\r\n  // Make the \"version\" field non-optional.\r\n  /** {@inheritDoc INodePackageJson.version} */\r\n  version: string;\r\n}\r\n"]}