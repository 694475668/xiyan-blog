{"version":3,"file":"ProtectableMapView.js","sourceRoot":"","sources":["../src/ProtectableMapView.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D;;;;;;GAMG;AACH,MAAa,kBAAyB,SAAQ,GAAS;IAIrD,YAAmB,KAA2B,EAAE,UAA2C;QACzF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAEM,KAAK;QACV,WAAW;QACX,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvC;QACD,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,GAAM;QAClB,WAAW;QACX,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YAC7B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SAC7C;QACD,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEM,GAAG,CAAC,GAAM,EAAE,KAAQ;QACzB,WAAW;QACX,IAAI,aAAa,GAAM,KAAK,CAAC;QAC7B,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YAC1B,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,aAAa,CAAC,CAAC;SACzE;QACD,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,sBAAsB;IACf,iBAAiB;QACtB,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAED,sBAAsB;IACf,kBAAkB,CAAC,GAAM;QAC9B,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,sBAAsB;IACf,eAAe,CAAC,GAAM,EAAE,KAAQ;QACrC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxB,CAAC;CACF;AAnDD,gDAmDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ProtectableMap, IProtectableMapParameters } from './ProtectableMap';\r\n\r\n/**\r\n * The internal wrapper used by ProtectableMap.  It extends the real `Map<K, V>` base class,\r\n * but hooks the destructive operations (clear/delete/set) to give the owner a chance\r\n * to block them.\r\n *\r\n * NOTE: This is not a public API.\r\n */\r\nexport class ProtectableMapView<K, V> extends Map<K, V> {\r\n  private readonly _owner: ProtectableMap<K, V>;\r\n  private readonly _parameters: IProtectableMapParameters<K, V>;\r\n\r\n  public constructor(owner: ProtectableMap<K, V>, parameters: IProtectableMapParameters<K, V>) {\r\n    super();\r\n\r\n    this._owner = owner;\r\n    this._parameters = parameters;\r\n  }\r\n\r\n  public clear(): void {\r\n    // override\r\n    if (this._parameters.onClear) {\r\n      this._parameters.onClear(this._owner);\r\n    }\r\n    super.clear();\r\n  }\r\n\r\n  public delete(key: K): boolean {\r\n    // override\r\n    if (this._parameters.onDelete) {\r\n      this._parameters.onDelete(this._owner, key);\r\n    }\r\n    return super.delete(key);\r\n  }\r\n\r\n  public set(key: K, value: V): this {\r\n    // override\r\n    let modifiedValue: V = value;\r\n    if (this._parameters.onSet) {\r\n      modifiedValue = this._parameters.onSet(this._owner, key, modifiedValue);\r\n    }\r\n    super.set(key, modifiedValue);\r\n    return this;\r\n  }\r\n\r\n  // INTERNAL USAGE ONLY\r\n  public _clearUnprotected(): void {\r\n    super.clear();\r\n  }\r\n\r\n  // INTERNAL USAGE ONLY\r\n  public _deleteUnprotected(key: K): boolean {\r\n    return super.delete(key);\r\n  }\r\n\r\n  // INTERNAL USAGE ONLY\r\n  public _setUnprotected(key: K, value: V): void {\r\n    super.set(key, value);\r\n  }\r\n}\r\n"]}