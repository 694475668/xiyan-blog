{"version":3,"file":"TypeUuid.js","sourceRoot":"","sources":["../src/TypeUuid.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,mDAAgD;AAEhD,MAAM,wBAAwB,GAAW,MAAM,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;AAEnF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAa,QAAQ;IAGnB;;;;OAIG;IACH,8DAA8D;IACvD,MAAM,CAAC,aAAa,CAAC,WAAgB,EAAE,QAAgB;QAC5D,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SACzE;QAED,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,0EAA0E,QAAQ,GAAG,CAAC,CAAC;SACxG;QAED,8DAA8D;QAC9D,MAAM,oBAAoB,GAAQ,WAAW,CAAC,SAAS,CAAC;QAExD,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,oBAAoB,EAAE,wBAAwB,CAAC,EAAE;YAC9E,MAAM,YAAY,GAAW,oBAAoB,CAAC,wBAAwB,CAAC,CAAC;YAC5E,MAAM,IAAI,6BAAa,CACrB,oCAAoC,WAAW,CAAC,IAAI,IAAI,EAAE,aAAa,QAAQ,EAAE;gBAC/E,oDAAoD,YAAY,EAAE,CACrE,CAAC;SACH;QACD,oBAAoB,CAAC,wBAAwB,CAAC,GAAG,QAAQ,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,YAAY,CAAC,YAAqB,EAAE,QAAgB;QAChE,IAAI,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,IAAI,EAAE;YACvD,OAAO,KAAK,CAAC;SACd;QAED,IAAI,eAAe,GAAO,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAC9D,OAAO,eAAe,KAAK,SAAS,IAAI,eAAe,KAAK,IAAI,EAAE;YAChE,8DAA8D;YAC9D,MAAM,cAAc,GAAY,eAAuB,CAAC,wBAAwB,CAAC,CAAC;YAClF,IAAI,cAAc,KAAK,QAAQ,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACb;YACD,gDAAgD;YAChD,eAAe,GAAG,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;SAC1D;QAED,OAAO,KAAK,CAAC;IACf,CAAC;;AApDH,4BAqDC;AApDgB,oBAAW,GAAW,gEAAgE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { InternalError } from './InternalError';\r\n\r\nconst classPrototypeUuidSymbol: symbol = Symbol.for('TypeUuid.classPrototypeUuid');\r\n\r\n/**\r\n * Provides a version-independent implementation of the JavaScript `instanceof` operator.\r\n *\r\n * @remarks\r\n * The JavaScript `instanceof` operator normally only identifies objects from a particular library instance.\r\n * For example, suppose the NPM package `example-lib` has two published versions 1.2.0 and 1.3.0, and\r\n * it exports a class called `A`.  Suppose some code consumes version `1.3.0` of the library, but it receives\r\n * an object that was constructed using version `1.2.0`.  In this situation `a instanceof A` will return `false`,\r\n * even though `a` is an instance of `A`.  The reason is that there are two prototypes for `A`; one for each\r\n * version.\r\n *\r\n * The `TypeUuid` facility provides a way to make `a instanceof A` return true for both prototypes of `A`,\r\n * by instead using a universally unique identifier (UUID) to detect object instances.\r\n *\r\n * You can use `Symbol.hasInstance` to enable the system `instanceof` operator to recognize type UUID equivalence:\r\n * ```ts\r\n * const uuidWidget: string = '9c340ef0-d29f-4e2e-a09f-42bacc59024b';\r\n * class Widget {\r\n *   public static [Symbol.hasInstance](instance: object): boolean {\r\n *     return TypeUuid.isInstanceOf(instance, uuidWidget);\r\n *   }\r\n * }\r\n * ```\r\n * // Example usage:\r\n * ```ts\r\n * import { Widget as Widget1 } from 'v1-of-library';\r\n * import { Widget as Widget2 } from 'v2-of-library';\r\n * const widget = new Widget2();\r\n * console.log(widget instanceof Widget1); // prints true\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class TypeUuid {\r\n  private static _uuidRegExp: RegExp = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\r\n\r\n  /**\r\n   * Registers a JavaScript class as having a type identified by the specified UUID.\r\n   * @privateRemarks\r\n   * We cannot use a construct signature for `targetClass` because it may be an abstract class.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public static registerClass(targetClass: any, typeUuid: string): void {\r\n    if (typeof targetClass !== 'function') {\r\n      throw new Error('The targetClass parameter must be a JavaScript class');\r\n    }\r\n\r\n    if (!TypeUuid._uuidRegExp.test(typeUuid)) {\r\n      throw new Error(`The type UUID must be specified as lowercase hexadecimal with dashes: \"${typeUuid}\"`);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const targetClassPrototype: any = targetClass.prototype;\r\n\r\n    if (Object.hasOwnProperty.call(targetClassPrototype, classPrototypeUuidSymbol)) {\r\n      const existingUuid: string = targetClassPrototype[classPrototypeUuidSymbol];\r\n      throw new InternalError(\r\n        `Cannot register the target class ${targetClass.name || ''} typeUuid=${typeUuid}` +\r\n          ` because it was already registered with typeUuid=${existingUuid}`\r\n      );\r\n    }\r\n    targetClassPrototype[classPrototypeUuidSymbol] = typeUuid;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `targetObject` is an instance of a JavaScript class that was previously\r\n   * registered using the specified `typeUuid`.  Base classes are also considered.\r\n   */\r\n  public static isInstanceOf(targetObject: unknown, typeUuid: string): boolean {\r\n    if (targetObject === undefined || targetObject === null) {\r\n      return false;\r\n    }\r\n\r\n    let objectPrototype: {} = Object.getPrototypeOf(targetObject);\r\n    while (objectPrototype !== undefined && objectPrototype !== null) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const registeredUuid: string = (objectPrototype as any)[classPrototypeUuidSymbol];\r\n      if (registeredUuid === typeUuid) {\r\n        return true;\r\n      }\r\n      // Walk upwards an examine base class prototypes\r\n      objectPrototype = Object.getPrototypeOf(objectPrototype);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]}