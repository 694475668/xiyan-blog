{"version":3,"file":"Sort.js","sourceRoot":"","sources":["../src/Sort.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { LegacyAdapters } from './LegacyAdapters';\r\n\r\n/**\r\n * Operations for sorting collections.\r\n *\r\n * @remarks\r\n * NOTE: Prior to Node 11.x, the `Array.sort()` algorithm is not guaranteed to be stable.  For maximum\r\n * compatibility, consider using {@link LegacyAdapters.sortStable} instead of `Array.sort()`.\r\n *\r\n * @public\r\n */\r\nexport class Sort {\r\n  /**\r\n   * Compares `x` and `y` using the JavaScript `>` and `<` operators.  This function is suitable for usage as\r\n   * the callback for `array.sort()`.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The JavaScript ordering is generalized so that `undefined` \\< `null` \\< all other values.\r\n   *\r\n   * @returns -1 if `x` is smaller than `y`, 1 if `x` is greater than `y`, or 0 if the values are equal.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * let array: number[] = [3, 6, 2];\r\n   * array.sort(Sort.compareByValue);  // [2, 3, 6]\r\n   * ```\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public static compareByValue(x: any, y: any): number {\r\n    if (x === y) {\r\n      return 0;\r\n    }\r\n\r\n    // Undefined is smaller than anything else\r\n    if (x === undefined) {\r\n      return -1;\r\n    }\r\n    if (y === undefined) {\r\n      return 1;\r\n    }\r\n\r\n    // Null is smaller than anything except undefined\r\n    if (x === null) {\r\n      return -1;\r\n    }\r\n    if (y === null) {\r\n      return 1;\r\n    }\r\n\r\n    // These comparisons always return false if either of the arguments is \"undefined\".\r\n    // These comparisons return nonsense for \"null\" (true for \"null > -1\", but false for \"null < 0\" and \"null > 0\")\r\n    if (x < y) {\r\n      return -1;\r\n    }\r\n    if (x > y) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Sorts the array according to a key which is obtained from the array elements.\r\n   * The result is guaranteed to be a stable sort.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * let array: string[] = [ 'aaa', 'bb', 'c' ];\r\n   * Sort.sortBy(array, x => x.length);  // [ 'c', 'bb', 'aaa' ]\r\n   * ```\r\n   */\r\n  public static sortBy<T>(\r\n    array: T[],\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    keySelector: (element: T) => any,\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    comparer: (x: any, y: any) => number = Sort.compareByValue\r\n  ): void {\r\n    LegacyAdapters.sortStable(array, (x, y) => comparer(keySelector(x), keySelector(y)));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the array is already sorted.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public static isSorted<T>(array: T[], comparer: (x: any, y: any) => number = Sort.compareByValue): boolean {\r\n    let previous: T | undefined = undefined;\r\n    for (const element of array) {\r\n      if (comparer(previous, element) > 0) {\r\n        return false;\r\n      }\r\n      previous = element;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the array is already sorted by the specified key.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * let array: string[] = [ 'a', 'bb', 'ccc' ];\r\n   * Sort.isSortedBy(array, x => x.length); // true\r\n   * ```\r\n   */\r\n  public static isSortedBy<T>(\r\n    array: T[],\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    keySelector: (element: T) => any,\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    comparer: (x: any, y: any) => number = Sort.compareByValue\r\n  ): boolean {\r\n    let previousKey: T | undefined = undefined;\r\n    for (const element of array) {\r\n      const key: T = keySelector(element);\r\n      if (comparer(previousKey, key) > 0) {\r\n        return false;\r\n      }\r\n      previousKey = key;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sorts the entries in a Map object according to the map keys.\r\n   * The result is guaranteed to be a stable sort.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * let map: Map<string, number> = new Map<string, number>();\r\n   * map.set('zebra', 1);\r\n   * map.set('goose', 2);\r\n   * map.set('aardvark', 3);\r\n   * Sort.sortMapKeys(map);\r\n   * console.log(JSON.stringify(Array.from(map.keys()))); // [\"aardvark\",\"goose\",\"zebra\"]\r\n   * ```\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public static sortMapKeys<K, V>(\r\n    map: Map<K, V>,\r\n    keyComparer: (x: K, y: K) => number = Sort.compareByValue\r\n  ): void {\r\n    const pairs: [K, V][] = Array.from(map.entries());\r\n\r\n    // Sorting a map is expensive, so first check whether it's already sorted.\r\n    if (Sort.isSortedBy(pairs, (x) => x[0], keyComparer)) {\r\n      return;\r\n    }\r\n\r\n    Sort.sortBy(pairs, (x) => x[0], keyComparer);\r\n    map.clear();\r\n    for (const pair of pairs) {\r\n      map.set(pair[0], pair[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts the entries in a Set object according to the specified keys.\r\n   * The result is guaranteed to be a stable sort.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * let set: Set<string> = new Set<string>();\r\n   * set.add('aaa');\r\n   * set.add('bb');\r\n   * set.add('c');\r\n   * Sort.sortSetBy(set, x => x.length);\r\n   * console.log(Array.from(set)); // ['c', 'bb', 'aaa']\r\n   * ```\r\n   */\r\n  public static sortSetBy<T>(\r\n    set: Set<T>,\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    keySelector: (element: T) => any,\r\n    keyComparer: (x: T, y: T) => number = Sort.compareByValue\r\n  ): void {\r\n    const array: T[] = Array.from(set);\r\n\r\n    // Sorting a set is expensive, so first check whether it's already sorted.\r\n    if (Sort.isSortedBy(array, keySelector, keyComparer)) {\r\n      return;\r\n    }\r\n\r\n    LegacyAdapters.sortStable(array, (x, y) => keyComparer(keySelector(x), keySelector(y)));\r\n\r\n    set.clear();\r\n    for (const item of array) {\r\n      set.add(item);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts the entries in a Set object.  The result is guaranteed to be a stable sort.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * let set: Set<string> = new Set<string>();\r\n   * set.add('zebra');\r\n   * set.add('goose');\r\n   * set.add('aardvark');\r\n   * Sort.sortSet(set);\r\n   * console.log(Array.from(set)); // ['aardvark', 'goose', 'zebra']\r\n   * ```\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public static sortSet<T>(set: Set<T>, comparer: (x: T, y: T) => number = Sort.compareByValue): void {\r\n    const array: T[] = Array.from(set);\r\n\r\n    // Sorting a set is expensive, so first check whether it's already sorted.\r\n    if (Sort.isSorted(array, comparer)) {\r\n      return;\r\n    }\r\n\r\n    LegacyAdapters.sortStable(array, (x, y) => comparer(x, y));\r\n\r\n    set.clear();\r\n    for (const item of array) {\r\n      set.add(item);\r\n    }\r\n  }\r\n}\r\n"]}