{"version":3,"file":"PrimitiveTypes.js","sourceRoot":"","sources":["../src/PrimitiveTypes.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * A \"branded type\" is a primitive type with a compile-type key that makes it incompatible with other\r\n * aliases for the primitive type.\r\n *\r\n * @remarks\r\n *\r\n * Example usage:\r\n *\r\n * ```ts\r\n * // PhoneNumber is a branded type based on the \"string\" primitive.\r\n * type PhoneNumber = Brand<string, 'PhoneNumber'>;\r\n *\r\n * function createPhoneNumber(input: string): PhoneNumber {\r\n *   if (!/\\d+(\\-\\d+)+/.test(input)) {\r\n *     throw new Error('Invalid phone number: ' + JSON.stringify(input));\r\n *   }\r\n *   return input as PhoneNumber;\r\n * }\r\n *\r\n * const p1: PhoneNumber = createPhoneNumber('123-456-7890');\r\n *\r\n * // PhoneNumber is a string and can be used as one:\r\n * const p2: string = p1;\r\n *\r\n * // But an arbitrary string cannot be implicitly type cast as PhoneNumber.\r\n * // ERROR: Type 'string' is not assignable to type 'PhoneNumber'\r\n * const p3: PhoneNumber = '123-456-7890';\r\n * ```\r\n *\r\n * For more information about this pattern, see {@link\r\n * https://github.com/Microsoft/TypeScript/blob/7b48a182c05ea4dea81bab73ecbbe9e013a79e99/src/compiler/types.ts#L693-L698\r\n * | this comment} explaining the TypeScript compiler's introduction of this pattern, and\r\n * {@link https://spin.atomicobject.com/2018/01/15/typescript-flexible-nominal-typing/ | this article}\r\n * explaining the technique in depth.\r\n *\r\n * @public\r\n */\r\nexport type Brand<T, BrandTag extends string> = T & { __brand: BrandTag };\r\n"]}