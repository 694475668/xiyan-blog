{"version":3,"file":"MapExtensions.js","sourceRoot":"","sources":["../src/MapExtensions.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;;;GAIG;AACH,MAAa,aAAa;IACxB;;;;;;OAMG;IACI,MAAM,CAAC,YAAY,CAAO,SAAoB,EAAE,SAA4B;QACjF,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE;YACtC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;IACH,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,QAAQ,CAAS,GAAwB;QACrD,MAAM,MAAM,GAA8B,EAAE,CAAC;QAC7C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;YACxC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACrB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA5BD,sCA4BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Helper functions for working with the `Map<K, V>` data type.\r\n *\r\n * @public\r\n */\r\nexport class MapExtensions {\r\n  /**\r\n   * Adds all the (key, value) pairs from the source map into the target map.\r\n   * @remarks\r\n   * This function modifies targetMap.  Any existing keys will be overwritten.\r\n   * @param targetMap - The map that entries will be added to\r\n   * @param sourceMap - The map containing the entries to be added\r\n   */\r\n  public static mergeFromMap<K, V>(targetMap: Map<K, V>, sourceMap: ReadonlyMap<K, V>): void {\r\n    for (const pair of sourceMap.entries()) {\r\n      targetMap.set(pair[0], pair[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a string-keyed map to an object.\r\n   * @remarks\r\n   * This function has the same effect as Object.fromEntries(map.entries())\r\n   * in supported versions of Node (\\>= 12.0.0).\r\n   * @param map - The map that the object properties will be sourced from\r\n   */\r\n  public static toObject<TValue>(map: Map<string, TValue>): { [key: string]: TValue } {\r\n    const object: { [key: string]: TValue } = {};\r\n    for (const [key, value] of map.entries()) {\r\n      object[key] = value;\r\n    }\r\n    return object;\r\n  }\r\n}\r\n"]}