{"version":3,"file":"AlreadyReportedError.js","sourceRoot":"","sources":["../src/AlreadyReportedError.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,yCAAsC;AAEtC,MAAM,wBAAwB,GAAW,sCAAsC,CAAC;AAEhF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAa,oBAAqB,SAAQ,KAAK;IAC7C;QACE,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAE5B,sGAAsG;QACtG,+RAA+R;QAC/R,EAAE;QACF,4EAA4E;QAC3E,IAAY,CAAC,SAAS,GAAG,oBAAoB,CAAC,SAAS,CAAC,CAAC,yDAAyD;IACrH,CAAC;IAEM,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAgB;QACjD,OAAO,mBAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;IACnE,CAAC;CACF;AAdD,oDAcC;AAED,mBAAQ,CAAC,aAAa,CAAC,oBAAoB,EAAE,wBAAwB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TypeUuid } from './TypeUuid';\r\n\r\nconst uuidAlreadyReportedError: string = 'f26b0640-a49b-49d1-9ead-1a516d5920c7';\r\n\r\n/**\r\n * This exception can be thrown to indicate that an operation failed and an error message has already\r\n * been reported appropriately. Thus, the catch handler does not have responsibility for reporting\r\n * the error.\r\n *\r\n * @remarks\r\n * For example, suppose a tool writes interactive output to `console.log()`.  When an exception is thrown,\r\n * the `catch` handler will typically provide simplistic reporting such as this:\r\n *\r\n * ```ts\r\n * catch (error) {\r\n *   console.log(\"ERROR: \" + error.message);\r\n * }\r\n * ```\r\n *\r\n * Suppose that the code performing the operation normally prints rich output to the console.  It may be able to\r\n * present an error message more nicely (for example, as part of a table, or structured log format).  Throwing\r\n * `AlreadyReportedError` provides a way to use exception handling to abort the operation, but instruct the `catch`\r\n * handler not to print an error a second time:\r\n *\r\n * ```ts\r\n * catch (error) {\r\n *   if (error instanceof AlreadyReportedError) {\r\n *     return;\r\n *   }\r\n *   console.log(\"ERROR: \" + error.message);\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class AlreadyReportedError extends Error {\r\n  public constructor() {\r\n    super('An error occurred.');\r\n\r\n    // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc\r\n    // [https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work](https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work)\r\n    //\r\n    // Note: the prototype must also be set on any classes which extend this one\r\n    (this as any).__proto__ = AlreadyReportedError.prototype; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  }\r\n\r\n  public static [Symbol.hasInstance](instance: object): boolean {\r\n    return TypeUuid.isInstanceOf(instance, uuidAlreadyReportedError);\r\n  }\r\n}\r\n\r\nTypeUuid.registerClass(AlreadyReportedError, uuidAlreadyReportedError);\r\n"]}