{"version":3,"file":"StringBufferTerminalProvider.js","sourceRoot":"","sources":["../../src/Terminal/StringBufferTerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2DAAkF;AAClF,oDAAiD;AACjD,kCAA+B;AAC/B,6CAA0C;AAe1C;;;;;;GAMG;AACH,MAAa,4BAA4B;IAQvC,YAAmB,gBAAyB,KAAK;QAPzC,oBAAe,GAAkB,IAAI,6BAAa,EAAE,CAAC;QACrD,mBAAc,GAAkB,IAAI,6BAAa,EAAE,CAAC;QACpD,mBAAc,GAAkB,IAAI,6BAAa,EAAE,CAAC;QACpD,iBAAY,GAAkB,IAAI,6BAAa,EAAE,CAAC;QAKxD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAY,EAAE,QAAkC;QAC3D,QAAQ,QAAQ,EAAE;YAChB,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC/B,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,GAAG,CAAC;YAClC,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClC,MAAM;aACP;SACF;IACH,CAAC;IAED;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,OAAoC;QACnD,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,OAAoC;QACpD,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACI,cAAc,CAAC,OAAoC;QACxD,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACI,gBAAgB,CAAC,OAAoC;QAC1D,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IACxE,CAAC;IAEO,gBAAgB,CAAC,CAAS,EAAE,OAA+C;QACjF,OAAO,mBACL,0BAA0B,EAAE,IAAI,IAE7B,CAAC,OAAO,IAAI,EAAE,CAAC,CACnB,CAAC;QAEF,CAAC,GAAG,WAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAExB,IAAI,OAAO,CAAC,0BAA0B,EAAE;YACtC,OAAO,uBAAU,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;SAC/D;aAAM;YACL,OAAO,CAAC,CAAC;SACV;IACH,CAAC;CACF;AAjGD,oEAiGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider, TerminalProviderSeverity } from './ITerminalProvider';\r\nimport { StringBuilder } from '../StringBuilder';\r\nimport { Text } from '../Text';\r\nimport { AnsiEscape } from './AnsiEscape';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IStringBufferOutputOptions {\r\n  /**\r\n   * If set to true, special characters like \\\\n, \\\\r, and the \\\\u001b character\r\n   * in color control tokens will get normalized to [-n-], [-r-], and [-x-] respectively\r\n   *\r\n   * This option defaults to `true`\r\n   */\r\n  normalizeSpecialCharacters: boolean;\r\n}\r\n\r\n/**\r\n * Terminal provider that stores written data in buffers separated by severity.\r\n * This terminal provider is designed to be used when code that prints to a terminal\r\n * is being unit tested.\r\n *\r\n * @beta\r\n */\r\nexport class StringBufferTerminalProvider implements ITerminalProvider {\r\n  private _standardBuffer: StringBuilder = new StringBuilder();\r\n  private _verboseBuffer: StringBuilder = new StringBuilder();\r\n  private _warningBuffer: StringBuilder = new StringBuilder();\r\n  private _errorBuffer: StringBuilder = new StringBuilder();\r\n\r\n  private _supportsColor: boolean;\r\n\r\n  public constructor(supportsColor: boolean = false) {\r\n    this._supportsColor = supportsColor;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.write}\r\n   */\r\n  public write(data: string, severity: TerminalProviderSeverity): void {\r\n    switch (severity) {\r\n      case TerminalProviderSeverity.warning: {\r\n        this._warningBuffer.append(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.error: {\r\n        this._errorBuffer.append(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.verbose: {\r\n        this._verboseBuffer.append(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.log:\r\n      default: {\r\n        this._standardBuffer.append(data);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.eolCharacter}\r\n   */\r\n  public get eolCharacter(): string {\r\n    return '[n]';\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.supportsColor}\r\n   */\r\n  public get supportsColor(): boolean {\r\n    return this._supportsColor;\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at log-level severity.\r\n   */\r\n  public getOutput(options?: IStringBufferOutputOptions): string {\r\n    return this._normalizeOutput(this._standardBuffer.toString(), options);\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at verbose-level severity.\r\n   */\r\n  public getVerbose(options?: IStringBufferOutputOptions): string {\r\n    return this._normalizeOutput(this._verboseBuffer.toString(), options);\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at error-level severity.\r\n   */\r\n  public getErrorOutput(options?: IStringBufferOutputOptions): string {\r\n    return this._normalizeOutput(this._errorBuffer.toString(), options);\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at warning-level severity.\r\n   */\r\n  public getWarningOutput(options?: IStringBufferOutputOptions): string {\r\n    return this._normalizeOutput(this._warningBuffer.toString(), options);\r\n  }\r\n\r\n  private _normalizeOutput(s: string, options: IStringBufferOutputOptions | undefined): string {\r\n    options = {\r\n      normalizeSpecialCharacters: true,\r\n\r\n      ...(options || {})\r\n    };\r\n\r\n    s = Text.convertToLf(s);\r\n\r\n    if (options.normalizeSpecialCharacters) {\r\n      return AnsiEscape.formatForTests(s, { encodeNewlines: true });\r\n    } else {\r\n      return s;\r\n    }\r\n  }\r\n}\r\n"]}