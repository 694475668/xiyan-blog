{"version":3,"file":"AnsiEscape.js","sourceRoot":"","sources":["../../src/Terminal/AnsiEscape.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ConsoleColorCodes } from './Colors';\r\n\r\n/**\r\n * Options for {@link AnsiEscape.formatForTests}.\r\n * @public\r\n */\r\nexport interface IAnsiEscapeConvertForTestsOptions {\r\n  /**\r\n   * If true then `\\n` will be replaced by `[n]`, and `\\r` will be replaced by `[r]`.\r\n   */\r\n  encodeNewlines?: boolean;\r\n}\r\n\r\n/**\r\n * Operations for working with text strings that contain\r\n * {@link https://en.wikipedia.org/wiki/ANSI_escape_code | ANSI escape codes}.\r\n * The most commonly used escape codes set the foreground/background color for console output.\r\n * @public\r\n */\r\nexport class AnsiEscape {\r\n  // For now, we only care about the Control Sequence Introducer (CSI) commands which always start with \"[\".\r\n  // eslint-disable-next-line no-control-regex\r\n  private static readonly _csiRegExp: RegExp = /\\x1b\\[([\\x30-\\x3f]*[\\x20-\\x2f]*[\\x40-\\x7e])/gu;\r\n\r\n  // Text coloring is performed using Select Graphic Rendition (SGR) codes, which come after the\r\n  // CSI introducer \"ESC [\".  The SGR sequence is a number followed by \"m\".\r\n  private static readonly _sgrRegExp: RegExp = /([0-9]+)m/u;\r\n\r\n  private static readonly _backslashNRegExp: RegExp = /\\n/g;\r\n  private static readonly _backslashRRegExp: RegExp = /\\r/g;\r\n\r\n  /**\r\n   * Returns the input text with all ANSI escape codes removed.  For example, this is useful when saving\r\n   * colorized console output to a log file.\r\n   */\r\n  public static removeCodes(text: string): string {\r\n    // eslint-disable-next-line no-control-regex\r\n    return text.replace(AnsiEscape._csiRegExp, '');\r\n  }\r\n\r\n  /**\r\n   * Replaces ANSI escape codes with human-readable tokens.  This is useful for unit tests\r\n   * that compare text strings in test assertions or snapshot files.\r\n   */\r\n  public static formatForTests(text: string, options?: IAnsiEscapeConvertForTestsOptions): string {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    let result: string = text.replace(AnsiEscape._csiRegExp, (capture: string, csiCode: string) => {\r\n      // If it is an SGR code, then try to show a friendly token\r\n      const match: RegExpMatchArray | null = csiCode.match(AnsiEscape._sgrRegExp);\r\n      if (match) {\r\n        const sgrParameter: number = parseInt(match[1]);\r\n        const sgrParameterName: string | undefined = AnsiEscape._tryGetSgrFriendlyName(sgrParameter);\r\n        if (sgrParameterName) {\r\n          // Example: \"[black-bg]\"\r\n          return `[${sgrParameterName}]`;\r\n        }\r\n      }\r\n\r\n      // Otherwise show the raw code, but without the \"[\" from the CSI prefix\r\n      // Example: \"[31m]\"\r\n      return `[${csiCode}]`;\r\n    });\r\n\r\n    if (options.encodeNewlines) {\r\n      result = result\r\n        .replace(AnsiEscape._backslashNRegExp, '[n]')\r\n        .replace(AnsiEscape._backslashRRegExp, `[r]`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Returns a human-readable token representing an SGR parameter, or undefined for parameter that is not well-known.\r\n  // The SGR parameter numbers are documented in this table:\r\n  // https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\r\n  private static _tryGetSgrFriendlyName(sgiParameter: number): string | undefined {\r\n    switch (sgiParameter) {\r\n      case ConsoleColorCodes.BlackForeground:\r\n        return 'black';\r\n      case ConsoleColorCodes.RedForeground:\r\n        return 'red';\r\n      case ConsoleColorCodes.GreenForeground:\r\n        return 'green';\r\n      case ConsoleColorCodes.YellowForeground:\r\n        return 'yellow';\r\n      case ConsoleColorCodes.BlueForeground:\r\n        return 'blue';\r\n      case ConsoleColorCodes.MagentaForeground:\r\n        return 'magenta';\r\n      case ConsoleColorCodes.CyanForeground:\r\n        return 'cyan';\r\n      case ConsoleColorCodes.WhiteForeground:\r\n        return 'white';\r\n      case ConsoleColorCodes.GrayForeground:\r\n        return 'gray';\r\n      case ConsoleColorCodes.DefaultForeground:\r\n        return 'default';\r\n\r\n      case ConsoleColorCodes.BlackBackground:\r\n        return 'black-bg';\r\n      case ConsoleColorCodes.RedBackground:\r\n        return 'red-bg';\r\n      case ConsoleColorCodes.GreenBackground:\r\n        return 'green-bg';\r\n      case ConsoleColorCodes.YellowBackground:\r\n        return 'yellow-bg';\r\n      case ConsoleColorCodes.BlueBackground:\r\n        return 'blue-bg';\r\n      case ConsoleColorCodes.MagentaBackground:\r\n        return 'magenta-bg';\r\n      case ConsoleColorCodes.CyanBackground:\r\n        return 'cyan-bg';\r\n      case ConsoleColorCodes.WhiteBackground:\r\n        return 'white-bg';\r\n      case ConsoleColorCodes.GrayBackground:\r\n        return 'gray-bg';\r\n      case ConsoleColorCodes.DefaultBackground:\r\n        return 'default-bg';\r\n\r\n      case ConsoleColorCodes.Bold:\r\n        return 'bold';\r\n      case ConsoleColorCodes.Dim:\r\n        return 'dim';\r\n      case ConsoleColorCodes.NormalColorOrIntensity:\r\n        return 'normal';\r\n      case ConsoleColorCodes.Underline:\r\n        return 'underline';\r\n      case ConsoleColorCodes.UnderlineOff:\r\n        return 'underline-off';\r\n      case ConsoleColorCodes.Blink:\r\n        return 'blink';\r\n      case ConsoleColorCodes.BlinkOff:\r\n        return 'blink-off';\r\n      case ConsoleColorCodes.InvertColor:\r\n        return 'invert';\r\n      case ConsoleColorCodes.InvertColorOff:\r\n        return 'invert-off';\r\n      case ConsoleColorCodes.Hidden:\r\n        return 'hidden';\r\n      case ConsoleColorCodes.HiddenOff:\r\n        return 'hidden-off';\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n}\r\n"]}