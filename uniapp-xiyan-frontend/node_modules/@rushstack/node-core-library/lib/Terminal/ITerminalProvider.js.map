{"version":3,"file":"ITerminalProvider.js","sourceRoot":"","sources":["../../src/Terminal/ITerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;GAEG;AACH,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,qEAAG,CAAA;IACH,6EAAO,CAAA;IACP,yEAAK,CAAA;IACL,6EAAO,CAAA;AACT,CAAC,EALW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAKnC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * @beta\r\n */\r\nexport enum TerminalProviderSeverity {\r\n  log,\r\n  warning,\r\n  error,\r\n  verbose\r\n}\r\n\r\n/**\r\n * Implement the interface to create a terminal provider. Terminal providers\r\n * can be registered to a {@link Terminal} instance to receive messages.\r\n *\r\n * @beta\r\n */\r\nexport interface ITerminalProvider {\r\n  /**\r\n   * This property should return true only if the terminal provider supports\r\n   * rendering console colors.\r\n   */\r\n  supportsColor: boolean;\r\n\r\n  /**\r\n   * This property should return the newline character the terminal provider\r\n   * expects.\r\n   */\r\n  eolCharacter: string;\r\n\r\n  /**\r\n   * This function gets called on every terminal provider upon every\r\n   * message function call on the terminal instance.\r\n   *\r\n   * @param data - The terminal message.\r\n   * @param severity - The message severity. Terminal providers can\r\n   * route different kinds of messages to different streams and may choose\r\n   * to ignore verbose messages.\r\n   */\r\n  write(data: string, severity: TerminalProviderSeverity): void;\r\n}\r\n"]}