{"version":3,"file":"Colors.js","sourceRoot":"","sources":["../../src/Terminal/Colors.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IColorableSequence {\r\n  text: string;\r\n  isEol?: boolean;\r\n  foregroundColor?: ColorValue;\r\n  backgroundColor?: ColorValue;\r\n  textAttributes?: TextAttribute[];\r\n}\r\n\r\nexport const eolSequence: IColorableSequence = {\r\n  isEol: true\r\n} as IColorableSequence;\r\n\r\n/**\r\n * Colors used with {@link IColorableSequence}.\r\n * @beta\r\n */\r\nexport enum ColorValue {\r\n  Black,\r\n  Red,\r\n  Green,\r\n  Yellow,\r\n  Blue,\r\n  Magenta,\r\n  Cyan,\r\n  White,\r\n  Gray\r\n}\r\n\r\n/**\r\n * Text styles used with {@link IColorableSequence}.\r\n * @beta\r\n */\r\nexport enum TextAttribute {\r\n  Bold,\r\n  Dim,\r\n  Underline,\r\n  Blink,\r\n  InvertColor,\r\n  Hidden\r\n}\r\n\r\nexport enum ConsoleColorCodes {\r\n  BlackForeground = 30,\r\n  RedForeground = 31,\r\n  GreenForeground = 32,\r\n  YellowForeground = 33,\r\n  BlueForeground = 34,\r\n  MagentaForeground = 35,\r\n  CyanForeground = 36,\r\n  WhiteForeground = 37,\r\n  GrayForeground = 90,\r\n  DefaultForeground = 39,\r\n\r\n  BlackBackground = 40,\r\n  RedBackground = 41,\r\n  GreenBackground = 42,\r\n  YellowBackground = 43,\r\n  BlueBackground = 44,\r\n  MagentaBackground = 45,\r\n  CyanBackground = 46,\r\n  WhiteBackground = 47,\r\n  GrayBackground = 100,\r\n  DefaultBackground = 49,\r\n\r\n  Bold = 1,\r\n\r\n  // On Linux, the \"BoldOff\" code instead causes the text to be double-underlined:\r\n  // https://en.wikipedia.org/wiki/Talk:ANSI_escape_code#SGR_21%E2%80%94%60Bold_off%60_not_widely_supported\r\n  // Use \"NormalColorOrIntensity\" instead\r\n  // BoldOff = 21,\r\n\r\n  Dim = 2,\r\n  NormalColorOrIntensity = 22,\r\n  Underline = 4,\r\n  UnderlineOff = 24,\r\n  Blink = 5,\r\n  BlinkOff = 25,\r\n  InvertColor = 7,\r\n  InvertColorOff = 27,\r\n  Hidden = 8,\r\n  HiddenOff = 28\r\n}\r\n\r\n/**\r\n * The static functions on this class are used to produce colored text\r\n * for use with the node-core-library terminal.\r\n *\r\n * @example\r\n * terminal.writeLine(Colors.green('Green Text!'), ' ', Colors.blue('Blue Text!'));\r\n *\r\n * @beta\r\n */\r\nexport class Colors {\r\n  public static black(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Black\r\n    };\r\n  }\r\n\r\n  public static red(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Red\r\n    };\r\n  }\r\n\r\n  public static green(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Green\r\n    };\r\n  }\r\n\r\n  public static yellow(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Yellow\r\n    };\r\n  }\r\n\r\n  public static blue(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Blue\r\n    };\r\n  }\r\n\r\n  public static magenta(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Magenta\r\n    };\r\n  }\r\n\r\n  public static cyan(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Cyan\r\n    };\r\n  }\r\n\r\n  public static white(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.White\r\n    };\r\n  }\r\n\r\n  public static gray(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      foregroundColor: ColorValue.Gray\r\n    };\r\n  }\r\n\r\n  public static blackBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Black\r\n    };\r\n  }\r\n\r\n  public static redBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Red\r\n    };\r\n  }\r\n\r\n  public static greenBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Green\r\n    };\r\n  }\r\n\r\n  public static yellowBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Yellow\r\n    };\r\n  }\r\n\r\n  public static blueBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Blue\r\n    };\r\n  }\r\n\r\n  public static magentaBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Magenta\r\n    };\r\n  }\r\n\r\n  public static cyanBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Cyan\r\n    };\r\n  }\r\n\r\n  public static whiteBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.White\r\n    };\r\n  }\r\n\r\n  public static grayBackground(text: string | IColorableSequence): IColorableSequence {\r\n    return {\r\n      ...Colors._normalizeStringOrColorableSequence(text),\r\n      backgroundColor: ColorValue.Gray\r\n    };\r\n  }\r\n\r\n  public static bold(text: string | IColorableSequence): IColorableSequence {\r\n    return Colors._applyTextAttribute(text, TextAttribute.Bold);\r\n  }\r\n\r\n  public static dim(text: string | IColorableSequence): IColorableSequence {\r\n    return Colors._applyTextAttribute(text, TextAttribute.Dim);\r\n  }\r\n\r\n  public static underline(text: string | IColorableSequence): IColorableSequence {\r\n    return Colors._applyTextAttribute(text, TextAttribute.Underline);\r\n  }\r\n\r\n  public static blink(text: string | IColorableSequence): IColorableSequence {\r\n    return Colors._applyTextAttribute(text, TextAttribute.Blink);\r\n  }\r\n\r\n  public static invertColor(text: string | IColorableSequence): IColorableSequence {\r\n    return Colors._applyTextAttribute(text, TextAttribute.InvertColor);\r\n  }\r\n\r\n  public static hidden(text: string | IColorableSequence): IColorableSequence {\r\n    return Colors._applyTextAttribute(text, TextAttribute.Hidden);\r\n  }\r\n\r\n  /**\r\n   * If called with a string, returns the string wrapped in a {@link IColorableSequence}.\r\n   * If called with a {@link IColorableSequence}, returns the {@link IColorableSequence}.\r\n   *\r\n   * @internal\r\n   */\r\n  public static _normalizeStringOrColorableSequence(value: string | IColorableSequence): IColorableSequence {\r\n    if (typeof value === 'string') {\r\n      return {\r\n        text: value\r\n      };\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private static _applyTextAttribute(\r\n    text: string | IColorableSequence,\r\n    attribute: TextAttribute\r\n  ): IColorableSequence {\r\n    const sequence: IColorableSequence = Colors._normalizeStringOrColorableSequence(text);\r\n    if (!sequence.textAttributes) {\r\n      sequence.textAttributes = [];\r\n    }\r\n\r\n    sequence.textAttributes.push(attribute);\r\n    return sequence;\r\n  }\r\n}\r\n"]}