/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 8.0.22 : Database - xiyandb
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`xiyandb` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `xiyandb`;

/*Table structure for table `t_article` */

DROP TABLE IF EXISTS `t_article`;

CREATE TABLE `t_article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `pic` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章封面',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章名称',
  `tag` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章标签',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章简介',
  `read_count` int NOT NULL DEFAULT '0' COMMENT '文章阅读量',
  `con_count` int NOT NULL DEFAULT '0' COMMENT '文章评论数',
  `star_count` int NOT NULL DEFAULT '0' COMMENT '文章点赞数',
  `state` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '审核是否通过：0待审核 1通过 2 不通过',
  `user_id` int NOT NULL COMMENT '发布人',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章内容  转换html的内容',
  `markdown_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'markdown 未转换html的内容',
  `markdown_type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '0. mavon-editor 1.editor-wang',
  `type` char(2) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章类型',
  `good` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1' COMMENT '好文：0不是 1是',
  `recommend` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1' COMMENT '推荐：0不是 1是',
  `official` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '官方出品：0不是 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=63 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='博客表';

/*Data for the table `t_article` */

insert  into `t_article`(`id`,`pic`,`title`,`tag`,`remark`,`read_count`,`con_count`,`star_count`,`state`,`user_id`,`content`,`markdown_content`,`markdown_type`,`type`,`good`,`recommend`,`official`,`create_time`,`update_time`) values (1,'http://qiniu-picture.xiyanit.cn/FmBq8JeBXCcF0mWm2ZQbahjYxfUy','vue+elementui实现移动端图片手指滑动','Vue,Elementui,','vue+elementui实现移动端图片手指滑动',78,0,0,'1',1,'<h1><a id=\"vue_0\"></a>vue实现移动端图片手指滑动</h1>\n<h2><a id=\"_1\"></a>安装</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">npm install vue-touch@next --save\n</code></div></pre>\n<h2><a id=\"mainjs_5\"></a>main.js中引入：</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> VueTouch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-touch\'</span>\nVue.use(VueTouch, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'v-touch\'</span>})\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-carousel</span> <span class=\"hljs-attr\">:interval</span>=<span class=\"hljs-string\">\"4000\"</span> <span class=\"hljs-attr\">indicator-position</span>=<span class=\"hljs-string\">\"outside\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"840px\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"carousel\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-carousel-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in banners\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"item.url\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">v-touch</span> <span class=\"hljs-attr\">:swipe-options</span>=<span class=\"hljs-string\">\"{direction: \'horizontal\'}\"</span> \n        <span class=\"hljs-attr\">v-on:swipeleft</span>=<span class=\"hljs-string\">\"swiperleft(index)\"</span> \n        <span class=\"hljs-attr\">v-on:swiperight</span>=<span class=\"hljs-string\">\"swiperright(index)\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"wrapper\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu-container\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"menuContainer\"</span>&gt;</span>   \n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-lazy</span>=<span class=\"hljs-string\">\"item.url\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">v-touch</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-carousel-item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-carousel</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\">methods: {\n    <span class=\"hljs-comment\">//设置滑动切换轮播图</span>\n    swiperleft: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{\n      <span class=\"hljs-comment\">//上一页</span>\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.prev();\n      <span class=\"hljs-comment\">//设置幻灯片的索引</span>\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.setActiveItem(index - <span class=\"hljs-number\">1</span>);\n    },\n    <span class=\"hljs-attr\">swiperright</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{\n      <span class=\"hljs-comment\">//下一页</span>\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.next();\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.setActiveItem(index + <span class=\"hljs-number\">1</span>);\n    },\n  },\n\n</code><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"><br></code></p></div></pre>','<h1><a id=\"vue_0\"></a>vue实现移动端图片手指滑动</h1>\n<h2><a id=\"_1\"></a>安装</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">npm install vue-touch@next --save\n</code></div></pre>\n<h2><a id=\"mainjs_5\"></a>main.js中引入：</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> VueTouch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-touch\'</span>\nVue.use(VueTouch, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'v-touch\'</span>})\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-carousel</span> <span class=\"hljs-attr\">:interval</span>=<span class=\"hljs-string\">\"4000\"</span> <span class=\"hljs-attr\">indicator-position</span>=<span class=\"hljs-string\">\"outside\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"840px\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"carousel\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-carousel-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in banners\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"item.url\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">v-touch</span> <span class=\"hljs-attr\">:swipe-options</span>=<span class=\"hljs-string\">\"{direction: \'horizontal\'}\"</span> \n        <span class=\"hljs-attr\">v-on:swipeleft</span>=<span class=\"hljs-string\">\"swiperleft(index)\"</span> \n        <span class=\"hljs-attr\">v-on:swiperight</span>=<span class=\"hljs-string\">\"swiperright(index)\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"wrapper\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu-container\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"menuContainer\"</span>&gt;</span>   \n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-lazy</span>=<span class=\"hljs-string\">\"item.url\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">v-touch</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-carousel-item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-carousel</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\">methods: {\n    <span class=\"hljs-comment\">//设置滑动切换轮播图</span>\n    swiperleft: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{\n      <span class=\"hljs-comment\">//上一页</span>\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.prev();\n      <span class=\"hljs-comment\">//设置幻灯片的索引</span>\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.setActiveItem(index - <span class=\"hljs-number\">1</span>);\n    },\n    <span class=\"hljs-attr\">swiperright</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{\n      <span class=\"hljs-comment\">//下一页</span>\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.next();\n      <span class=\"hljs-keyword\">this</span>.$refs.carousel.setActiveItem(index + <span class=\"hljs-number\">1</span>);\n    },\n  },\n\n</code><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"></code></p><p><code class=\"lang-js\"><br></code></p></div></pre>','1','4','1','1','1','2020-12-25 16:37:58','2020-12-26 11:08:19'),(2,'http://qiniu-picture.xiyanit.cn/FupSeB8XEwdXBr6t_sonPHWPocZg','vue引入粒子特性插件','Vue,','vue引入粒子特性插件',54,0,0,'1',1,'<h5 style=\"line-height: 25px;margin: 15px 0;\"><pre type=\"Bash\"><code>npm <span class=\"hljs-keyword\">install</span> vue-particles</code></pre></h5><h2 id=\"8si8j\">main.js引入</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">import</span> VueParticles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-particles\'</span>\nVue.use(VueParticles)</code></pre><h2 id=\"qrxxu\">App.vue</h2><pre type=\"Html\"><code>&lt;vue-particles\n      color=<span class=\"hljs-string\">\"#00FFFF\"</span>\n      <span class=\"hljs-symbol\">:particleOpacity=<span class=\"hljs-string\">\"1\"</span></span>\n      <span class=\"hljs-symbol\">:particlesNumber=<span class=\"hljs-string\">\"80\"</span></span>\n      shapeType=<span class=\"hljs-string\">\"circle\"</span>\n      <span class=\"hljs-symbol\">:particleSize=<span class=\"hljs-string\">\"5\"</span></span>\n      linesColor=<span class=\"hljs-string\">\"#00FF00\"</span>\n      <span class=\"hljs-symbol\">:linesWidth=<span class=\"hljs-string\">\"1\"</span></span>\n      <span class=\"hljs-symbol\">:lineLinked=<span class=\"hljs-string\">\"true\"</span></span>\n      <span class=\"hljs-symbol\">:lineOpacity=<span class=\"hljs-string\">\"1\"</span></span>\n      <span class=\"hljs-symbol\">:linesDistance=<span class=\"hljs-string\">\"150\"</span></span>\n      <span class=\"hljs-symbol\">:moveSpeed=<span class=\"hljs-string\">\"3\"</span></span>\n      <span class=\"hljs-symbol\">:hoverEffect=<span class=\"hljs-string\">\"true\"</span></span>\n      hoverMode=<span class=\"hljs-string\">\"grab\"</span>\n      <span class=\"hljs-symbol\">:clickEffect=<span class=\"hljs-string\">\"true\"</span></span>\n      clickMode=<span class=\"hljs-string\">\"push\"</span>\n    &gt;\n    &lt;<span class=\"hljs-regexp\">/vue-particles&gt;</span></code></pre><h2 id=\"4f138\">效果</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FruKC1mqlR-TfUzHrHNdA5f5yJsV\" style=\"max-width:100%;\"><br></p>','<h5 style=\"line-height: 25px;margin: 15px 0;\"><pre type=\"Bash\"><code>npm <span class=\"hljs-keyword\">install</span> vue-particles</code></pre></h5><h2 id=\"8si8j\">main.js引入</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">import</span> VueParticles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-particles\'</span>\nVue.use(VueParticles)</code></pre><h2 id=\"qrxxu\">App.vue</h2><pre type=\"Html\"><code>&lt;vue-particles\n      color=<span class=\"hljs-string\">\"#00FFFF\"</span>\n      <span class=\"hljs-symbol\">:particleOpacity=<span class=\"hljs-string\">\"1\"</span></span>\n      <span class=\"hljs-symbol\">:particlesNumber=<span class=\"hljs-string\">\"80\"</span></span>\n      shapeType=<span class=\"hljs-string\">\"circle\"</span>\n      <span class=\"hljs-symbol\">:particleSize=<span class=\"hljs-string\">\"5\"</span></span>\n      linesColor=<span class=\"hljs-string\">\"#00FF00\"</span>\n      <span class=\"hljs-symbol\">:linesWidth=<span class=\"hljs-string\">\"1\"</span></span>\n      <span class=\"hljs-symbol\">:lineLinked=<span class=\"hljs-string\">\"true\"</span></span>\n      <span class=\"hljs-symbol\">:lineOpacity=<span class=\"hljs-string\">\"1\"</span></span>\n      <span class=\"hljs-symbol\">:linesDistance=<span class=\"hljs-string\">\"150\"</span></span>\n      <span class=\"hljs-symbol\">:moveSpeed=<span class=\"hljs-string\">\"3\"</span></span>\n      <span class=\"hljs-symbol\">:hoverEffect=<span class=\"hljs-string\">\"true\"</span></span>\n      hoverMode=<span class=\"hljs-string\">\"grab\"</span>\n      <span class=\"hljs-symbol\">:clickEffect=<span class=\"hljs-string\">\"true\"</span></span>\n      clickMode=<span class=\"hljs-string\">\"push\"</span>\n    &gt;\n    &lt;<span class=\"hljs-regexp\">/vue-particles&gt;</span></code></pre><h2 id=\"4f138\">效果</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FruKC1mqlR-TfUzHrHNdA5f5yJsV\" style=\"max-width:100%;\"><br></p>','1','4','1','1','1','2020-12-25 17:02:43','2020-12-25 17:02:43'),(8,'http://qiniu-picture.xiyanit.cn/FvGkJRbU6IZhEGwhufXDdGCdTaMp','Linux安装Kafka','Kafka,Linux,','Linux安装Kafka',19,0,0,'1',1,'<h1><a id=\"docker_0\"></a>docker安装方式（推荐)</h1>\n<p>运行并安装zookeeper</p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">docker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper\n\n</code></div></pre>\n<p>运行并安装kafka</p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=10.9.44.11:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.9.44.11:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka\n\n</code></div></pre>\n<h1><a id=\"docker_13\"></a>非docker安装方式（不推荐)</h1>\n<h1><a id=\"1kafka_14\"></a>1.下载kafka安装包</h1>\n<h4><a id=\"wget_15\"></a>(未安装wget请先安装)</h4>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">yum -y install wget\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">wget https://mirror.bit.edu.cn/apache/kafka/2.5.0/kafka_2.13-2.5.0.tgz \n</code></div></pre>\n<h1><a id=\"2kafka_22\"></a>2.解压kafka</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">tar -zxvf kafka_2.13-2.5.0.tgz\n</code></div></pre>\n<h1><a id=\"3_26\"></a>3.进入配置目录</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">cd kafka_2.13-2.5.0/config/\n</code></div></pre>\n<h1><a id=\"4serverproperties_30\"></a>4.修改配置文件server.properties，添加下面内容</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim server.properties\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">broker.id=0\nport=9092 #端口号\nhost.name=172.30.0.9 #服务器IP地址，修改为自己的服务器IP\nlog.dirs=/usr/local/logs/kafka #日志存放路径，上面创建的目录\nzookeeper.connect=localhost:2181 #zookeeper地址和端口，单机配置部署，localhost:2181\n</code></div></pre>\n<h1><a id=\"5_42\"></a>5.编写脚本</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim zookeeper_start.sh\n</code></div></pre>\n<h3><a id=\"zookeeper_47\"></a>启动zookeeper</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">/usr/local/kafka_2.13-2.5.0/bin/zookeeper-server-start.sh /usr/local/kafka_2.13-2.5.0/config/zookeeper.properties &amp;\n</code></div></pre>\n<h3><a id=\"kafka_51\"></a>编写kafka启动脚本</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim kafka_start.sh\n</code></div></pre>\n<h3><a id=\"kafaka_55\"></a>启动kafaka</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">/usr/local/kafka_2.13-2.5.0/bin/kafka-server-start.sh /usr/local/kafka_2.13-2.5.0/config/server.properties &amp;\n</code></div></pre>\n<h3><a id=\"zookeeper_59\"></a>编写zookeeper停止脚本</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim zookeeper_stop.sh\n</code></div></pre>\n<h3><a id=\"zookeeper_63\"></a>停止zookeeper</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">/usr/local/kafka_2.13-2.5.0/bin/zookeeper-server-stop.sh /usr/local/kafka_2.13-2.5.0/config/zookeeper.properties &amp;\n</code></div></pre>\n<h3><a id=\"kafka_68\"></a>编写kafka停止脚本</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim kafka_stop.sh\n</code></div></pre>\n<h3><a id=\"kafka_72\"></a>停止kafka</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">/usr/local/kafka_2.13-2.5.0/bin/kafka-server-stop.sh /usr/local/kafka_2.13-2.5.0/config/server.properties &amp;\n</code></div></pre>\n<h3><a id=\"_76\"></a>启动关闭脚本赋予权限</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">chmod 777 kafka_start.sh\nchmod 777 kafka_stop.sh\nchmod 777 zookeeper_start.sh\nchmod 777 zookeeper_stop.sh\n</code></div></pre>\n<h1><a id=\"7zookeeperkafka_84\"></a>7.先启动zookeeper在启动kafka</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">./zookeeper_start.sh---------------------------------------------启动zookeeper\n./kafka_start.sh----------------------------------------------------启动kafka\nps -ef | grep zookeeper------------------------------------------查看zookeeper进程状态\nps -ef | grep kafka-------------------------------------------------查看kafka进程状态\n</code></div></pre>\n<p><mark>若出现kafka.common.InconsistentClusterIdException: The Cluster ID MoJxXReIRgeVz8GaoglyXw doesn’t match stored clusterId Some(t4eUcr1HTVC_VjB6h-vjyA) in meta.properties异常解决方法 意思是集群id跟元数据meta.properties中存储的不一致，导致启动失败。因此去查看meta.properties文件中的元数据信息。这个文件的存储路径是通过/config/server.properties配置文件中的log.dirs属性配置的。所以通过配置文件找到meta.properties，修改里面的cluster.id即可。 将异常信息中的Cluster ID MoJxXReIRgeVz8GaoglyXw写入<br />\n在这里插入图片描述</mark><br />\n<img src=\"http://qiniu-picture.xiyanit.cn/FkT4tqPhLS7YOk0CB4PWH5TDxNGH\" alt=\"image.png\" /></p>\n<h1><a id=\"8_95\"></a>8测试：</h1>\n<p>重新打开一个终端，创建一个主题</p>\n<h3><a id=\"_98\"></a>创建主题</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n</code></div></pre>\n<h3><a id=\"_103\"></a>（查看创建的主题列表）</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">bin/kafka-topics.sh --list --zookeeper localhost:2181\n</code></div></pre>\n<p><img src=\"http://qiniu-picture.xiyanit.cn/FhwcbZVLCG8VmSAg5Hfe9MeD3zs6\" alt=\"image.png\" /></p>\n<h3><a id=\"_109\"></a>启动生产者（发送消息）</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">bin/kafka-console-producer.sh --broker-list 172.19.2.198:9092 --topic test\n</code></div></pre>\n<p><img src=\"http://qiniu-picture.xiyanit.cn/Ftplbiis_1lA6qykrPpOm_re4rLI\" alt=\"image.png\" /></p>\n<h3><a id=\"_115\"></a>重新打开一个终端，启动消费者（接收消息)</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">bin/kafka-console-consumer.sh --bootstrap-server 172.19.2.198:9092 --topic test --from-beginning\n</code></div></pre>\n<p><img src=\"http://qiniu-picture.xiyanit.cn/FsqDHzf9tGKvyOhsOm3F2zwzZimf\" alt=\"image.png\" /></p>\n','# docker安装方式（推荐)\n运行并安装zookeeper\n```shell\ndocker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper\n\n```\n运行并安装kafka\n```shell\ndocker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=10.9.44.11:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.9.44.11:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka\n\n```\n\n\n# 非docker安装方式（不推荐)\n# 1.下载kafka安装包\n#### (未安装wget请先安装)\n```shell\nyum -y install wget\n```\n```shell\nwget https://mirror.bit.edu.cn/apache/kafka/2.5.0/kafka_2.13-2.5.0.tgz \n```\n# 2.解压kafka\n```shell\ntar -zxvf kafka_2.13-2.5.0.tgz\n```\n# 3.进入配置目录\n```shell\ncd kafka_2.13-2.5.0/config/\n```\n# 4.修改配置文件server.properties，添加下面内容\n```shell\nvim server.properties\n```\n```shell\nbroker.id=0\nport=9092 #端口号\nhost.name=172.30.0.9 #服务器IP地址，修改为自己的服务器IP\nlog.dirs=/usr/local/logs/kafka #日志存放路径，上面创建的目录\nzookeeper.connect=localhost:2181 #zookeeper地址和端口，单机配置部署，localhost:2181\n```\n\n# 5.编写脚本\n```shell\nvim zookeeper_start.sh\n```\n\n### 启动zookeeper\n```shell\n/usr/local/kafka_2.13-2.5.0/bin/zookeeper-server-start.sh /usr/local/kafka_2.13-2.5.0/config/zookeeper.properties &\n```\n### 编写kafka启动脚本\n```shell\nvim kafka_start.sh\n```\n### 启动kafaka\n```shell\n/usr/local/kafka_2.13-2.5.0/bin/kafka-server-start.sh /usr/local/kafka_2.13-2.5.0/config/server.properties &\n```\n### 编写zookeeper停止脚本\n```shell\nvim zookeeper_stop.sh\n```\n### 停止zookeeper\n```shell\n/usr/local/kafka_2.13-2.5.0/bin/zookeeper-server-stop.sh /usr/local/kafka_2.13-2.5.0/config/zookeeper.properties &\n```\n\n### 编写kafka停止脚本\n```shell\nvim kafka_stop.sh\n```\n### 停止kafka\n```shell\n/usr/local/kafka_2.13-2.5.0/bin/kafka-server-stop.sh /usr/local/kafka_2.13-2.5.0/config/server.properties &\n```\n### 启动关闭脚本赋予权限\n```shell\nchmod 777 kafka_start.sh\nchmod 777 kafka_stop.sh\nchmod 777 zookeeper_start.sh\nchmod 777 zookeeper_stop.sh\n```\n\n# 7.先启动zookeeper在启动kafka\n```shell\n./zookeeper_start.sh---------------------------------------------启动zookeeper\n./kafka_start.sh----------------------------------------------------启动kafka\nps -ef | grep zookeeper------------------------------------------查看zookeeper进程状态\nps -ef | grep kafka-------------------------------------------------查看kafka进程状态\n```\n\n==若出现kafka.common.InconsistentClusterIdException: The Cluster ID MoJxXReIRgeVz8GaoglyXw doesn\'t match stored clusterId Some(t4eUcr1HTVC_VjB6h-vjyA) in meta.properties异常解决方法 意思是集群id跟元数据meta.properties中存储的不一致，导致启动失败。因此去查看meta.properties文件中的元数据信息。这个文件的存储路径是通过/config/server.properties配置文件中的log.dirs属性配置的。所以通过配置文件找到meta.properties，修改里面的cluster.id即可。 将异常信息中的Cluster ID MoJxXReIRgeVz8GaoglyXw写入\n在这里插入图片描述==\n![image.png](http://qiniu-picture.xiyanit.cn/FkT4tqPhLS7YOk0CB4PWH5TDxNGH)\n# 8测试：\n重新打开一个终端，创建一个主题\n\n### 创建主题\n```shell\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n```\n\n### （查看创建的主题列表）\n```shell\nbin/kafka-topics.sh --list --zookeeper localhost:2181\n```\n![image.png](http://qiniu-picture.xiyanit.cn/FhwcbZVLCG8VmSAg5Hfe9MeD3zs6)\n\n### 启动生产者（发送消息）\n```shell\nbin/kafka-console-producer.sh --broker-list 172.19.2.198:9092 --topic test\n```\n![image.png](http://qiniu-picture.xiyanit.cn/Ftplbiis_1lA6qykrPpOm_re4rLI)\n\n### 重新打开一个终端，启动消费者（接收消息)\n```shell\nbin/kafka-console-consumer.sh --bootstrap-server 172.19.2.198:9092 --topic test --from-beginning\n```\n![image.png](http://qiniu-picture.xiyanit.cn/FsqDHzf9tGKvyOhsOm3F2zwzZimf)','0','8','1','1','1','2021-01-01 11:33:36','2021-01-11 18:48:57'),(10,'http://qiniu-picture.xiyanit.cn/FsrI-P_OdnPK97bazdjP1AmlJo6f','Linux开启虚拟内存','Linux,','Linux开启虚拟内存',36,0,0,'1',1,'<h1><a id=\"_0\"></a>前言</h1>\n<p>因为这个阿里服务器是购买的优惠服务器，所以内存只有2G，项目在运行的时候，占用的内存已经报表，所以有的时候就会出现宕机的情况发生，后面发现可以通过使用增加虚拟内存空间，来增加内存容量。 下面进入正题，讲解下CentOS7下swap分区的创建和删除。</p>\n<h1><a id=\"swap_4\"></a>swap分区的创建</h1>\n<h1><a id=\"1_6\"></a>1、查看磁盘使用情况</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">free -h \n</code></div></pre>\n<p>而Mem就表示购买阿里云时候的内存，我们能够看到只有1.8G，并且已经使用了1.6G。（说着说着，眼泪就流了下来）</p>\n<p>因为我之前增加了交换空间4G，所以Swap会显示4G,并且已经使用了2G了<br />\n<img src=\"http://qiniu-picture.xiyanit.cn/Fu2sUqvXxMcuWzaM04dIqAkQL2m1\" alt=\"image.png\" /></p>\n<h1><a id=\"2Swap_16\"></a>2、添加Swap分区</h1>\n<p>使用dd命令创建名为swapfile 的swap交换文件（文件名和目录任意）:</p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">dd  if=/dev/zero  of=/var/swapfile  bs=1024  count=4194304 \n</code></div></pre>\n<p>dev/zero是Linux的一种特殊字符设备(输入设备)，可以用来创建一个指定长度用于初始化的空文件，如临时交换文件，该设备无穷尽地提供0，可以提供任何你需要的数目。</p>\n<p>bs=1024  ：单位数据块（block）同时读入/输出的块字节大小为1024  个字节即1KB，bs(即block size)。</p>\n<p>count = 4194304 表示的是4G</p>\n<p>具体计算公式为：1KB * 4194304 =1KB *1024(k)<em>1024</em>4 = 4194304 =4G</p>\n<p>如果小伙伴需要调整交换区的大小的话，可以自行设置其他的</p>\n<p>执行完命令后，会进行4G读写操作，所以会有一些卡顿，小伙伴耐心等待</p>\n<h1><a id=\"3swap_35\"></a>3、对交换文件格式化并转换为swap分区</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">mkswap  /var/swapfile\n</code></div></pre>\n<h1><a id=\"4_42\"></a>4、挂载并激活分区</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">swapon   /var/swapfile\n</code></div></pre>\n<p><mark>执行以上命令可能会出现：“不安全的权限 0644，建议使用 0600”类似提示，不要紧张，实际上已经激活了，可以忽略提示，也可以听从系统的建议修改下权限：</mark></p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">chmod -R 0600 /var/swapfile\n</code></div></pre>\n<h1><a id=\"5swap_51\"></a>5、查看新swap分区是否正常添加并激活使用</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">free -h\n</code></div></pre>\n<h1><a id=\"6_fstab__56\"></a>6、修改 fstab 配置，设置开机自动挂载该分区</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">echo  \"/var/swapfile   swap  swap  defaults  0  0\" &gt;&gt;  /etc/fstab\n</code></div></pre>\n<h1><a id=\"7_61\"></a>7、查看是否已经使用了交换内存</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">top\n</code></div></pre>\n<p>我们能够看到，交换空间已经成功被使用<br />\n<img src=\"http://qiniu-picture.xiyanit.cn/FjI7rb3LypzMn6dc6veeLydDwrTt\" alt=\"image.png\" /></p>\n<h3><a id=\"Swap_69\"></a>更改Swap配置</h3>\n<h3><a id=\"50__70\"></a>一般默认的情况，当我们开启交换虚拟内存空间后，默认好像是当内存使用百分50的时候，就会开始使用交换空间，这样就会造成一个情况，就是本身物理内存还没有使用完成， 缺去使用虚拟内存，这样肯定会影响我们的使用效率，那么我们怎么避免这个情况的发生呢？</h3>\n<h3><a id=\"swappinessswappinessSwap0100Swap_72\"></a>答案就是：可以通过swappiness值进行管理，swappiness表示系统对Swap分区的依赖程度，范围是0~100，数值越大，依赖程度越高，也就是越高越会使用Swap分区。</h3>\n<h3><a id=\"Swap__10_50__74\"></a>所以，我们现在并不希望我们的机器过度依赖Swap分区，只有当我们 负载超过某个百分比的时候，才使用交换空间，所以这也决定了，我们这个值并不是非常大，一般设置 10 ~50 左右。</h3>\n<h3><a id=\"SSD_76\"></a>当然如果小伙伴的是SSD的话，那么这个值可以稍微大一些。</h3>\n<h3><a id=\"swappiness_80\"></a>下面我们查看当前的swappiness数值：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">cat /proc/sys/vm/swappiness\n</code></div></pre>\n<h3><a id=\"swappiness10_86\"></a>修改swappiness值，这里以10为例：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">sysctl vm.swappiness=10\n</code></div></pre>\n<h3><a id=\"_92\"></a>设置永久有效，重启系统后生效</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">echo \"vm.swappiness = 10\"  &gt;&gt;  /etc/sysctl.conf\n</code></div></pre>\n<p>我们最后再次通过top命令，能够查看到，交换空间已经被使用了，物理内存也大概占用了百分95左右<br />\n<img src=\"http://qiniu-picture.xiyanit.cn/FkS6ZTclDvO5yq34IEJePn4rBFAz\" alt=\"image.png\" /></p>\n<h2><a id=\"swap_103\"></a>swap分区的删除</h2>\n<h2><a id=\"swap_104\"></a>swap分区的删除，仅用于以后删除分区时候使用，如果你现在是增加虚拟内存，那么可以忽略这一步</h2>\n<h1><a id=\"1swap_106\"></a>1、停止正在使用swap分区</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">swapoff  /var/swapfile\n</code></div></pre>\n<h1><a id=\"2swap_111\"></a>2、删除swap分区文件</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">rm -rf   /var/swapfile\n</code></div></pre>\n<h1><a id=\"3fstab_116\"></a>3、删除或注释掉我们之前在fstab文件里追加的开机自动挂载配置内容</h1>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim    /etc/fstab\n</code></div></pre>\n<p>#把下面内容删除</p>\n<blockquote>\n<p>/var/swapfile   swap  swap  defaults  0  0</p>\n</blockquote>\n','# 前言\n因为这个阿里服务器是购买的优惠服务器，所以内存只有2G，项目在运行的时候，占用的内存已经报表，所以有的时候就会出现宕机的情况发生，后面发现可以通过使用增加虚拟内存空间，来增加内存容量。 下面进入正题，讲解下CentOS7下swap分区的创建和删除。\n\n\n# swap分区的创建\n\n# 1、查看磁盘使用情况\n```shell\nfree -h \n```\n而Mem就表示购买阿里云时候的内存，我们能够看到只有1.8G，并且已经使用了1.6G。（说着说着，眼泪就流了下来）\n\n因为我之前增加了交换空间4G，所以Swap会显示4G,并且已经使用了2G了\n![image.png](http://qiniu-picture.xiyanit.cn/Fu2sUqvXxMcuWzaM04dIqAkQL2m1)\n\n\n# 2、添加Swap分区\n使用dd命令创建名为swapfile 的swap交换文件（文件名和目录任意）:\n\n```shell\ndd  if=/dev/zero  of=/var/swapfile  bs=1024  count=4194304 \n```\n\ndev/zero是Linux的一种特殊字符设备(输入设备)，可以用来创建一个指定长度用于初始化的空文件，如临时交换文件，该设备无穷尽地提供0，可以提供任何你需要的数目。 \n\nbs=1024  ：单位数据块（block）同时读入/输出的块字节大小为1024  个字节即1KB，bs(即block size)。\n\ncount = 4194304 表示的是4G\n\n具体计算公式为：1KB * 4194304 =1KB *1024(k)*1024*4 = 4194304 =4G\n\n如果小伙伴需要调整交换区的大小的话，可以自行设置其他的\n\n执行完命令后，会进行4G读写操作，所以会有一些卡顿，小伙伴耐心等待\n\n# 3、对交换文件格式化并转换为swap分区\n\n ```shell\nmkswap  /var/swapfile\n```\n\n\n# 4、挂载并激活分区\n```shell\nswapon   /var/swapfile\n```\n==执行以上命令可能会出现：“不安全的权限 0644，建议使用 0600”类似提示，不要紧张，实际上已经激活了，可以忽略提示，也可以听从系统的建议修改下权限：==\n ```shell\nchmod -R 0600 /var/swapfile\n```\n\n# 5、查看新swap分区是否正常添加并激活使用\n \n ```shell\nfree -h\n```\n# 6、修改 fstab 配置，设置开机自动挂载该分区\n \n ```shell\necho  \"/var/swapfile   swap  swap  defaults  0  0\" >>  /etc/fstab\n```\n# 7、查看是否已经使用了交换内存\n ```shell\ntop\n```\n我们能够看到，交换空间已经成功被使用\n![image.png](http://qiniu-picture.xiyanit.cn/FjI7rb3LypzMn6dc6veeLydDwrTt)\n\n\n### 更改Swap配置\n### 一般默认的情况，当我们开启交换虚拟内存空间后，默认好像是当内存使用百分50的时候，就会开始使用交换空间，这样就会造成一个情况，就是本身物理内存还没有使用完成， 缺去使用虚拟内存，这样肯定会影响我们的使用效率，那么我们怎么避免这个情况的发生呢？\n\n### 答案就是：可以通过swappiness值进行管理，swappiness表示系统对Swap分区的依赖程度，范围是0~100，数值越大，依赖程度越高，也就是越高越会使用Swap分区。\n\n### 所以，我们现在并不希望我们的机器过度依赖Swap分区，只有当我们 负载超过某个百分比的时候，才使用交换空间，所以这也决定了，我们这个值并不是非常大，一般设置 10 ~50 左右。\n\n### 当然如果小伙伴的是SSD的话，那么这个值可以稍微大一些。\n\n \n\n### 下面我们查看当前的swappiness数值：\n\n  ```shell\ncat /proc/sys/vm/swappiness\n```\n\n### 修改swappiness值，这里以10为例：\n\n  ```shell\nsysctl vm.swappiness=10\n```\n\n### 设置永久有效，重启系统后生效\n \n ```shell\necho \"vm.swappiness = 10\"  >>  /etc/sysctl.conf\n```\n我们最后再次通过top命令，能够查看到，交换空间已经被使用了，物理内存也大概占用了百分95左右\n![image.png](http://qiniu-picture.xiyanit.cn/FkS6ZTclDvO5yq34IEJePn4rBFAz)\n\n\n \n\n## swap分区的删除\n## swap分区的删除，仅用于以后删除分区时候使用，如果你现在是增加虚拟内存，那么可以忽略这一步\n\n# 1、停止正在使用swap分区\n  ```shell\nswapoff  /var/swapfile\n```\n\n# 2、删除swap分区文件\n  ```shell\nrm -rf   /var/swapfile\n```\n\n# 3、删除或注释掉我们之前在fstab文件里追加的开机自动挂载配置内容\n ```shell\nvim    /etc/fstab\n```\n#把下面内容删除\n> /var/swapfile   swap  swap  defaults  0  0','0','8','1','1','1','2021-01-01 11:57:49','2021-01-01 11:57:49'),(11,'http://qiniu-picture.xiyanit.cn/FvgB-q-EQhEc2sRsompSjdCj6iWq','Docker安装Elasticsearch','Docker,Elasticsearch,Linux,','Docker安装Elasticsearch',35,0,0,'1',1,'<h2><br></h2><h1 id=\"arxcw\">1.设置max_map_count不然启动es会启动不起来</h1><h2 id=\"lh5qb\"><a></a></h2><p><font size=\"4\">查看max_map_count的值 <font color=\"#c24f4a\">默认是65530</font></font><br></p><pre type=\"Shell Session\"><code>cat <span class=\"hljs-regexp\">/proc/</span>sys<span class=\"hljs-regexp\">/vm/m</span>ax_map_count</code></pre><p><font size=\"4\">重新设置max_map_count的值</font><br></p><pre type=\"Shell Session\"><code>sysctl -w vm.<span class=\"hljs-attribute\">max_map_count</span>=262144</code></pre><h1 id=\"d7bqv\">2.下载镜像并运行</h1><div></div><pre type=\"Shell Session\"><code>#拉取镜像\ndocker pull elasticsearch:<span class=\"hljs-number\">7.7</span><span class=\"hljs-number\">.0</span>\n\n#启动镜像\ndocker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class=\"hljs-string\">\"-Xms512m -Xmx512m\"</span></code><code> -e <span class=\"hljs-string\">\"discovery.type=single-node\"</span> -p <span class=\"hljs-number\">9200</span>:<span class=\"hljs-number\">9200</span> -p <span class=\"hljs-number\">9300</span>:<span class=\"hljs-number\">9300</span> elasticsearch:<span class=\"hljs-number\">7.7</span><span class=\"hljs-number\">.0</span></code></pre><p><font size=\"4\">参数说明<br></font></p><pre type=\"Shell Session\"><code><span class=\"hljs-deletion\">--name表示镜像启动后的容器名称 </span>\n\n<span class=\"hljs-deletion\">-d: 后台运行容器，并返回容器ID；</span>\n\n<span class=\"hljs-deletion\">-e: 指定容器内的环境变量</span>\n\n<span class=\"hljs-deletion\">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span></code></pre><h1 id=\"zzy9m\">3.浏览器访问ip:9200 如果出现以下界面就是安装成功</h1><p><img src=\"https://img-blog.csdnimg.cn/20201223190232693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"![在这里插入图片描述](https://img-blog.csdnimg.cn/20201223171312149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\"><br></p><h1 id=\"2c8dw\">4.安装elasticsearch-head</h1><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#拉取镜像</span>\ndocker pull mobz/elasticsearch-head:5\n\n<span class=\"hljs-comment\">#创建容器</span>\ndocker <span class=\"hljs-keyword\">create</span> <span class=\"hljs-comment\">--name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span>\n\n<span class=\"hljs-comment\">#启动容器</span>\ndocker <span class=\"hljs-keyword\">start</span> elasticsearch-<span class=\"hljs-keyword\">head</span>\n<span class=\"hljs-keyword\">or</span>\ndocker <span class=\"hljs-keyword\">start</span> 容器<span class=\"hljs-keyword\">id</span> （docker ps -a 查看容器<span class=\"hljs-keyword\">id</span> ）</code></pre><h1 id=\"4djwh\">5.浏览器打开: http://IP:9100</h1><img src=\"https://img-blog.csdnimg.cn/20201223171452568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br><font size=\"5\" color=\"#c24f4a\">尝试连接easticsearch会发现无法连接上，由于是前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置。<br>解决办法</font><br><h1 id=\"749el\">6.修改docker中elasticsearch的elasticsearch.yml文件</h1><pre type=\"Shell Session\"><code>docker exec -<span class=\"hljs-keyword\">it</span> elasticsearch /bin/bash （进不去使用容器<span class=\"hljs-built_in\">id</span>进入）</code><code><br></code><code>vi config/elasticsearch.yml</code></pre><p><font size=\"4\">在最下面添加2行</font><br><br></p><pre type=\"Shell Session\"><code>http<span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.enabled</span>: true \nhttp<span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.allow-origin</span>: <span class=\"hljs-string\">\"*\"</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201223171735464.png\" alt=\"在这里插入图片描述\"><br><br>退出并重启服务<br></p><pre type=\"Shell Session\"><code><span class=\"hljs-keyword\">exit</span>\ndocker restart 容器id</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201223171815168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"vqjy7\">7.ElasticSearch-head 操作时不修改配置，默认会报 406错误码</h1><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#复制vendor.js到外部</span>\ndocker cp fa85a4c478bf:<span class=\"hljs-regexp\">/usr/</span>src<span class=\"hljs-regexp\">/app/</span>_site<span class=\"hljs-regexp\">/vendor.js /u</span>sr<span class=\"hljs-regexp\">/local/</span>\n\n<span class=\"hljs-comment\">#修改vendor.js</span>\nvim vendor.js</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201224103442628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">修改完成在复制回容器</font><br><br></p><pre type=\"Bash\"><code>docker cp <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/vendor.js fa85a4c478bf:/u</span>sr<span class=\"hljs-regexp\">/src/</span>app<span class=\"hljs-regexp\">/_site</span></code></pre><p><br></p><p><font size=\"4\">重启elasticsearch-head</font><br><br></p><pre type=\"Shell Session\"><code>docker restart 容器<span class=\"hljs-built_in\">id</span></code></pre><p><br></p><p><br>最好就可以查询到es数据了<br><img src=\"https://img-blog.csdnimg.cn/20201224103651968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br></p><h1 id=\"mzf4u\">8.安装ik分词器</h1><font size=\"4\">这里采用离线安装<br><br>下载分词器压缩包<br>下载地址：<br></font><a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip\" target=\"_blank\"><font size=\"4\">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip</font></a><font size=\"4\"><br>将IK分词器上传到/tmp目录中（xftp）<br><br>将分词器安装进容器中</font><br><pre type=\"Shell Session\"><code><span class=\"hljs-meta\">#将压缩包移动到容器中</span>\ndocker cp <span class=\"hljs-meta-keyword\">/tmp/</span>elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip elasticsearch:<span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins\n\n<span class=\"hljs-meta\">#进入容器</span>\ndocker exec -it elasticsearch <span class=\"hljs-meta-keyword\">/bin/</span>bash \n\n<span class=\"hljs-meta\">#创建目录</span>\nmkdir <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/ik\n\n<span class=\"hljs-meta\">#将文件压缩包移动到ik中</span>\nmv <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/ik\n\n<span class=\"hljs-meta\">#进入目录</span>\ncd <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/ik\n\n<span class=\"hljs-meta\">#解压</span>\nunzip elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip\n\n<span class=\"hljs-meta\">#删除压缩包</span>\nrm -rf elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip</code></pre><p>退出并重启镜像<br><br>给大家个建议，这玩意装与不装都挺好，不装查到的东西也很精确够使，装上会查出一些没有用的！</p>','<h2><br></h2><h1 id=\"arxcw\">1.设置max_map_count不然启动es会启动不起来</h1><h2 id=\"lh5qb\"><a></a></h2><p><font size=\"4\">查看max_map_count的值 <font color=\"#c24f4a\">默认是65530</font></font><br></p><pre type=\"Shell Session\"><code>cat <span class=\"hljs-regexp\">/proc/</span>sys<span class=\"hljs-regexp\">/vm/m</span>ax_map_count</code></pre><p><font size=\"4\">重新设置max_map_count的值</font><br></p><pre type=\"Shell Session\"><code>sysctl -w vm.<span class=\"hljs-attribute\">max_map_count</span>=262144</code></pre><h1 id=\"d7bqv\">2.下载镜像并运行</h1><div></div><pre type=\"Shell Session\"><code>#拉取镜像\ndocker pull elasticsearch:<span class=\"hljs-number\">7.7</span><span class=\"hljs-number\">.0</span>\n\n#启动镜像\ndocker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class=\"hljs-string\">\"-Xms512m -Xmx512m\"</span></code><code> -e <span class=\"hljs-string\">\"discovery.type=single-node\"</span> -p <span class=\"hljs-number\">9200</span>:<span class=\"hljs-number\">9200</span> -p <span class=\"hljs-number\">9300</span>:<span class=\"hljs-number\">9300</span> elasticsearch:<span class=\"hljs-number\">7.7</span><span class=\"hljs-number\">.0</span></code></pre><p><font size=\"4\">参数说明<br></font></p><pre type=\"Shell Session\"><code><span class=\"hljs-deletion\">--name表示镜像启动后的容器名称 </span>\n\n<span class=\"hljs-deletion\">-d: 后台运行容器，并返回容器ID；</span>\n\n<span class=\"hljs-deletion\">-e: 指定容器内的环境变量</span>\n\n<span class=\"hljs-deletion\">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span></code></pre><h1 id=\"zzy9m\">3.浏览器访问ip:9200 如果出现以下界面就是安装成功</h1><p><img src=\"https://img-blog.csdnimg.cn/20201223190232693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"![在这里插入图片描述](https://img-blog.csdnimg.cn/20201223171312149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\"><br></p><h1 id=\"2c8dw\">4.安装elasticsearch-head</h1><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#拉取镜像</span>\ndocker pull mobz/elasticsearch-head:5\n\n<span class=\"hljs-comment\">#创建容器</span>\ndocker <span class=\"hljs-keyword\">create</span> <span class=\"hljs-comment\">--name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span>\n\n<span class=\"hljs-comment\">#启动容器</span>\ndocker <span class=\"hljs-keyword\">start</span> elasticsearch-<span class=\"hljs-keyword\">head</span>\n<span class=\"hljs-keyword\">or</span>\ndocker <span class=\"hljs-keyword\">start</span> 容器<span class=\"hljs-keyword\">id</span> （docker ps -a 查看容器<span class=\"hljs-keyword\">id</span> ）</code></pre><h1 id=\"4djwh\">5.浏览器打开: http://IP:9100</h1><img src=\"https://img-blog.csdnimg.cn/20201223171452568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br><font size=\"5\" color=\"#c24f4a\">尝试连接easticsearch会发现无法连接上，由于是前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置。<br>解决办法</font><br><h1 id=\"749el\">6.修改docker中elasticsearch的elasticsearch.yml文件</h1><pre type=\"Shell Session\"><code>docker exec -<span class=\"hljs-keyword\">it</span> elasticsearch /bin/bash （进不去使用容器<span class=\"hljs-built_in\">id</span>进入）</code><code><br></code><code>vi config/elasticsearch.yml</code></pre><p><font size=\"4\">在最下面添加2行</font><br><br></p><pre type=\"Shell Session\"><code>http<span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.enabled</span>: true \nhttp<span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.allow-origin</span>: <span class=\"hljs-string\">\"*\"</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201223171735464.png\" alt=\"在这里插入图片描述\"><br><br>退出并重启服务<br></p><pre type=\"Shell Session\"><code><span class=\"hljs-keyword\">exit</span>\ndocker restart 容器id</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201223171815168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"vqjy7\">7.ElasticSearch-head 操作时不修改配置，默认会报 406错误码</h1><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#复制vendor.js到外部</span>\ndocker cp fa85a4c478bf:<span class=\"hljs-regexp\">/usr/</span>src<span class=\"hljs-regexp\">/app/</span>_site<span class=\"hljs-regexp\">/vendor.js /u</span>sr<span class=\"hljs-regexp\">/local/</span>\n\n<span class=\"hljs-comment\">#修改vendor.js</span>\nvim vendor.js</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201224103442628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">修改完成在复制回容器</font><br><br></p><pre type=\"Bash\"><code>docker cp <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/vendor.js fa85a4c478bf:/u</span>sr<span class=\"hljs-regexp\">/src/</span>app<span class=\"hljs-regexp\">/_site</span></code></pre><p><br></p><p><font size=\"4\">重启elasticsearch-head</font><br><br></p><pre type=\"Shell Session\"><code>docker restart 容器<span class=\"hljs-built_in\">id</span></code></pre><p><br></p><p><br>最好就可以查询到es数据了<br><img src=\"https://img-blog.csdnimg.cn/20201224103651968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br></p><h1 id=\"mzf4u\">8.安装ik分词器</h1><font size=\"4\">这里采用离线安装<br><br>下载分词器压缩包<br>下载地址：<br></font><a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip\" target=\"_blank\"><font size=\"4\">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip</font></a><font size=\"4\"><br>将IK分词器上传到/tmp目录中（xftp）<br><br>将分词器安装进容器中</font><br><pre type=\"Shell Session\"><code><span class=\"hljs-meta\">#将压缩包移动到容器中</span>\ndocker cp <span class=\"hljs-meta-keyword\">/tmp/</span>elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip elasticsearch:<span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins\n\n<span class=\"hljs-meta\">#进入容器</span>\ndocker exec -it elasticsearch <span class=\"hljs-meta-keyword\">/bin/</span>bash \n\n<span class=\"hljs-meta\">#创建目录</span>\nmkdir <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/ik\n\n<span class=\"hljs-meta\">#将文件压缩包移动到ik中</span>\nmv <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/ik\n\n<span class=\"hljs-meta\">#进入目录</span>\ncd <span class=\"hljs-meta-keyword\">/usr/</span>share<span class=\"hljs-meta-keyword\">/elasticsearch/</span>plugins/ik\n\n<span class=\"hljs-meta\">#解压</span>\nunzip elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip\n\n<span class=\"hljs-meta\">#删除压缩包</span>\nrm -rf elasticsearch-analysis-ik<span class=\"hljs-number\">-7.7</span><span class=\"hljs-number\">.0</span>.zip</code></pre><p>退出并重启镜像<br><br>给大家个建议，这玩意装与不装都挺好，不装查到的东西也很精确够使，装上会查出一些没有用的！</p>','1','8','1','1','1','2021-01-01 14:41:35','2021-01-01 15:46:58'),(12,'http://qiniu-picture.xiyanit.cn/Fr23LqKLdvTLIIt608UnWOnssXM8','SpringBoot整合Elasticsearch','Java,Elasticsearch,','SpringBoot整合Elasticsearch',6,0,0,'1',1,' <p><h1 id=\"4tr0p\">1.pom引入</h1><div></div></p><pre type=\"XML\"><code><span class=\"hljs-comment\">&lt;!--elasticsearch--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.5.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">relativePath</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- lookup parent from repository --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.8.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.47<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><p><br></p><div></div><p><h1 id=\"oabjd\">2.yml配置</h1></p><pre type=\"JSON\"><code><span class=\"hljs-symbol\">spring:</span>\n<span class=\"hljs-symbol\">  data:</span>\n<span class=\"hljs-symbol\">  elasticsearch:</span>\n<span class=\"hljs-symbol\">    rest:</span>\n<span class=\"hljs-symbol\">      uris:</span> [<span class=\"hljs-string\">\"ip:9200\"</span>]\n<span class=\"hljs-symbol\">    elasticsearch:</span>\n      cluster-name: docker-cluster\n      cluster-nodes: ip:<span class=\"hljs-number\">9300</span> <span class=\"hljs-meta\">#配置es节点信息，逗号分隔，如果没有指定，则启动ClientNode</span>\n<span class=\"hljs-symbol\">      properties:</span>\n<span class=\"hljs-symbol\">        path:</span>\n<span class=\"hljs-symbol\">          logs:</span> .<span class=\"hljs-meta-keyword\">/elasticsearch/</span>log <span class=\"hljs-meta\">#elasticsearch日志存储目录</span>\n<span class=\"hljs-symbol\">          data:</span> .<span class=\"hljs-meta-keyword\">/elasticsearch/</span>data <span class=\"hljs-meta\">#elasticsearch数据存储目录</span></code></pre><div></div><p><font size=\"4\">配置只需这么些，接下来就写一些demo来玩一下elaseticsearch</font><br><br><font size=\"4\">构建Item类</font></p><pre type=\"Java\"><code><span class=\"hljs-meta\">@Document</span>(indexName = <span class=\"hljs-string\">\"item\"</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-string\">\"docs\"</span>, shards = <span class=\"hljs-number\">1</span>, replicas = <span class=\"hljs-number\">0</span>)\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Item</span> </span>{\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Long</span> id;\n\n    <span class=\"hljs-comment\">//文章使用分词器</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Text</span>, analyzer = <span class=\"hljs-string\">\"ik_max_word\"</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> title; <span class=\"hljs-comment\">//标题</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Keyword</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> category; <span class=\"hljs-comment\">// 分类</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Keyword</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> brand; <span class=\"hljs-comment\">// 品牌</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Double</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Double</span> price; <span class=\"hljs-comment\">// 价格</span>\n}</code></pre><p><font size=\"4\">创建ItemRepository并继承ElasticsearchRepository，有兴趣的可以看一下底层源码</font><br></p><pre type=\"Java\"><code>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ItemRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ElasticsearchRepository</span>&lt;<span class=\"hljs-title\">Item</span>,<span class=\"hljs-title\">Long</span>&gt;</span>{\n<span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\">* </span>@Description:根据价格区间查询 自定义查询\n<span class=\"hljs-bullet\">* </span>@Param price1\n<span class=\"hljs-bullet\">* </span>@Param price2\n*/</span></span>\n<span class=\"hljs-built_in\">List</span>&lt;Item&gt; findByPriceBetween(<span class=\"hljs-built_in\">double</span> price1, <span class=\"hljs-built_in\">double</span> price2);\n\n<span class=\"hljs-built_in\">List</span>&lt;Item&gt; findByTitle(<span class=\"hljs-built_in\">String</span> title1);\n\n<span class=\"hljs-built_in\">List</span>&lt;Item&gt; findByTitleIn(Collection&lt;<span class=\"hljs-built_in\">String</span>&gt; ss);\n}</code></pre><p><font size=\"4\">创建索引</font></p><pre type=\"Java\"><code>@<span class=\"hljs-constructor\">RunWith(SpringRunner.<span class=\"hljs-params\">class</span>)</span>\n@<span class=\"hljs-constructor\">SpringBootTest(<span class=\"hljs-params\">classes</span> = BootApplication.<span class=\"hljs-params\">class</span>)</span>\npublic <span class=\"hljs-keyword\">class</span> EsDemoApplicationTest{\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:创建索引，会根据Item类的@Document注解信息来创建\n     */</span>\n    @Test\n    public void test<span class=\"hljs-constructor\">CreateIndex()</span> {\n       elasticsearchRestTemplate.index<span class=\"hljs-constructor\">Ops(Item.<span class=\"hljs-params\">class</span>)</span>.create<span class=\"hljs-literal\">()</span>;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:删除索引\n     */</span>\n    @Test\n    public void test<span class=\"hljs-constructor\">DeleteIndex()</span> {\n        elasticsearchRestTemplate.index<span class=\"hljs-constructor\">Ops(Item.<span class=\"hljs-params\">class</span>)</span>.delete<span class=\"hljs-literal\">()</span>;\n    }\n	<span class=\"hljs-comment\">/**\n     * @Description:判断索引是否存在\n     */</span>\n    @Test\n    public void test<span class=\"hljs-constructor\">ExistIndex()</span> {\n        elasticsearchRestTemplate.index<span class=\"hljs-constructor\">Ops(Item.<span class=\"hljs-params\">class</span>)</span>.exists<span class=\"hljs-literal\">()</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @Description:删除\n     */</span>\n    @Test\n    public void delete<span class=\"hljs-literal\">()</span> {\n        elasticsearchRestTemplate.delete(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n    }\n    <span class=\"hljs-comment\">/**\n     * 查询文档数据\n     */</span>\n    @Test\n    public void get<span class=\"hljs-constructor\">Doc()</span> {\n        Item item = elasticsearchRestTemplate.get(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>value<span class=\"hljs-constructor\">Of(1L)</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(item);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 修改文档数据\n     */</span>\n    @Test\n    public void update<span class=\"hljs-constructor\">Doc()</span> {\n\n        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;<span class=\"hljs-literal\">()</span>;\n        map.put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"abc\"</span>);\n\n        Document doc = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Document</span>.</span></span>from(map);\n\n        UpdateQuery updateQuery = UpdateQuery\n                .builder(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>value<span class=\"hljs-constructor\">Of(1)</span>)\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Document(<span class=\"hljs-params\">doc</span>)</span>\n                .build<span class=\"hljs-literal\">()</span>;\n        IndexCoordinates indexCoordinates = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IndexCoordinates</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-string\">\"item\"</span>);\n        elasticsearchRestTemplate.update(updateQuery, indexCoordinates);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 分页搜索数据\n     * 使用QueryBuilder\n     * termQuery(\"key\", obj) 完全匹配\n     * termsQuery(\"key\", obj1, obj2..)   一次匹配多个值\n     * matchQuery(\"key\", Obj) 单个匹配, field不支持通配符, 前缀具高级特性\n     * multiMatchQuery(\"text\", \"field1\", \"field2\"..);  匹配多个字段, field有通配符忒行\n     * matchAllQuery();         匹配所有文件\n     * idsQuery();         只查询一个id的\n     * fuzzyQuery();          模糊查询 不能用通配符, 找到相似的\n     */</span>\n    @Test\n    public void search<span class=\"hljs-literal\">()</span> {\n        Pageable pageable = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PageRequest</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n\n        SortBuilder&lt;FieldSortBuilder&gt; sortBuilder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FieldSortBuilder(<span class=\"hljs-string\">\"price\"</span>)</span>\n                .order(SortOrder.DESC);\n\n        NativeSearchQuery query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NativeSearchQueryBuilder()</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Query(QueryBuilders.<span class=\"hljs-params\">boolQuery</span>()</span>.should(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QueryBuilders</span>.</span></span>fuzzy<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"360\"</span>)</span>))\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Pageable(<span class=\"hljs-params\">pageable</span>)</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">sortBuilder</span>)</span>\n                .build<span class=\"hljs-literal\">()</span>;\n        SearchHits&lt;Item&gt; search = elasticsearchRestTemplate.search(query, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(search.get<span class=\"hljs-constructor\">SearchHits()</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 高亮搜索\n     */</span>\n    @Test\n    public void highlight<span class=\"hljs-literal\">()</span> {\n        String preTag = <span class=\"hljs-string\">\"&lt;font color=\'red\'&gt;\"</span>;\n        String postTag = <span class=\"hljs-string\">\"&lt;/font&gt;\"</span>;\n\n        NativeSearchQuery query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NativeSearchQueryBuilder()</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Query(QueryBuilders.<span class=\"hljs-params\">matchQuery</span>(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"360\"</span>)</span>)\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">HighlightFields(<span class=\"hljs-params\">new</span> HighlightBuilder.Field(<span class=\"hljs-string\">\"title\"</span>)</span>\n                        .pre<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">preTag</span>)</span>\n                        .post<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">postTag</span>)</span>)\n                .build<span class=\"hljs-literal\">()</span>;\n        SearchHits&lt;Item&gt; searchHits = elasticsearchRestTemplate.search(query, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n\n        List&lt;SearchHit&lt;Item&gt;&gt; searchHitList = searchHits.get<span class=\"hljs-constructor\">SearchHits()</span>;\n        List&lt;Map&lt;String, Object&gt;&gt; hlList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;\n        for (SearchHit h : searchHitList) {\n\n            List&lt;String&gt; highlightField = h.get<span class=\"hljs-constructor\">HighlightField(<span class=\"hljs-string\">\"title\"</span>)</span>;\n            String nameValue = highlightField.get(<span class=\"hljs-number\">0</span>);\n            String originalJson = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSON</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">JSONString(<span class=\"hljs-params\">h</span>.<span class=\"hljs-params\">getContent</span>()</span>);\n            JsonParser jj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">GsonJsonParser()</span>;\n            Map&lt;String, Object&gt; myHighLight = jj.parse<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">originalJson</span>)</span>;\n            <span class=\"hljs-comment\">// 用高亮的搜索结果覆盖原字段值</span>\n            myHighLight.put(<span class=\"hljs-string\">\"title\"</span>, nameValue);\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(myHighLight);\n\n            hlList.add(myHighLight);\n        }\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(hlList);\n    }\n    <span class=\"hljs-comment\">/**\n     * 高亮搜索 排序加分页\n     */</span>\n    @Test\n    public void highlight1<span class=\"hljs-literal\">()</span> {\n        String preTag = <span class=\"hljs-string\">\"&lt;font color=\'red\'&gt;\"</span>;\n        String postTag = <span class=\"hljs-string\">\"&lt;/font&gt;\"</span>;\n        Pageable pageable = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PageRequest</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n        SortBuilder&lt;FieldSortBuilder&gt; sortBuilder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FieldSortBuilder(<span class=\"hljs-string\">\"price\"</span>)</span>\n                .order(SortOrder.DESC);\n        NativeSearchQuery query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NativeSearchQueryBuilder()</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Query(QueryBuilders.<span class=\"hljs-params\">fuzzyQuery</span>(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"360\"</span>)</span>)\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Pageable(<span class=\"hljs-params\">pageable</span>)</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">sortBuilder</span>)</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">HighlightFields(<span class=\"hljs-params\">new</span> HighlightBuilder.Field(<span class=\"hljs-string\">\"title\"</span>)</span>\n                        .pre<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">preTag</span>)</span>\n                        .post<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">postTag</span>)</span>)\n                .build<span class=\"hljs-literal\">()</span>;\n        SearchHits&lt;Item&gt; searchHits = elasticsearchRestTemplate.search(query, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n\n        List&lt;SearchHit&lt;Item&gt;&gt; searchHitList = searchHits.get<span class=\"hljs-constructor\">SearchHits()</span>;\n        List&lt;Map&lt;String, Object&gt;&gt; hlList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;\n        for (SearchHit h : searchHitList) {\n\n            List&lt;String&gt; highlightField = h.get<span class=\"hljs-constructor\">HighlightField(<span class=\"hljs-string\">\"title\"</span>)</span>;\n            String nameValue = highlightField.get(<span class=\"hljs-number\">0</span>);\n            String originalJson = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSON</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">JSONString(<span class=\"hljs-params\">h</span>.<span class=\"hljs-params\">getContent</span>()</span>);\n            JsonParser jj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">GsonJsonParser()</span>;\n            Map&lt;String, Object&gt; myHighLight = jj.parse<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">originalJson</span>)</span>;\n            <span class=\"hljs-comment\">// 用高亮的搜索结果覆盖原字段值</span>\n            myHighLight.put(<span class=\"hljs-string\">\"title\"</span>, nameValue);\n            hlList.add(myHighLight);\n        }\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(hlList);\n    }\n}</code></pre><p><a href=\"https://blog.csdn.net/xiaozm1223/article/details/89210295\" target=\"_blank\"><font size=\"5\">QueryBuilder构造ES查询条件使用规则</font></a><br></p><p><font size=\"5\"><a href=\"https://blog.csdn.net/csdn_20150804/article/details/105618933\" target=\"_blank\">https://blog.csdn.net/csdn_20150804/article/details/105618933</a></font><br></p><p><font size=\"4\">第二种实现方式 RestHighLevelClient</font></p><pre type=\"Java\"><code>package comn.hy.<span class=\"hljs-keyword\">search</span>.service.impl;\n \n \n<span class=\"hljs-keyword\">import</span> com.hy.<span class=\"hljs-keyword\">search</span>.Stu;\n<span class=\"hljs-keyword\">import</span> com.hy.utils.JsonUtils;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">admin</span>.indices.<span class=\"hljs-keyword\">delete</span>.DeleteIndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.bulk.BulkRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.bulk.BulkResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">delete</span>.DeleteRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">delete</span>.DeleteResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">get</span>.GetRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">get</span>.GetResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">index</span>.IndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">index</span>.IndexResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">search</span>.SearchRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">search</span>.SearchResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">update</span>.UpdateRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">update</span>.UpdateResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RequestOptions;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.indices.CreateIndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.indices.CreateIndexResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.indices.GetIndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.common.unit.TimeValue;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.common.xcontent.XContentType;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">index</span>.query.QueryBuilders;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">index</span>.query.TermQueryBuilder;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">search</span>.builder.SearchSourceBuilder;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">search</span>.<span class=\"hljs-keyword\">fetch</span>.subphase.FetchSourceContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;\n \n<span class=\"hljs-keyword\">import</span> javax.annotation.Resource;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;\n@RestController\n<span class=\"hljs-built_in\">public</span> <span class=\"hljs-keyword\">class</span> TestServiceES {\n \n    @Resource\n    private RestHighLevelClient client;\n \n \n    <span class=\"hljs-comment\">/**\n     * 创建索引\n     * @throws IOException\n     */</span>\n    @PostMapping(\"create-index\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> createIndex() throws IOException {\n        CreateIndexRequest request = <span class=\"hljs-built_in\">new</span> CreateIndexRequest(\"user_index\");\n        CreateIndexResponse response = client.indices().<span class=\"hljs-keyword\">create</span>(request, RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 获取索引信息\n     * @throws IOException\n     */</span>\n    @GetMapping(\"query-index\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> queryIndex() throws IOException {\n        GetIndexRequest request = <span class=\"hljs-built_in\">new</span> GetIndexRequest(\"user_index\");\n \n        <span class=\"hljs-type\">boolean</span> b = client.indices().<span class=\"hljs-keyword\">exists</span>(request, RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(b);\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * 删除索引\n     * @throws IOException\n     */</span>\n   @DeleteMapping(\"delete-index\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> deleteIndex() throws IOException {\n        DeleteIndexRequest request = <span class=\"hljs-built_in\">new</span> DeleteIndexRequest(\"user_index\");\n        AcknowledgedResponse <span class=\"hljs-keyword\">delete</span> = client.indices().<span class=\"hljs-keyword\">delete</span>(request, RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-keyword\">delete</span>.isAcknowledged());\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 新增一个文档\n     * @throws IOException\n     */</span>\n    @PostMapping(\"add-doc\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> addDoc() throws IOException {\n \n        Stu stu = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10010</span>L, \"绝世风华\", <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        IndexRequest request = <span class=\"hljs-built_in\">new</span> IndexRequest(\"user_index\");\n        // 规则 put /test_index/_doc/<span class=\"hljs-number\">1</span>\n        request.id(\"1\");\n        request.timeout(<span class=\"hljs-built_in\">new</span> TimeValue(<span class=\"hljs-number\">60</span>, TimeUnit.SECONDS));\n        request.source(JsonUtils.objectToJson(stu),XContentType.JSON);\n        // 发送\n        IndexResponse response = client.<span class=\"hljs-keyword\">index</span>(request,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.toString());\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.status());\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 查询文档数据\n     * @throws IOException\n     */</span>\n    @GetMapping(\"query-doc\")\n    <span class=\"hljs-type\">void</span> queryDoc() throws IOException {\n        GetRequest request = <span class=\"hljs-built_in\">new</span> GetRequest(\"user_index\",\"1\");\n        request.fetchSourceContext(<span class=\"hljs-built_in\">new</span> FetchSourceContext(<span class=\"hljs-keyword\">false</span>));\n        request.storedFields(\"_none_\");\n \n        // 是否存在？？？\n        <span class=\"hljs-type\">boolean</span> b = client.<span class=\"hljs-keyword\">exists</span>(request,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(b);\n \n        // 获取\n        GetResponse response = client.<span class=\"hljs-keyword\">get</span>(request,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.getSourceAsString());\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 更新文檔\n     * @throws IOException\n     */</span>\n    @PutMapping(\"update-doc\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> updateDoc() throws IOException {\n        UpdateRequest updateRequest = <span class=\"hljs-built_in\">new</span> UpdateRequest(\"user_index\",\"1\");\n        updateRequest.timeout(\"1s\");\n        Stu stu = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10010</span>L, \"上善若水\", <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        updateRequest.doc(JsonUtils.objectToJson(stu),XContentType.JSON);\n \n        UpdateResponse response = client.<span class=\"hljs-keyword\">update</span>(updateRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n \n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.status());\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 删除文档\n     * @throws IOException\n     */</span>\n    @DeleteMapping(\"delete-doc\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> deleteDoc() throws IOException {\n        DeleteRequest deleteRequest = <span class=\"hljs-built_in\">new</span> DeleteRequest(\"user_index\",\"1\");\n        deleteRequest.timeout(\"1s\");\n        DeleteResponse response = client.<span class=\"hljs-keyword\">delete</span>(deleteRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.status());\n    }\n \n \n \n    <span class=\"hljs-comment\">/**\n     * 批量操作\n     * @throws IOException\n     */</span>\n    @PostMapping(\"bulk-operator\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> bulkOperator() throws IOException {\n        BulkRequest bulkRequest = <span class=\"hljs-built_in\">new</span> BulkRequest();\n        bulkRequest.timeout(\"15s\");\n \n        Stu stu0 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10010</span>L, \"诸天万界之起源传说\", <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        Stu stu1 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10011</span>L, \"寒夜\", <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">88.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        Stu stu2 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10012</span>L, \"陌上千寻雪\", <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">96.5</span>f, <span class=\"hljs-keyword\">false</span>);\n        Stu stu3 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10013</span>L, \"可爱的漂亮的小哥哥\", <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">108.5</span>f, <span class=\"hljs-keyword\">false</span>);\n        Stu stu4 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10014</span>L, \"灵纪传说\", <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">108.6</span>f, <span class=\"hljs-keyword\">true</span>);\n        Stu stu5 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10015</span>L, \"狂剑天下之鸿蒙掌控\", <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">18.5</span>f, <span class=\"hljs-keyword\">false</span>);\n        Stu stu6 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10016</span>L, \"逆战次元\", <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n \n        ArrayList&lt;Stu&gt; stuList = <span class=\"hljs-built_in\">new</span> ArrayList&lt;&gt;();\n        stuList.<span class=\"hljs-keyword\">add</span>(stu0);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu1);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu2);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu3);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu4);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu5);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu6);\n \n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i&lt;=stuList.size();i++){\n            bulkRequest.<span class=\"hljs-keyword\">add</span>(\n                    <span class=\"hljs-built_in\">new</span> IndexRequest(\"test.index\").\n                            id(\"\"+(i+<span class=\"hljs-number\">1</span>)).\n                            source(JsonUtils.objectToJson(stuList.<span class=\"hljs-keyword\">get</span>(i)), XContentType.JSON));\n        }\n        // 批量插入\n        BulkResponse response = client.bulk(bulkRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.hasFailures());\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * 条件查询\n     * @throws IOException\n     */</span>\n    @GetMapping(\"condition-search\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> conditionSearch() throws IOException {\n        SearchRequest searchRequest = <span class=\"hljs-built_in\">new</span> SearchRequest(\"user_index\");\n        // 构造条件\n        SearchSourceBuilder builder = <span class=\"hljs-built_in\">new</span>   SearchSourceBuilder();\n        // 精确匹配\n        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(\"name\",\"绝世风华\");\n \n        // 匹配全部 matchAllQuery();\n        builder.query(termQueryBuilder);\n \n        // 分页\n        builder.<span class=\"hljs-keyword\">from</span>(<span class=\"hljs-number\">0</span>);\n        builder.size(<span class=\"hljs-number\">10</span>);\n        builder.timeout(TimeValue.MINUS_ONE);\n        searchRequest.source(builder);\n        SearchResponse response = client.<span class=\"hljs-keyword\">search</span>(searchRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(JsonUtils.objectToJson(response.getHits()));\n \n        <span class=\"hljs-keyword\">for</span> (org.elasticsearch.<span class=\"hljs-keyword\">search</span>.SearchHit hit : response.getHits().getHits()) {\n            hit.getSourceAsMap().<span class=\"hljs-keyword\">get</span>(\"name\");\n        }\n    }\n}\n \n</code></pre><p><font size=\"5\">先执行创建索引</font><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201223172555456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font size=\"5\"><br></font></p><p><font size=\"5\">索引数据操作</font></p><pre type=\"Java\"><code>@RunWith(SpringRunner.class)\n@SpringBootTest(classes = BootApplication.class)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ceshiTest</span> {</span>\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> ItemRepository itemRepository;\n \n    <span class=\"hljs-comment\">/**\n     * @Description:定义新增方法\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">()</span> </span>{\n        Item item = <span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">\"小米手机7\"</span>, <span class=\"hljs-string\">\" 手机\"</span>,\n                <span class=\"hljs-string\">\"小米\"</span>, <span class=\"hljs-number\">3499.00</span>);\n        itemRepository.save(item);\n    }\n \n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:定义批量新增方法\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertList</span><span class=\"hljs-params\">()</span> </span>{\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">\"小米9\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"小米\"</span>, <span class=\"hljs-number\">3299.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">\"华为pro30\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"华为\"</span>, <span class=\"hljs-number\">3999.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">3L</span>, <span class=\"hljs-string\">\"一加7\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"一加\"</span>, <span class=\"hljs-number\">2999.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">4L</span>, <span class=\"hljs-string\">\"魅族16\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"魅族\"</span>, <span class=\"hljs-number\">1999.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">5L</span>, <span class=\"hljs-string\">\"苹果xs\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"苹果\"</span>, <span class=\"hljs-number\">5099.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">6L</span>, <span class=\"hljs-string\">\"360pro\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"360\"</span>, <span class=\"hljs-number\">1099.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">7L</span>, <span class=\"hljs-string\">\"荣耀V10\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"华为\"</span>, <span class=\"hljs-number\">899.00</span> ));\n        <span class=\"hljs-comment\">// 接收对象集合，实现批量新增</span>\n        itemRepository.save(<span class=\"hljs-built_in\">list</span>);\n    }\n    \n\n    \n    <span class=\"hljs-comment\">/**\n     * @Description:按照价格区间查询  自定义方法\n     * 自定义方法\n        Spring Data 的另一个强大功能，是根据方法名称自动实现功能。\n        比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。\n        当然，方法名称要符合一定的约定  下边为约定\n            And	findByNameAndPrice\n            Or	findByNameOrPrice\n            Is	findByName\n            Not	findByNameNot\n            Between	findByPriceBetween\n            LessThanEqual	findByPriceLessThan\n            GreaterThanEqual	findByPriceGreaterThan\n            Before	findByPriceBefore\n            After	findByPriceAfter\n            Like	findByNameLike\n            StartingWith	findByNameStartingWith\n            EndingWith	findByNameEndingWith\n            Contains/Containing	findByNameContaining\n            In	findByNameIn(Collection&lt;String&gt;names)\n            NotIn	findByNameNotIn(Collection&lt;String&gt;names)\n            Near	findByStoreNear\n            True	findByAvailableTrue\n            False	findByAvailableFalse\n            OrderBy	findByAvailableTrueOrderByNameDesc\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">queryByPriceBetween</span><span class=\"hljs-params\">()</span></span>{\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">this</span>.itemRepository.findByPriceBetween(<span class=\"hljs-number\">2000.00</span>, <span class=\"hljs-number\">3500.00</span>);\n        <span class=\"hljs-keyword\">for</span> (Item item : <span class=\"hljs-built_in\">list</span>) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"item = \"</span> + item.getTitle());\n        }\n    }\n \n \n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">queryByTitle</span><span class=\"hljs-params\">()</span></span>{\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">this</span>.itemRepository.findByTitle(<span class=\"hljs-string\">\"华为\"</span>);\n        <span class=\"hljs-keyword\">for</span> (Item item : <span class=\"hljs-built_in\">list</span>) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"item = \"</span> + item.getTitle());\n        }\n    }\n \n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">queryByTitleTo</span><span class=\"hljs-params\">()</span></span>{\n        Collection&lt;<span class=\"hljs-keyword\">String</span>&gt; ss =  <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        ss.add(<span class=\"hljs-string\">\"华为\"</span>);\n        ss.add(<span class=\"hljs-string\">\"小米\"</span>);\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">this</span>.itemRepository.findByTitleIn(ss);\n        <span class=\"hljs-keyword\">for</span> (Item item : <span class=\"hljs-built_in\">list</span>) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"item = \"</span> + item.getTitle());\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:matchQuery底层采用的是词条匹配查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testMatchQuery</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">// 构建查询条件</span>\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 添加基本分词查询</span>\n        queryBuilder.withQuery(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"华为\"</span>));\n        <span class=\"hljs-comment\">// 搜索，获取结果</span>\n        Page&lt;Item&gt; items = <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 总条数</span>\n        <span class=\"hljs-keyword\">long</span> total = items.getTotalElements();\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"获取的总条数 = \"</span> + total);\n        <span class=\"hljs-keyword\">for</span> (Item item : items) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是：\"</span>+item.getTitle());\n        }\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:\n     * termQuery:功能更强大，除了匹配字符串以外，还可以匹配\n     * int/long/double/float/....\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testTermQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        builder.withQuery(QueryBuilders.termQuery(<span class=\"hljs-string\">\"price\"</span>,<span class=\"hljs-number\">1099</span>));\n        <span class=\"hljs-comment\">// 查找</span>\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n \n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机是：\"</span>+item.getTitle());\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @Description:布尔查询  多条件查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testBooleanQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n \n        builder.withQuery(\n                QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"华为\"</span>))\n                        .must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"brand\"</span>,<span class=\"hljs-string\">\"华为\"</span>))\n        );\n \n        <span class=\"hljs-comment\">// 查找</span>\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是\"</span>+item.getTitle());\n        }\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:布尔查询  多条件查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testBlQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n \n        builder.withQuery(\n                QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"荣耀\"</span>))\n                        .must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"华为\"</span>))\n        );\n \n        <span class=\"hljs-comment\">// 查找</span>\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是\"</span>+item.getTitle());\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @Description:模糊查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testFuzzyQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        builder.withQuery(QueryBuilders.fuzzyQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"一\"</span>));\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是：\"</span>+item.getTitle());\n        }\n \n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:分页查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">searchByPage</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">// 构建查询条件</span>\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 添加基本分词查询</span>\n        queryBuilder.withQuery(QueryBuilders.termQuery(<span class=\"hljs-string\">\"category\"</span>, <span class=\"hljs-string\">\"手机\"</span>));\n        <span class=\"hljs-comment\">// 分页：</span>\n        <span class=\"hljs-keyword\">int</span> page = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span> = <span class=\"hljs-number\">2</span>;\n        queryBuilder.withPageable(PageRequest.of(page,<span class=\"hljs-built_in\">size</span>));\n \n        <span class=\"hljs-comment\">// 搜索，获取结果</span>\n        Page&lt;Item&gt; items = <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 总条数</span>\n        <span class=\"hljs-keyword\">long</span> total = items.getTotalElements();\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"总条数 = \"</span> + total);\n        <span class=\"hljs-comment\">// 总页数</span>\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"总页数 = \"</span> + items.getTotalPages());\n        <span class=\"hljs-comment\">// 当前页</span>\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"当前页：\"</span> + items.getNumber());\n        <span class=\"hljs-comment\">// 每页大小</span>\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"每页大小：\"</span> + items.getSize());\n \n        <span class=\"hljs-keyword\">for</span> (Item item : items) {\n            System.out.<span class=\"hljs-built_in\">println</span>(item.getTitle());\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:排序查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">searchAndSort</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">// 构建查询条件</span>\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 添加基本分词查询</span>\n        queryBuilder.withQuery(QueryBuilders.termQuery(<span class=\"hljs-string\">\"category\"</span>, <span class=\"hljs-string\">\"手机\"</span>));\n \n        <span class=\"hljs-comment\">// 排序</span>\n        queryBuilder.withSort(SortBuilders.fieldSort(<span class=\"hljs-string\">\"price\"</span>).order(SortOrder.DESC));\n \n        <span class=\"hljs-comment\">// 搜索，获取结果</span>\n        Page&lt;Item&gt; items = <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 总条数</span>\n        <span class=\"hljs-keyword\">long</span> total = items.getTotalElements();\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"总条数 = \"</span> + total);\n \n        <span class=\"hljs-keyword\">for</span> (Item item : items) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机的价格是：\"</span>+item.getTitle()+<span class=\"hljs-string\">\":\"</span>+item.getPrice());\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:按照品牌brand进行分组\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testAgg</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 不查询任何结果</span>\n        queryBuilder.withSourceFilter(<span class=\"hljs-keyword\">new</span> FetchSourceFilter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>[]{<span class=\"hljs-string\">\"\"</span>}, null));\n        <span class=\"hljs-comment\">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span>\n        queryBuilder.addAggregation(\n                AggregationBuilders.terms(<span class=\"hljs-string\">\"brands\"</span>).field(<span class=\"hljs-string\">\"brand\"</span>));\n        <span class=\"hljs-comment\">// 2、查询,需要把结果强转为AggregatedPage类型</span>\n        AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 3、解析</span>\n        <span class=\"hljs-comment\">// 3.1、从结果中取出名为brands的那个聚合，</span>\n        <span class=\"hljs-comment\">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span>\n        StringTerms agg = (StringTerms) aggPage.getAggregation(<span class=\"hljs-string\">\"brands\"</span>);\n        <span class=\"hljs-comment\">// 3.2、获取桶</span>\n        List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();\n        <span class=\"hljs-comment\">// 3.3、遍历</span>\n        <span class=\"hljs-keyword\">for</span> (StringTerms.Bucket bucket : buckets) {\n            <span class=\"hljs-comment\">// 3.4、获取桶中的key，即品牌名称</span>\n            System.out.<span class=\"hljs-built_in\">println</span>(bucket.getKeyAsString());\n            <span class=\"hljs-comment\">// 3.5、获取桶中的文档数量</span>\n            System.out.<span class=\"hljs-built_in\">println</span>(bucket.getDocCount());\n        }\n \n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:嵌套聚合，求平均值\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testSubAgg</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 不查询任何结果</span>\n        queryBuilder.withSourceFilter(<span class=\"hljs-keyword\">new</span> FetchSourceFilter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>[]{<span class=\"hljs-string\">\"\"</span>}, null));\n        <span class=\"hljs-comment\">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span>\n        queryBuilder.addAggregation(\n                AggregationBuilders.terms(<span class=\"hljs-string\">\"brands\"</span>).field(<span class=\"hljs-string\">\"brand\"</span>)\n                        .subAggregation(AggregationBuilders.avg(<span class=\"hljs-string\">\"priceAvg\"</span>).field(<span class=\"hljs-string\">\"price\"</span>)) <span class=\"hljs-comment\">// 在品牌聚合桶内进行嵌套聚合，求平均值</span>\n        );\n        <span class=\"hljs-comment\">// 2、查询,需要把结果强转为AggregatedPage类型</span>\n        AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 3、解析</span>\n        <span class=\"hljs-comment\">// 3.1、从结果中取出名为brands的那个聚合，</span>\n        <span class=\"hljs-comment\">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span>\n        StringTerms agg = (StringTerms) aggPage.getAggregation(<span class=\"hljs-string\">\"brands\"</span>);\n        <span class=\"hljs-comment\">// 3.2、获取桶</span>\n        List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();\n        <span class=\"hljs-comment\">// 3.3、遍历</span>\n        <span class=\"hljs-keyword\">for</span> (StringTerms.Bucket bucket : buckets) {\n            <span class=\"hljs-comment\">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span>\n            System.out.<span class=\"hljs-built_in\">println</span>(bucket.getKeyAsString() + <span class=\"hljs-string\">\"，共\"</span> + bucket.getDocCount() + <span class=\"hljs-string\">\"台\"</span>);\n \n            <span class=\"hljs-comment\">// 3.6.获取子聚合结果：</span>\n            InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-string\">\"priceAvg\"</span>);\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"平均售价：\"</span> + avg.getValue());\n        }\n    }\n}\n</code></pre>',' <p><h1 id=\"4tr0p\">1.pom引入</h1><div></div></p><pre type=\"XML\"><code><span class=\"hljs-comment\">&lt;!--elasticsearch--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.5.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">relativePath</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- lookup parent from repository --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.8.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.47<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><p><br></p><div></div><p><h1 id=\"oabjd\">2.yml配置</h1></p><pre type=\"JSON\"><code><span class=\"hljs-symbol\">spring:</span>\n<span class=\"hljs-symbol\">  data:</span>\n<span class=\"hljs-symbol\">  elasticsearch:</span>\n<span class=\"hljs-symbol\">    rest:</span>\n<span class=\"hljs-symbol\">      uris:</span> [<span class=\"hljs-string\">\"ip:9200\"</span>]\n<span class=\"hljs-symbol\">    elasticsearch:</span>\n      cluster-name: docker-cluster\n      cluster-nodes: ip:<span class=\"hljs-number\">9300</span> <span class=\"hljs-meta\">#配置es节点信息，逗号分隔，如果没有指定，则启动ClientNode</span>\n<span class=\"hljs-symbol\">      properties:</span>\n<span class=\"hljs-symbol\">        path:</span>\n<span class=\"hljs-symbol\">          logs:</span> .<span class=\"hljs-meta-keyword\">/elasticsearch/</span>log <span class=\"hljs-meta\">#elasticsearch日志存储目录</span>\n<span class=\"hljs-symbol\">          data:</span> .<span class=\"hljs-meta-keyword\">/elasticsearch/</span>data <span class=\"hljs-meta\">#elasticsearch数据存储目录</span></code></pre><div></div><p><font size=\"4\">配置只需这么些，接下来就写一些demo来玩一下elaseticsearch</font><br><br><font size=\"4\">构建Item类</font></p><pre type=\"Java\"><code><span class=\"hljs-meta\">@Document</span>(indexName = <span class=\"hljs-string\">\"item\"</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-string\">\"docs\"</span>, shards = <span class=\"hljs-number\">1</span>, replicas = <span class=\"hljs-number\">0</span>)\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Item</span> </span>{\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Long</span> id;\n\n    <span class=\"hljs-comment\">//文章使用分词器</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Text</span>, analyzer = <span class=\"hljs-string\">\"ik_max_word\"</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> title; <span class=\"hljs-comment\">//标题</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Keyword</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> category; <span class=\"hljs-comment\">// 分类</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Keyword</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> brand; <span class=\"hljs-comment\">// 品牌</span>\n    <span class=\"hljs-meta\">@Field</span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>= <span class=\"hljs-type\">FieldType</span>.<span class=\"hljs-type\">Double</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Double</span> price; <span class=\"hljs-comment\">// 价格</span>\n}</code></pre><p><font size=\"4\">创建ItemRepository并继承ElasticsearchRepository，有兴趣的可以看一下底层源码</font><br></p><pre type=\"Java\"><code>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ItemRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ElasticsearchRepository</span>&lt;<span class=\"hljs-title\">Item</span>,<span class=\"hljs-title\">Long</span>&gt;</span>{\n<span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\">* </span>@Description:根据价格区间查询 自定义查询\n<span class=\"hljs-bullet\">* </span>@Param price1\n<span class=\"hljs-bullet\">* </span>@Param price2\n*/</span></span>\n<span class=\"hljs-built_in\">List</span>&lt;Item&gt; findByPriceBetween(<span class=\"hljs-built_in\">double</span> price1, <span class=\"hljs-built_in\">double</span> price2);\n\n<span class=\"hljs-built_in\">List</span>&lt;Item&gt; findByTitle(<span class=\"hljs-built_in\">String</span> title1);\n\n<span class=\"hljs-built_in\">List</span>&lt;Item&gt; findByTitleIn(Collection&lt;<span class=\"hljs-built_in\">String</span>&gt; ss);\n}</code></pre><p><font size=\"4\">创建索引</font></p><pre type=\"Java\"><code>@<span class=\"hljs-constructor\">RunWith(SpringRunner.<span class=\"hljs-params\">class</span>)</span>\n@<span class=\"hljs-constructor\">SpringBootTest(<span class=\"hljs-params\">classes</span> = BootApplication.<span class=\"hljs-params\">class</span>)</span>\npublic <span class=\"hljs-keyword\">class</span> EsDemoApplicationTest{\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:创建索引，会根据Item类的@Document注解信息来创建\n     */</span>\n    @Test\n    public void test<span class=\"hljs-constructor\">CreateIndex()</span> {\n       elasticsearchRestTemplate.index<span class=\"hljs-constructor\">Ops(Item.<span class=\"hljs-params\">class</span>)</span>.create<span class=\"hljs-literal\">()</span>;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:删除索引\n     */</span>\n    @Test\n    public void test<span class=\"hljs-constructor\">DeleteIndex()</span> {\n        elasticsearchRestTemplate.index<span class=\"hljs-constructor\">Ops(Item.<span class=\"hljs-params\">class</span>)</span>.delete<span class=\"hljs-literal\">()</span>;\n    }\n	<span class=\"hljs-comment\">/**\n     * @Description:判断索引是否存在\n     */</span>\n    @Test\n    public void test<span class=\"hljs-constructor\">ExistIndex()</span> {\n        elasticsearchRestTemplate.index<span class=\"hljs-constructor\">Ops(Item.<span class=\"hljs-params\">class</span>)</span>.exists<span class=\"hljs-literal\">()</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @Description:删除\n     */</span>\n    @Test\n    public void delete<span class=\"hljs-literal\">()</span> {\n        elasticsearchRestTemplate.delete(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n    }\n    <span class=\"hljs-comment\">/**\n     * 查询文档数据\n     */</span>\n    @Test\n    public void get<span class=\"hljs-constructor\">Doc()</span> {\n        Item item = elasticsearchRestTemplate.get(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>value<span class=\"hljs-constructor\">Of(1L)</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(item);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 修改文档数据\n     */</span>\n    @Test\n    public void update<span class=\"hljs-constructor\">Doc()</span> {\n\n        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;<span class=\"hljs-literal\">()</span>;\n        map.put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"abc\"</span>);\n\n        Document doc = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Document</span>.</span></span>from(map);\n\n        UpdateQuery updateQuery = UpdateQuery\n                .builder(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>value<span class=\"hljs-constructor\">Of(1)</span>)\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Document(<span class=\"hljs-params\">doc</span>)</span>\n                .build<span class=\"hljs-literal\">()</span>;\n        IndexCoordinates indexCoordinates = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IndexCoordinates</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-string\">\"item\"</span>);\n        elasticsearchRestTemplate.update(updateQuery, indexCoordinates);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 分页搜索数据\n     * 使用QueryBuilder\n     * termQuery(\"key\", obj) 完全匹配\n     * termsQuery(\"key\", obj1, obj2..)   一次匹配多个值\n     * matchQuery(\"key\", Obj) 单个匹配, field不支持通配符, 前缀具高级特性\n     * multiMatchQuery(\"text\", \"field1\", \"field2\"..);  匹配多个字段, field有通配符忒行\n     * matchAllQuery();         匹配所有文件\n     * idsQuery();         只查询一个id的\n     * fuzzyQuery();          模糊查询 不能用通配符, 找到相似的\n     */</span>\n    @Test\n    public void search<span class=\"hljs-literal\">()</span> {\n        Pageable pageable = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PageRequest</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n\n        SortBuilder&lt;FieldSortBuilder&gt; sortBuilder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FieldSortBuilder(<span class=\"hljs-string\">\"price\"</span>)</span>\n                .order(SortOrder.DESC);\n\n        NativeSearchQuery query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NativeSearchQueryBuilder()</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Query(QueryBuilders.<span class=\"hljs-params\">boolQuery</span>()</span>.should(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QueryBuilders</span>.</span></span>fuzzy<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"360\"</span>)</span>))\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Pageable(<span class=\"hljs-params\">pageable</span>)</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">sortBuilder</span>)</span>\n                .build<span class=\"hljs-literal\">()</span>;\n        SearchHits&lt;Item&gt; search = elasticsearchRestTemplate.search(query, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(search.get<span class=\"hljs-constructor\">SearchHits()</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 高亮搜索\n     */</span>\n    @Test\n    public void highlight<span class=\"hljs-literal\">()</span> {\n        String preTag = <span class=\"hljs-string\">\"&lt;font color=\'red\'&gt;\"</span>;\n        String postTag = <span class=\"hljs-string\">\"&lt;/font&gt;\"</span>;\n\n        NativeSearchQuery query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NativeSearchQueryBuilder()</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Query(QueryBuilders.<span class=\"hljs-params\">matchQuery</span>(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"360\"</span>)</span>)\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">HighlightFields(<span class=\"hljs-params\">new</span> HighlightBuilder.Field(<span class=\"hljs-string\">\"title\"</span>)</span>\n                        .pre<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">preTag</span>)</span>\n                        .post<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">postTag</span>)</span>)\n                .build<span class=\"hljs-literal\">()</span>;\n        SearchHits&lt;Item&gt; searchHits = elasticsearchRestTemplate.search(query, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n\n        List&lt;SearchHit&lt;Item&gt;&gt; searchHitList = searchHits.get<span class=\"hljs-constructor\">SearchHits()</span>;\n        List&lt;Map&lt;String, Object&gt;&gt; hlList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;\n        for (SearchHit h : searchHitList) {\n\n            List&lt;String&gt; highlightField = h.get<span class=\"hljs-constructor\">HighlightField(<span class=\"hljs-string\">\"title\"</span>)</span>;\n            String nameValue = highlightField.get(<span class=\"hljs-number\">0</span>);\n            String originalJson = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSON</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">JSONString(<span class=\"hljs-params\">h</span>.<span class=\"hljs-params\">getContent</span>()</span>);\n            JsonParser jj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">GsonJsonParser()</span>;\n            Map&lt;String, Object&gt; myHighLight = jj.parse<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">originalJson</span>)</span>;\n            <span class=\"hljs-comment\">// 用高亮的搜索结果覆盖原字段值</span>\n            myHighLight.put(<span class=\"hljs-string\">\"title\"</span>, nameValue);\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(myHighLight);\n\n            hlList.add(myHighLight);\n        }\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(hlList);\n    }\n    <span class=\"hljs-comment\">/**\n     * 高亮搜索 排序加分页\n     */</span>\n    @Test\n    public void highlight1<span class=\"hljs-literal\">()</span> {\n        String preTag = <span class=\"hljs-string\">\"&lt;font color=\'red\'&gt;\"</span>;\n        String postTag = <span class=\"hljs-string\">\"&lt;/font&gt;\"</span>;\n        Pageable pageable = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PageRequest</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n        SortBuilder&lt;FieldSortBuilder&gt; sortBuilder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FieldSortBuilder(<span class=\"hljs-string\">\"price\"</span>)</span>\n                .order(SortOrder.DESC);\n        NativeSearchQuery query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NativeSearchQueryBuilder()</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Query(QueryBuilders.<span class=\"hljs-params\">fuzzyQuery</span>(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"360\"</span>)</span>)\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Pageable(<span class=\"hljs-params\">pageable</span>)</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">sortBuilder</span>)</span>\n                .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">HighlightFields(<span class=\"hljs-params\">new</span> HighlightBuilder.Field(<span class=\"hljs-string\">\"title\"</span>)</span>\n                        .pre<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">preTag</span>)</span>\n                        .post<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">postTag</span>)</span>)\n                .build<span class=\"hljs-literal\">()</span>;\n        SearchHits&lt;Item&gt; searchHits = elasticsearchRestTemplate.search(query, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Item</span>.</span></span><span class=\"hljs-keyword\">class</span>);\n\n        List&lt;SearchHit&lt;Item&gt;&gt; searchHitList = searchHits.get<span class=\"hljs-constructor\">SearchHits()</span>;\n        List&lt;Map&lt;String, Object&gt;&gt; hlList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;\n        for (SearchHit h : searchHitList) {\n\n            List&lt;String&gt; highlightField = h.get<span class=\"hljs-constructor\">HighlightField(<span class=\"hljs-string\">\"title\"</span>)</span>;\n            String nameValue = highlightField.get(<span class=\"hljs-number\">0</span>);\n            String originalJson = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSON</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">JSONString(<span class=\"hljs-params\">h</span>.<span class=\"hljs-params\">getContent</span>()</span>);\n            JsonParser jj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">GsonJsonParser()</span>;\n            Map&lt;String, Object&gt; myHighLight = jj.parse<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">originalJson</span>)</span>;\n            <span class=\"hljs-comment\">// 用高亮的搜索结果覆盖原字段值</span>\n            myHighLight.put(<span class=\"hljs-string\">\"title\"</span>, nameValue);\n            hlList.add(myHighLight);\n        }\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(hlList);\n    }\n}</code></pre><p><a href=\"https://blog.csdn.net/xiaozm1223/article/details/89210295\" target=\"_blank\"><font size=\"5\">QueryBuilder构造ES查询条件使用规则</font></a><br></p><p><font size=\"5\"><a href=\"https://blog.csdn.net/csdn_20150804/article/details/105618933\" target=\"_blank\">https://blog.csdn.net/csdn_20150804/article/details/105618933</a></font><br></p><p><font size=\"4\">第二种实现方式 RestHighLevelClient</font></p><pre type=\"Java\"><code>package comn.hy.<span class=\"hljs-keyword\">search</span>.service.impl;\n \n \n<span class=\"hljs-keyword\">import</span> com.hy.<span class=\"hljs-keyword\">search</span>.Stu;\n<span class=\"hljs-keyword\">import</span> com.hy.utils.JsonUtils;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">admin</span>.indices.<span class=\"hljs-keyword\">delete</span>.DeleteIndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.bulk.BulkRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.bulk.BulkResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">delete</span>.DeleteRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">delete</span>.DeleteResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">get</span>.GetRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">get</span>.GetResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">index</span>.IndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">index</span>.IndexResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">search</span>.SearchRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">search</span>.SearchResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">update</span>.UpdateRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.action.<span class=\"hljs-keyword\">update</span>.UpdateResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RequestOptions;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.indices.CreateIndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.indices.CreateIndexResponse;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.client.indices.GetIndexRequest;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.common.unit.TimeValue;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.common.xcontent.XContentType;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">index</span>.query.QueryBuilders;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">index</span>.query.TermQueryBuilder;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">search</span>.builder.SearchSourceBuilder;\n<span class=\"hljs-keyword\">import</span> org.elasticsearch.<span class=\"hljs-keyword\">search</span>.<span class=\"hljs-keyword\">fetch</span>.subphase.FetchSourceContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;\n \n<span class=\"hljs-keyword\">import</span> javax.annotation.Resource;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;\n@RestController\n<span class=\"hljs-built_in\">public</span> <span class=\"hljs-keyword\">class</span> TestServiceES {\n \n    @Resource\n    private RestHighLevelClient client;\n \n \n    <span class=\"hljs-comment\">/**\n     * 创建索引\n     * @throws IOException\n     */</span>\n    @PostMapping(\"create-index\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> createIndex() throws IOException {\n        CreateIndexRequest request = <span class=\"hljs-built_in\">new</span> CreateIndexRequest(\"user_index\");\n        CreateIndexResponse response = client.indices().<span class=\"hljs-keyword\">create</span>(request, RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 获取索引信息\n     * @throws IOException\n     */</span>\n    @GetMapping(\"query-index\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> queryIndex() throws IOException {\n        GetIndexRequest request = <span class=\"hljs-built_in\">new</span> GetIndexRequest(\"user_index\");\n \n        <span class=\"hljs-type\">boolean</span> b = client.indices().<span class=\"hljs-keyword\">exists</span>(request, RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(b);\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * 删除索引\n     * @throws IOException\n     */</span>\n   @DeleteMapping(\"delete-index\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> deleteIndex() throws IOException {\n        DeleteIndexRequest request = <span class=\"hljs-built_in\">new</span> DeleteIndexRequest(\"user_index\");\n        AcknowledgedResponse <span class=\"hljs-keyword\">delete</span> = client.indices().<span class=\"hljs-keyword\">delete</span>(request, RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-keyword\">delete</span>.isAcknowledged());\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 新增一个文档\n     * @throws IOException\n     */</span>\n    @PostMapping(\"add-doc\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> addDoc() throws IOException {\n \n        Stu stu = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10010</span>L, \"绝世风华\", <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        IndexRequest request = <span class=\"hljs-built_in\">new</span> IndexRequest(\"user_index\");\n        // 规则 put /test_index/_doc/<span class=\"hljs-number\">1</span>\n        request.id(\"1\");\n        request.timeout(<span class=\"hljs-built_in\">new</span> TimeValue(<span class=\"hljs-number\">60</span>, TimeUnit.SECONDS));\n        request.source(JsonUtils.objectToJson(stu),XContentType.JSON);\n        // 发送\n        IndexResponse response = client.<span class=\"hljs-keyword\">index</span>(request,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.toString());\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.status());\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 查询文档数据\n     * @throws IOException\n     */</span>\n    @GetMapping(\"query-doc\")\n    <span class=\"hljs-type\">void</span> queryDoc() throws IOException {\n        GetRequest request = <span class=\"hljs-built_in\">new</span> GetRequest(\"user_index\",\"1\");\n        request.fetchSourceContext(<span class=\"hljs-built_in\">new</span> FetchSourceContext(<span class=\"hljs-keyword\">false</span>));\n        request.storedFields(\"_none_\");\n \n        // 是否存在？？？\n        <span class=\"hljs-type\">boolean</span> b = client.<span class=\"hljs-keyword\">exists</span>(request,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(b);\n \n        // 获取\n        GetResponse response = client.<span class=\"hljs-keyword\">get</span>(request,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.getSourceAsString());\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 更新文檔\n     * @throws IOException\n     */</span>\n    @PutMapping(\"update-doc\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> updateDoc() throws IOException {\n        UpdateRequest updateRequest = <span class=\"hljs-built_in\">new</span> UpdateRequest(\"user_index\",\"1\");\n        updateRequest.timeout(\"1s\");\n        Stu stu = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10010</span>L, \"上善若水\", <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        updateRequest.doc(JsonUtils.objectToJson(stu),XContentType.JSON);\n \n        UpdateResponse response = client.<span class=\"hljs-keyword\">update</span>(updateRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n \n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.status());\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 删除文档\n     * @throws IOException\n     */</span>\n    @DeleteMapping(\"delete-doc\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> deleteDoc() throws IOException {\n        DeleteRequest deleteRequest = <span class=\"hljs-built_in\">new</span> DeleteRequest(\"user_index\",\"1\");\n        deleteRequest.timeout(\"1s\");\n        DeleteResponse response = client.<span class=\"hljs-keyword\">delete</span>(deleteRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.status());\n    }\n \n \n \n    <span class=\"hljs-comment\">/**\n     * 批量操作\n     * @throws IOException\n     */</span>\n    @PostMapping(\"bulk-operator\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> bulkOperator() throws IOException {\n        BulkRequest bulkRequest = <span class=\"hljs-built_in\">new</span> BulkRequest();\n        bulkRequest.timeout(\"15s\");\n \n        Stu stu0 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10010</span>L, \"诸天万界之起源传说\", <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        Stu stu1 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10011</span>L, \"寒夜\", <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">88.5</span>f, <span class=\"hljs-keyword\">true</span>);\n        Stu stu2 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10012</span>L, \"陌上千寻雪\", <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">96.5</span>f, <span class=\"hljs-keyword\">false</span>);\n        Stu stu3 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10013</span>L, \"可爱的漂亮的小哥哥\", <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">108.5</span>f, <span class=\"hljs-keyword\">false</span>);\n        Stu stu4 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10014</span>L, \"灵纪传说\", <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">108.6</span>f, <span class=\"hljs-keyword\">true</span>);\n        Stu stu5 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10015</span>L, \"狂剑天下之鸿蒙掌控\", <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">18.5</span>f, <span class=\"hljs-keyword\">false</span>);\n        Stu stu6 = <span class=\"hljs-built_in\">new</span> Stu(<span class=\"hljs-number\">10016</span>L, \"逆战次元\", <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">100.5</span>f, <span class=\"hljs-keyword\">true</span>);\n \n        ArrayList&lt;Stu&gt; stuList = <span class=\"hljs-built_in\">new</span> ArrayList&lt;&gt;();\n        stuList.<span class=\"hljs-keyword\">add</span>(stu0);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu1);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu2);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu3);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu4);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu5);\n        stuList.<span class=\"hljs-keyword\">add</span>(stu6);\n \n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i&lt;=stuList.size();i++){\n            bulkRequest.<span class=\"hljs-keyword\">add</span>(\n                    <span class=\"hljs-built_in\">new</span> IndexRequest(\"test.index\").\n                            id(\"\"+(i+<span class=\"hljs-number\">1</span>)).\n                            source(JsonUtils.objectToJson(stuList.<span class=\"hljs-keyword\">get</span>(i)), XContentType.JSON));\n        }\n        // 批量插入\n        BulkResponse response = client.bulk(bulkRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(response.hasFailures());\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * 条件查询\n     * @throws IOException\n     */</span>\n    @GetMapping(\"condition-search\")\n    <span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">void</span> conditionSearch() throws IOException {\n        SearchRequest searchRequest = <span class=\"hljs-built_in\">new</span> SearchRequest(\"user_index\");\n        // 构造条件\n        SearchSourceBuilder builder = <span class=\"hljs-built_in\">new</span>   SearchSourceBuilder();\n        // 精确匹配\n        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(\"name\",\"绝世风华\");\n \n        // 匹配全部 matchAllQuery();\n        builder.query(termQueryBuilder);\n \n        // 分页\n        builder.<span class=\"hljs-keyword\">from</span>(<span class=\"hljs-number\">0</span>);\n        builder.size(<span class=\"hljs-number\">10</span>);\n        builder.timeout(TimeValue.MINUS_ONE);\n        searchRequest.source(builder);\n        SearchResponse response = client.<span class=\"hljs-keyword\">search</span>(searchRequest,RequestOptions.<span class=\"hljs-keyword\">DEFAULT</span>);\n        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(JsonUtils.objectToJson(response.getHits()));\n \n        <span class=\"hljs-keyword\">for</span> (org.elasticsearch.<span class=\"hljs-keyword\">search</span>.SearchHit hit : response.getHits().getHits()) {\n            hit.getSourceAsMap().<span class=\"hljs-keyword\">get</span>(\"name\");\n        }\n    }\n}\n \n</code></pre><p><font size=\"5\">先执行创建索引</font><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201223172555456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font size=\"5\"><br></font></p><p><font size=\"5\">索引数据操作</font></p><pre type=\"Java\"><code>@RunWith(SpringRunner.class)\n@SpringBootTest(classes = BootApplication.class)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ceshiTest</span> {</span>\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> ItemRepository itemRepository;\n \n    <span class=\"hljs-comment\">/**\n     * @Description:定义新增方法\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">()</span> </span>{\n        Item item = <span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">\"小米手机7\"</span>, <span class=\"hljs-string\">\" 手机\"</span>,\n                <span class=\"hljs-string\">\"小米\"</span>, <span class=\"hljs-number\">3499.00</span>);\n        itemRepository.save(item);\n    }\n \n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:定义批量新增方法\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertList</span><span class=\"hljs-params\">()</span> </span>{\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">\"小米9\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"小米\"</span>, <span class=\"hljs-number\">3299.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">\"华为pro30\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"华为\"</span>, <span class=\"hljs-number\">3999.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">3L</span>, <span class=\"hljs-string\">\"一加7\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"一加\"</span>, <span class=\"hljs-number\">2999.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">4L</span>, <span class=\"hljs-string\">\"魅族16\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"魅族\"</span>, <span class=\"hljs-number\">1999.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">5L</span>, <span class=\"hljs-string\">\"苹果xs\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"苹果\"</span>, <span class=\"hljs-number\">5099.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">6L</span>, <span class=\"hljs-string\">\"360pro\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"360\"</span>, <span class=\"hljs-number\">1099.00</span>));\n        <span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-keyword\">new</span> Item(<span class=\"hljs-number\">7L</span>, <span class=\"hljs-string\">\"荣耀V10\"</span>, <span class=\"hljs-string\">\"手机\"</span>, <span class=\"hljs-string\">\"华为\"</span>, <span class=\"hljs-number\">899.00</span> ));\n        <span class=\"hljs-comment\">// 接收对象集合，实现批量新增</span>\n        itemRepository.save(<span class=\"hljs-built_in\">list</span>);\n    }\n    \n\n    \n    <span class=\"hljs-comment\">/**\n     * @Description:按照价格区间查询  自定义方法\n     * 自定义方法\n        Spring Data 的另一个强大功能，是根据方法名称自动实现功能。\n        比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。\n        当然，方法名称要符合一定的约定  下边为约定\n            And	findByNameAndPrice\n            Or	findByNameOrPrice\n            Is	findByName\n            Not	findByNameNot\n            Between	findByPriceBetween\n            LessThanEqual	findByPriceLessThan\n            GreaterThanEqual	findByPriceGreaterThan\n            Before	findByPriceBefore\n            After	findByPriceAfter\n            Like	findByNameLike\n            StartingWith	findByNameStartingWith\n            EndingWith	findByNameEndingWith\n            Contains/Containing	findByNameContaining\n            In	findByNameIn(Collection&lt;String&gt;names)\n            NotIn	findByNameNotIn(Collection&lt;String&gt;names)\n            Near	findByStoreNear\n            True	findByAvailableTrue\n            False	findByAvailableFalse\n            OrderBy	findByAvailableTrueOrderByNameDesc\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">queryByPriceBetween</span><span class=\"hljs-params\">()</span></span>{\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">this</span>.itemRepository.findByPriceBetween(<span class=\"hljs-number\">2000.00</span>, <span class=\"hljs-number\">3500.00</span>);\n        <span class=\"hljs-keyword\">for</span> (Item item : <span class=\"hljs-built_in\">list</span>) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"item = \"</span> + item.getTitle());\n        }\n    }\n \n \n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">queryByTitle</span><span class=\"hljs-params\">()</span></span>{\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">this</span>.itemRepository.findByTitle(<span class=\"hljs-string\">\"华为\"</span>);\n        <span class=\"hljs-keyword\">for</span> (Item item : <span class=\"hljs-built_in\">list</span>) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"item = \"</span> + item.getTitle());\n        }\n    }\n \n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">queryByTitleTo</span><span class=\"hljs-params\">()</span></span>{\n        Collection&lt;<span class=\"hljs-keyword\">String</span>&gt; ss =  <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        ss.add(<span class=\"hljs-string\">\"华为\"</span>);\n        ss.add(<span class=\"hljs-string\">\"小米\"</span>);\n        List&lt;Item&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">this</span>.itemRepository.findByTitleIn(ss);\n        <span class=\"hljs-keyword\">for</span> (Item item : <span class=\"hljs-built_in\">list</span>) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"item = \"</span> + item.getTitle());\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:matchQuery底层采用的是词条匹配查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testMatchQuery</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">// 构建查询条件</span>\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 添加基本分词查询</span>\n        queryBuilder.withQuery(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"华为\"</span>));\n        <span class=\"hljs-comment\">// 搜索，获取结果</span>\n        Page&lt;Item&gt; items = <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 总条数</span>\n        <span class=\"hljs-keyword\">long</span> total = items.getTotalElements();\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"获取的总条数 = \"</span> + total);\n        <span class=\"hljs-keyword\">for</span> (Item item : items) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是：\"</span>+item.getTitle());\n        }\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:\n     * termQuery:功能更强大，除了匹配字符串以外，还可以匹配\n     * int/long/double/float/....\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testTermQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        builder.withQuery(QueryBuilders.termQuery(<span class=\"hljs-string\">\"price\"</span>,<span class=\"hljs-number\">1099</span>));\n        <span class=\"hljs-comment\">// 查找</span>\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n \n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机是：\"</span>+item.getTitle());\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @Description:布尔查询  多条件查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testBooleanQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n \n        builder.withQuery(\n                QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"华为\"</span>))\n                        .must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"brand\"</span>,<span class=\"hljs-string\">\"华为\"</span>))\n        );\n \n        <span class=\"hljs-comment\">// 查找</span>\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是\"</span>+item.getTitle());\n        }\n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:布尔查询  多条件查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testBlQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n \n        builder.withQuery(\n                QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"荣耀\"</span>))\n                        .must(QueryBuilders.matchQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"华为\"</span>))\n        );\n \n        <span class=\"hljs-comment\">// 查找</span>\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是\"</span>+item.getTitle());\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @Description:模糊查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testFuzzyQuery</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder builder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        builder.withQuery(QueryBuilders.fuzzyQuery(<span class=\"hljs-string\">\"title\"</span>,<span class=\"hljs-string\">\"一\"</span>));\n        Page&lt;Item&gt; page = <span class=\"hljs-keyword\">this</span>.itemRepository.search(builder.build());\n        <span class=\"hljs-keyword\">for</span>(Item item:page){\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机名称是：\"</span>+item.getTitle());\n        }\n \n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:分页查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">searchByPage</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">// 构建查询条件</span>\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 添加基本分词查询</span>\n        queryBuilder.withQuery(QueryBuilders.termQuery(<span class=\"hljs-string\">\"category\"</span>, <span class=\"hljs-string\">\"手机\"</span>));\n        <span class=\"hljs-comment\">// 分页：</span>\n        <span class=\"hljs-keyword\">int</span> page = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span> = <span class=\"hljs-number\">2</span>;\n        queryBuilder.withPageable(PageRequest.of(page,<span class=\"hljs-built_in\">size</span>));\n \n        <span class=\"hljs-comment\">// 搜索，获取结果</span>\n        Page&lt;Item&gt; items = <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 总条数</span>\n        <span class=\"hljs-keyword\">long</span> total = items.getTotalElements();\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"总条数 = \"</span> + total);\n        <span class=\"hljs-comment\">// 总页数</span>\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"总页数 = \"</span> + items.getTotalPages());\n        <span class=\"hljs-comment\">// 当前页</span>\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"当前页：\"</span> + items.getNumber());\n        <span class=\"hljs-comment\">// 每页大小</span>\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"每页大小：\"</span> + items.getSize());\n \n        <span class=\"hljs-keyword\">for</span> (Item item : items) {\n            System.out.<span class=\"hljs-built_in\">println</span>(item.getTitle());\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:排序查询\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">searchAndSort</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">// 构建查询条件</span>\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 添加基本分词查询</span>\n        queryBuilder.withQuery(QueryBuilders.termQuery(<span class=\"hljs-string\">\"category\"</span>, <span class=\"hljs-string\">\"手机\"</span>));\n \n        <span class=\"hljs-comment\">// 排序</span>\n        queryBuilder.withSort(SortBuilders.fieldSort(<span class=\"hljs-string\">\"price\"</span>).order(SortOrder.DESC));\n \n        <span class=\"hljs-comment\">// 搜索，获取结果</span>\n        Page&lt;Item&gt; items = <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 总条数</span>\n        <span class=\"hljs-keyword\">long</span> total = items.getTotalElements();\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"总条数 = \"</span> + total);\n \n        <span class=\"hljs-keyword\">for</span> (Item item : items) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"手机的价格是：\"</span>+item.getTitle()+<span class=\"hljs-string\">\":\"</span>+item.getPrice());\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * @Description:按照品牌brand进行分组\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testAgg</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 不查询任何结果</span>\n        queryBuilder.withSourceFilter(<span class=\"hljs-keyword\">new</span> FetchSourceFilter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>[]{<span class=\"hljs-string\">\"\"</span>}, null));\n        <span class=\"hljs-comment\">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span>\n        queryBuilder.addAggregation(\n                AggregationBuilders.terms(<span class=\"hljs-string\">\"brands\"</span>).field(<span class=\"hljs-string\">\"brand\"</span>));\n        <span class=\"hljs-comment\">// 2、查询,需要把结果强转为AggregatedPage类型</span>\n        AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 3、解析</span>\n        <span class=\"hljs-comment\">// 3.1、从结果中取出名为brands的那个聚合，</span>\n        <span class=\"hljs-comment\">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span>\n        StringTerms agg = (StringTerms) aggPage.getAggregation(<span class=\"hljs-string\">\"brands\"</span>);\n        <span class=\"hljs-comment\">// 3.2、获取桶</span>\n        List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();\n        <span class=\"hljs-comment\">// 3.3、遍历</span>\n        <span class=\"hljs-keyword\">for</span> (StringTerms.Bucket bucket : buckets) {\n            <span class=\"hljs-comment\">// 3.4、获取桶中的key，即品牌名称</span>\n            System.out.<span class=\"hljs-built_in\">println</span>(bucket.getKeyAsString());\n            <span class=\"hljs-comment\">// 3.5、获取桶中的文档数量</span>\n            System.out.<span class=\"hljs-built_in\">println</span>(bucket.getDocCount());\n        }\n \n    }\n \n \n    <span class=\"hljs-comment\">/**\n     * @Description:嵌套聚合，求平均值\n     * @Author: https://blog.csdn.net/chen_2890\n     */</span>\n    @<span class=\"hljs-function\">Test\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testSubAgg</span><span class=\"hljs-params\">()</span></span>{\n        NativeSearchQueryBuilder queryBuilder = <span class=\"hljs-keyword\">new</span> NativeSearchQueryBuilder();\n        <span class=\"hljs-comment\">// 不查询任何结果</span>\n        queryBuilder.withSourceFilter(<span class=\"hljs-keyword\">new</span> FetchSourceFilter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>[]{<span class=\"hljs-string\">\"\"</span>}, null));\n        <span class=\"hljs-comment\">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span>\n        queryBuilder.addAggregation(\n                AggregationBuilders.terms(<span class=\"hljs-string\">\"brands\"</span>).field(<span class=\"hljs-string\">\"brand\"</span>)\n                        .subAggregation(AggregationBuilders.avg(<span class=\"hljs-string\">\"priceAvg\"</span>).field(<span class=\"hljs-string\">\"price\"</span>)) <span class=\"hljs-comment\">// 在品牌聚合桶内进行嵌套聚合，求平均值</span>\n        );\n        <span class=\"hljs-comment\">// 2、查询,需要把结果强转为AggregatedPage类型</span>\n        AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class=\"hljs-keyword\">this</span>.itemRepository.search(queryBuilder.build());\n        <span class=\"hljs-comment\">// 3、解析</span>\n        <span class=\"hljs-comment\">// 3.1、从结果中取出名为brands的那个聚合，</span>\n        <span class=\"hljs-comment\">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span>\n        StringTerms agg = (StringTerms) aggPage.getAggregation(<span class=\"hljs-string\">\"brands\"</span>);\n        <span class=\"hljs-comment\">// 3.2、获取桶</span>\n        List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();\n        <span class=\"hljs-comment\">// 3.3、遍历</span>\n        <span class=\"hljs-keyword\">for</span> (StringTerms.Bucket bucket : buckets) {\n            <span class=\"hljs-comment\">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span>\n            System.out.<span class=\"hljs-built_in\">println</span>(bucket.getKeyAsString() + <span class=\"hljs-string\">\"，共\"</span> + bucket.getDocCount() + <span class=\"hljs-string\">\"台\"</span>);\n \n            <span class=\"hljs-comment\">// 3.6.获取子聚合结果：</span>\n            InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-string\">\"priceAvg\"</span>);\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"平均售价：\"</span> + avg.getValue());\n        }\n    }\n}\n</code></pre>','1','0','1','1','1','2021-01-01 16:03:34','2021-01-01 16:03:34'),(13,'http://qiniu-picture.xiyanit.cn/FuTmQ6y-Qr73m3PJo4iJAX5Q_T4E','Vue发布nmp包','Vue,','Vue发布nmp包供其他人下载',12,0,0,'1',1,'<h5 style=\"line-height: 25px;margin: 15px 0;\"></h5><h1 id=\"tk0lj\">Vue发布nmp包供其他人下载</h1><h2 id=\"lqi0e\">1.注册地址 https://www.npmjs.com/</h2><img src=\"https://img-blog.csdnimg.cn/20201215095521961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br><h2 id=\"rmfnh\">2.注册好了之后创建一个vue项目，我这里就不演示了</h2><font size=\"4\" color=\"#7b5ba1\">package.json在你项目的根目录下，相关配置如下：</font><pre type=\"JSON\"><code>{\n    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"bright-comment\"</span>,\n    <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.5.7\"</span>,\n    <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"评论组件\"</span>,\n    <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"bright\"</span>,\n    <span class=\"hljs-comment\">// 这里设置你要输入的文件名字</span>\n    <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"dist/bright.comment.js\"</span>, \n    <span class=\"hljs-attr\">\"keywords\"</span>: [\n        <span class=\"hljs-string\">\"评论组件\"</span>\n    ],\n    <span class=\"hljs-attr\">\"scripts\"</span>: {\n        <span class=\"hljs-attr\">\"dev\"</span>: <span class=\"hljs-string\">\"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\"</span>,\n        <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"npm run dev\"</span>,\n        <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"webpack --display-error-details --config webpack.config.js\"</span>\n    },\n    <span class=\"hljs-attr\">\"dependencies\"</span>: {\n        <span class=\"hljs-attr\">\"element-ui\"</span>: <span class=\"hljs-string\">\"^2.12.0\"</span>,\n        <span class=\"hljs-attr\">\"vue\"</span>: <span class=\"hljs-string\">\"^2.5.2\"</span>,\n        <span class=\"hljs-attr\">\"vue-router\"</span>: <span class=\"hljs-string\">\"^3.0.1\"</span>\n    },\n    <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n        <span class=\"hljs-attr\">\"autoprefixer\"</span>: <span class=\"hljs-string\">\"^7.1.2\"</span>,\n        <span class=\"hljs-attr\">\"babel-core\"</span>: <span class=\"hljs-string\">\"^6.22.1\"</span>,\n        <span class=\"hljs-attr\">\"babel-helper-vue-jsx-merge-props\"</span>: <span class=\"hljs-string\">\"^2.0.3\"</span>,\n        <span class=\"hljs-attr\">\"babel-loader\"</span>: <span class=\"hljs-string\">\"^7.1.1\"</span>,\n        <span class=\"hljs-attr\">\"babel-plugin-syntax-jsx\"</span>: <span class=\"hljs-string\">\"^6.18.0\"</span>,\n        <span class=\"hljs-attr\">\"babel-plugin-transform-runtime\"</span>: <span class=\"hljs-string\">\"^6.22.0\"</span>,\n        <span class=\"hljs-attr\">\"babel-plugin-transform-vue-jsx\"</span>: <span class=\"hljs-string\">\"^3.5.0\"</span>,\n        <span class=\"hljs-attr\">\"babel-preset-env\"</span>: <span class=\"hljs-string\">\"^1.3.2\"</span>,\n        <span class=\"hljs-attr\">\"babel-preset-stage-2\"</span>: <span class=\"hljs-string\">\"^6.22.0\"</span>,\n        <span class=\"hljs-attr\">\"chalk\"</span>: <span class=\"hljs-string\">\"^2.0.1\"</span>,\n        <span class=\"hljs-attr\">\"copy-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^4.0.1\"</span>,\n        <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^0.28.0\"</span>,\n        <span class=\"hljs-attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^3.0.0\"</span>,\n        <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^1.1.4\"</span>,\n        <span class=\"hljs-attr\">\"friendly-errors-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^1.6.1\"</span>,\n        <span class=\"hljs-attr\">\"html-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^2.30.1\"</span>,\n        <span class=\"hljs-attr\">\"node-notifier\"</span>: <span class=\"hljs-string\">\"^5.1.2\"</span>,\n        <span class=\"hljs-attr\">\"optimize-css-assets-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^3.2.0\"</span>,\n        <span class=\"hljs-attr\">\"ora\"</span>: <span class=\"hljs-string\">\"^1.2.0\"</span>,\n        <span class=\"hljs-attr\">\"portfinder\"</span>: <span class=\"hljs-string\">\"^1.0.13\"</span>,\n        <span class=\"hljs-attr\">\"postcss-import\"</span>: <span class=\"hljs-string\">\"^11.0.0\"</span>,\n        <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^2.0.8\"</span>,\n        <span class=\"hljs-attr\">\"postcss-url\"</span>: <span class=\"hljs-string\">\"^7.2.1\"</span>,\n        <span class=\"hljs-attr\">\"rimraf\"</span>: <span class=\"hljs-string\">\"^2.6.0\"</span>,\n        <span class=\"hljs-attr\">\"semver\"</span>: <span class=\"hljs-string\">\"^5.3.0\"</span>,\n        <span class=\"hljs-attr\">\"shelljs\"</span>: <span class=\"hljs-string\">\"^0.7.6\"</span>,\n        <span class=\"hljs-attr\">\"uglifyjs-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^1.1.1\"</span>,\n        <span class=\"hljs-attr\">\"url-loader\"</span>: <span class=\"hljs-string\">\"^0.5.8\"</span>,\n        <span class=\"hljs-attr\">\"vue-loader\"</span>: <span class=\"hljs-string\">\"^13.3.0\"</span>,\n        <span class=\"hljs-attr\">\"vue-style-loader\"</span>: <span class=\"hljs-string\">\"^3.0.1\"</span>,\n        <span class=\"hljs-attr\">\"vue-template-compiler\"</span>: <span class=\"hljs-string\">\"^2.5.2\"</span>,\n        <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^3.6.0\"</span>,\n        <span class=\"hljs-attr\">\"webpack-bundle-analyzer\"</span>: <span class=\"hljs-string\">\"^2.9.0\"</span>,\n        <span class=\"hljs-attr\">\"webpack-dev-server\"</span>: <span class=\"hljs-string\">\"^2.9.1\"</span>,\n        <span class=\"hljs-attr\">\"webpack-merge\"</span>: <span class=\"hljs-string\">\"^4.1.0\"</span>\n    },\n    <span class=\"hljs-attr\">\"engines\"</span>: {\n        <span class=\"hljs-attr\">\"node\"</span>: <span class=\"hljs-string\">\"&gt;= 6.0.0\"</span>,\n        <span class=\"hljs-attr\">\"npm\"</span>: <span class=\"hljs-string\">\"&gt;= 3.0.0\"</span>\n    },\n    <span class=\"hljs-attr\">\"browserslist\"</span>: [\n        <span class=\"hljs-string\">\"&gt; 1%\"</span>,\n        <span class=\"hljs-string\">\"last 2 versions\"</span>,\n        <span class=\"hljs-string\">\"not ie &lt;= 8\"</span>\n    ]\n}\n</code></pre><h2>2.在src下创建上面配置的index.js文件，主要用于导出我们的组件</h2><pre type=\"JavaScript\"><code>import comment <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./components/Comment.vue\'</span>\n<span class=\"hljs-builtin-name\">export</span><span class=\"hljs-built_in\"> default </span>comment</code></pre><h2 id=\"u9mqn\">3、打包相关配置文件webpack.config.js</h2><font size=\"4\" color=\"#f9963b\">webpack.config.js配置文件需要在根目录下创建，然后添加以下配置</font><p><img src=\"https://img-blog.csdnimg.cn/2020121510010018.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font size=\"4\" color=\"#f9963b\"><br></font></p><pre type=\"JavaScript\"><code>const path = require(<span class=\"hljs-string\">\"path\"</span>);\nconst webpack = require(<span class=\"hljs-string\">\"webpack\"</span>);\nconst uglify = require(<span class=\"hljs-string\">\"uglifyjs-webpack-plugin\"</span>);\n\nmodule.exports = {\n<span class=\"hljs-symbol\">    entry:</span> <span class=\"hljs-string\">\"./src/index.js\"</span>, <span class=\"hljs-comment\">//入口文件，src下的index.js</span>\n<span class=\"hljs-symbol\">    output:</span> {\n<span class=\"hljs-symbol\">        path:</span> path.resolve(__dirname, <span class=\"hljs-string\">\"./dist\"</span>), <span class=\"hljs-comment\">//输出路径dist目录</span>\n<span class=\"hljs-symbol\">        publicPath:</span> <span class=\"hljs-string\">\"/dist/\"</span>, <span class=\"hljs-comment\">//打包后输出路径      与package.json中main路径对应</span>\n<span class=\"hljs-symbol\">        filename:</span> <span class=\"hljs-string\">\"bright.comment.js\"</span>, <span class=\"hljs-comment\">//打包后输出的文件名 与package.json中main文件名对应  main应该为:\'dist/comment.js\'</span>\n<span class=\"hljs-symbol\">        libraryTarget:</span> <span class=\"hljs-string\">\"umd\"</span>, <span class=\"hljs-comment\">//使打包格式支持多种使用场景</span>\n<span class=\"hljs-symbol\">        umdNamedDefine:</span> true\n    },\n<span class=\"hljs-symbol\">\n    module:</span> {\n<span class=\"hljs-symbol\">        rules:</span> [{\n<span class=\"hljs-symbol\">                test:</span> /\\.vue$/,\n<span class=\"hljs-symbol\">                loader:</span> <span class=\"hljs-string\">\"vue-loader\"</span>\n            },\n            {\n<span class=\"hljs-symbol\">                test:</span> /\\.scss$/,\n<span class=\"hljs-symbol\">                use:</span> [{\n<span class=\"hljs-symbol\">                        loader:</span> <span class=\"hljs-string\">\"style-loader\"</span>\n                    },\n                    {\n<span class=\"hljs-symbol\">                        loader:</span> <span class=\"hljs-string\">\"css-loader\"</span>\n                    },\n                    {\n<span class=\"hljs-symbol\">                        loader:</span> <span class=\"hljs-string\">\"scss-loader\"</span>\n                    }\n                ]\n            },\n            {\n<span class=\"hljs-symbol\">                test:</span> /\\.js$/,\n<span class=\"hljs-symbol\">                exclude:</span> /node_modules/,\n<span class=\"hljs-symbol\">                loader:</span> <span class=\"hljs-string\">\"babel-loader\"</span> <span class=\"hljs-comment\">//babel的相关配置在.babelrc文件里</span>\n            },\n            {\n<span class=\"hljs-symbol\">                test:</span> /\\.(png|jpg|gif|ttf|svg|woff|eot)$/,\n<span class=\"hljs-symbol\">                loader:</span> <span class=\"hljs-string\">\"url-loader\"</span>,\n<span class=\"hljs-symbol\">                query:</span> {\n<span class=\"hljs-symbol\">                    limit:</span> <span class=\"hljs-number\">30000</span> <span class=\"hljs-comment\">//把一些小图片打包为base64</span>\n                }\n            }\n        ]\n    },\n<span class=\"hljs-symbol\">    plugins:</span> [\n        <span class=\"hljs-comment\">//压缩js代码</span>\n        new webpack.optimize.UglifyJsPlugin({\n            <span class=\"hljs-comment\">//输出不显示警告</span>\n<span class=\"hljs-symbol\">            compress:</span> {\n<span class=\"hljs-symbol\">                warnings:</span> false <span class=\"hljs-comment\">//默认值</span>\n            },\n            <span class=\"hljs-comment\">//输出去掉注释</span>\n<span class=\"hljs-symbol\">            output:</span> {\n<span class=\"hljs-symbol\">                comments:</span> false <span class=\"hljs-comment\">//默认值</span>\n            }\n        })\n    ]\n};\n</code></pre><h2 id=\"kyl8s\">4、使用如下命令进行构建，生成需要发布的文件</h2><pre type=\"Shell Session\"><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span></code></pre><h3 id=\"vxndr\">一.命令执行完成之后会发现在dist目录下生成了comment.js文件，如下图</h3><p><img src=\"https://img-blog.csdnimg.cn/20201215100319128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h3 id=\"qxp2e\">二、发布npm包</h3><font size=\"4\">首先登陆npm</font><br><pre type=\"Shell Session\"><code><span class=\"hljs-built_in\">npm</span> login</code></pre><p><font size=\"4\">按提示输入账号和密码等信息进行登录，登录成功后如下图：</font><br><img src=\"https://img-blog.csdnimg.cn/20201215100531761.png\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">那么需要先安装publish然后再发布：</font><br></p><pre type=\"Shell Session\"><code>npm <span class=\"hljs-keyword\">install</span> -g pubish</code></pre><p>发布成功之后会显示名称和版本号，如下图：</p><p><img src=\"https://img-blog.csdnimg.cn/20201215100544183.png\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"5\">注意出现403文件解决 （赋予权限）</font><br></p><pre type=\"Shell Session\"><code>npm publish --<span class=\"hljs-keyword\">access</span>=<span class=\"hljs-keyword\">public</span></code></pre><p><font size=\"4\">删除npm包</font><br></p><pre type=\"Shell Session\"><code>npm unpublish --force <span class=\"hljs-comment\">//强制删除</span>\n\nnpm unpublish <span class=\"hljs-symbol\">guitest@</span><span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-comment\">//指定版本号</span>\n\nnpm deprecate <span class=\"hljs-comment\">//某些情况</span></code></pre>','<h5 style=\"line-height: 25px;margin: 15px 0;\"></h5><h1 id=\"tk0lj\">Vue发布nmp包供其他人下载</h1><h2 id=\"lqi0e\">1.注册地址 https://www.npmjs.com/</h2><img src=\"https://img-blog.csdnimg.cn/20201215095521961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br><h2 id=\"rmfnh\">2.注册好了之后创建一个vue项目，我这里就不演示了</h2><font size=\"4\" color=\"#7b5ba1\">package.json在你项目的根目录下，相关配置如下：</font><pre type=\"JSON\"><code>{\n    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"bright-comment\"</span>,\n    <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.5.7\"</span>,\n    <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"评论组件\"</span>,\n    <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"bright\"</span>,\n    <span class=\"hljs-comment\">// 这里设置你要输入的文件名字</span>\n    <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"dist/bright.comment.js\"</span>, \n    <span class=\"hljs-attr\">\"keywords\"</span>: [\n        <span class=\"hljs-string\">\"评论组件\"</span>\n    ],\n    <span class=\"hljs-attr\">\"scripts\"</span>: {\n        <span class=\"hljs-attr\">\"dev\"</span>: <span class=\"hljs-string\">\"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\"</span>,\n        <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"npm run dev\"</span>,\n        <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"webpack --display-error-details --config webpack.config.js\"</span>\n    },\n    <span class=\"hljs-attr\">\"dependencies\"</span>: {\n        <span class=\"hljs-attr\">\"element-ui\"</span>: <span class=\"hljs-string\">\"^2.12.0\"</span>,\n        <span class=\"hljs-attr\">\"vue\"</span>: <span class=\"hljs-string\">\"^2.5.2\"</span>,\n        <span class=\"hljs-attr\">\"vue-router\"</span>: <span class=\"hljs-string\">\"^3.0.1\"</span>\n    },\n    <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n        <span class=\"hljs-attr\">\"autoprefixer\"</span>: <span class=\"hljs-string\">\"^7.1.2\"</span>,\n        <span class=\"hljs-attr\">\"babel-core\"</span>: <span class=\"hljs-string\">\"^6.22.1\"</span>,\n        <span class=\"hljs-attr\">\"babel-helper-vue-jsx-merge-props\"</span>: <span class=\"hljs-string\">\"^2.0.3\"</span>,\n        <span class=\"hljs-attr\">\"babel-loader\"</span>: <span class=\"hljs-string\">\"^7.1.1\"</span>,\n        <span class=\"hljs-attr\">\"babel-plugin-syntax-jsx\"</span>: <span class=\"hljs-string\">\"^6.18.0\"</span>,\n        <span class=\"hljs-attr\">\"babel-plugin-transform-runtime\"</span>: <span class=\"hljs-string\">\"^6.22.0\"</span>,\n        <span class=\"hljs-attr\">\"babel-plugin-transform-vue-jsx\"</span>: <span class=\"hljs-string\">\"^3.5.0\"</span>,\n        <span class=\"hljs-attr\">\"babel-preset-env\"</span>: <span class=\"hljs-string\">\"^1.3.2\"</span>,\n        <span class=\"hljs-attr\">\"babel-preset-stage-2\"</span>: <span class=\"hljs-string\">\"^6.22.0\"</span>,\n        <span class=\"hljs-attr\">\"chalk\"</span>: <span class=\"hljs-string\">\"^2.0.1\"</span>,\n        <span class=\"hljs-attr\">\"copy-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^4.0.1\"</span>,\n        <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^0.28.0\"</span>,\n        <span class=\"hljs-attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^3.0.0\"</span>,\n        <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^1.1.4\"</span>,\n        <span class=\"hljs-attr\">\"friendly-errors-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^1.6.1\"</span>,\n        <span class=\"hljs-attr\">\"html-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^2.30.1\"</span>,\n        <span class=\"hljs-attr\">\"node-notifier\"</span>: <span class=\"hljs-string\">\"^5.1.2\"</span>,\n        <span class=\"hljs-attr\">\"optimize-css-assets-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^3.2.0\"</span>,\n        <span class=\"hljs-attr\">\"ora\"</span>: <span class=\"hljs-string\">\"^1.2.0\"</span>,\n        <span class=\"hljs-attr\">\"portfinder\"</span>: <span class=\"hljs-string\">\"^1.0.13\"</span>,\n        <span class=\"hljs-attr\">\"postcss-import\"</span>: <span class=\"hljs-string\">\"^11.0.0\"</span>,\n        <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^2.0.8\"</span>,\n        <span class=\"hljs-attr\">\"postcss-url\"</span>: <span class=\"hljs-string\">\"^7.2.1\"</span>,\n        <span class=\"hljs-attr\">\"rimraf\"</span>: <span class=\"hljs-string\">\"^2.6.0\"</span>,\n        <span class=\"hljs-attr\">\"semver\"</span>: <span class=\"hljs-string\">\"^5.3.0\"</span>,\n        <span class=\"hljs-attr\">\"shelljs\"</span>: <span class=\"hljs-string\">\"^0.7.6\"</span>,\n        <span class=\"hljs-attr\">\"uglifyjs-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^1.1.1\"</span>,\n        <span class=\"hljs-attr\">\"url-loader\"</span>: <span class=\"hljs-string\">\"^0.5.8\"</span>,\n        <span class=\"hljs-attr\">\"vue-loader\"</span>: <span class=\"hljs-string\">\"^13.3.0\"</span>,\n        <span class=\"hljs-attr\">\"vue-style-loader\"</span>: <span class=\"hljs-string\">\"^3.0.1\"</span>,\n        <span class=\"hljs-attr\">\"vue-template-compiler\"</span>: <span class=\"hljs-string\">\"^2.5.2\"</span>,\n        <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^3.6.0\"</span>,\n        <span class=\"hljs-attr\">\"webpack-bundle-analyzer\"</span>: <span class=\"hljs-string\">\"^2.9.0\"</span>,\n        <span class=\"hljs-attr\">\"webpack-dev-server\"</span>: <span class=\"hljs-string\">\"^2.9.1\"</span>,\n        <span class=\"hljs-attr\">\"webpack-merge\"</span>: <span class=\"hljs-string\">\"^4.1.0\"</span>\n    },\n    <span class=\"hljs-attr\">\"engines\"</span>: {\n        <span class=\"hljs-attr\">\"node\"</span>: <span class=\"hljs-string\">\"&gt;= 6.0.0\"</span>,\n        <span class=\"hljs-attr\">\"npm\"</span>: <span class=\"hljs-string\">\"&gt;= 3.0.0\"</span>\n    },\n    <span class=\"hljs-attr\">\"browserslist\"</span>: [\n        <span class=\"hljs-string\">\"&gt; 1%\"</span>,\n        <span class=\"hljs-string\">\"last 2 versions\"</span>,\n        <span class=\"hljs-string\">\"not ie &lt;= 8\"</span>\n    ]\n}\n</code></pre><h2>2.在src下创建上面配置的index.js文件，主要用于导出我们的组件</h2><pre type=\"JavaScript\"><code>import comment <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./components/Comment.vue\'</span>\n<span class=\"hljs-builtin-name\">export</span><span class=\"hljs-built_in\"> default </span>comment</code></pre><h2 id=\"u9mqn\">3、打包相关配置文件webpack.config.js</h2><font size=\"4\" color=\"#f9963b\">webpack.config.js配置文件需要在根目录下创建，然后添加以下配置</font><p><img src=\"https://img-blog.csdnimg.cn/2020121510010018.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font size=\"4\" color=\"#f9963b\"><br></font></p><pre type=\"JavaScript\"><code>const path = require(<span class=\"hljs-string\">\"path\"</span>);\nconst webpack = require(<span class=\"hljs-string\">\"webpack\"</span>);\nconst uglify = require(<span class=\"hljs-string\">\"uglifyjs-webpack-plugin\"</span>);\n\nmodule.exports = {\n<span class=\"hljs-symbol\">    entry:</span> <span class=\"hljs-string\">\"./src/index.js\"</span>, <span class=\"hljs-comment\">//入口文件，src下的index.js</span>\n<span class=\"hljs-symbol\">    output:</span> {\n<span class=\"hljs-symbol\">        path:</span> path.resolve(__dirname, <span class=\"hljs-string\">\"./dist\"</span>), <span class=\"hljs-comment\">//输出路径dist目录</span>\n<span class=\"hljs-symbol\">        publicPath:</span> <span class=\"hljs-string\">\"/dist/\"</span>, <span class=\"hljs-comment\">//打包后输出路径      与package.json中main路径对应</span>\n<span class=\"hljs-symbol\">        filename:</span> <span class=\"hljs-string\">\"bright.comment.js\"</span>, <span class=\"hljs-comment\">//打包后输出的文件名 与package.json中main文件名对应  main应该为:\'dist/comment.js\'</span>\n<span class=\"hljs-symbol\">        libraryTarget:</span> <span class=\"hljs-string\">\"umd\"</span>, <span class=\"hljs-comment\">//使打包格式支持多种使用场景</span>\n<span class=\"hljs-symbol\">        umdNamedDefine:</span> true\n    },\n<span class=\"hljs-symbol\">\n    module:</span> {\n<span class=\"hljs-symbol\">        rules:</span> [{\n<span class=\"hljs-symbol\">                test:</span> /\\.vue$/,\n<span class=\"hljs-symbol\">                loader:</span> <span class=\"hljs-string\">\"vue-loader\"</span>\n            },\n            {\n<span class=\"hljs-symbol\">                test:</span> /\\.scss$/,\n<span class=\"hljs-symbol\">                use:</span> [{\n<span class=\"hljs-symbol\">                        loader:</span> <span class=\"hljs-string\">\"style-loader\"</span>\n                    },\n                    {\n<span class=\"hljs-symbol\">                        loader:</span> <span class=\"hljs-string\">\"css-loader\"</span>\n                    },\n                    {\n<span class=\"hljs-symbol\">                        loader:</span> <span class=\"hljs-string\">\"scss-loader\"</span>\n                    }\n                ]\n            },\n            {\n<span class=\"hljs-symbol\">                test:</span> /\\.js$/,\n<span class=\"hljs-symbol\">                exclude:</span> /node_modules/,\n<span class=\"hljs-symbol\">                loader:</span> <span class=\"hljs-string\">\"babel-loader\"</span> <span class=\"hljs-comment\">//babel的相关配置在.babelrc文件里</span>\n            },\n            {\n<span class=\"hljs-symbol\">                test:</span> /\\.(png|jpg|gif|ttf|svg|woff|eot)$/,\n<span class=\"hljs-symbol\">                loader:</span> <span class=\"hljs-string\">\"url-loader\"</span>,\n<span class=\"hljs-symbol\">                query:</span> {\n<span class=\"hljs-symbol\">                    limit:</span> <span class=\"hljs-number\">30000</span> <span class=\"hljs-comment\">//把一些小图片打包为base64</span>\n                }\n            }\n        ]\n    },\n<span class=\"hljs-symbol\">    plugins:</span> [\n        <span class=\"hljs-comment\">//压缩js代码</span>\n        new webpack.optimize.UglifyJsPlugin({\n            <span class=\"hljs-comment\">//输出不显示警告</span>\n<span class=\"hljs-symbol\">            compress:</span> {\n<span class=\"hljs-symbol\">                warnings:</span> false <span class=\"hljs-comment\">//默认值</span>\n            },\n            <span class=\"hljs-comment\">//输出去掉注释</span>\n<span class=\"hljs-symbol\">            output:</span> {\n<span class=\"hljs-symbol\">                comments:</span> false <span class=\"hljs-comment\">//默认值</span>\n            }\n        })\n    ]\n};\n</code></pre><h2 id=\"kyl8s\">4、使用如下命令进行构建，生成需要发布的文件</h2><pre type=\"Shell Session\"><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span></code></pre><h3 id=\"vxndr\">一.命令执行完成之后会发现在dist目录下生成了comment.js文件，如下图</h3><p><img src=\"https://img-blog.csdnimg.cn/20201215100319128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h3 id=\"qxp2e\">二、发布npm包</h3><font size=\"4\">首先登陆npm</font><br><pre type=\"Shell Session\"><code><span class=\"hljs-built_in\">npm</span> login</code></pre><p><font size=\"4\">按提示输入账号和密码等信息进行登录，登录成功后如下图：</font><br><img src=\"https://img-blog.csdnimg.cn/20201215100531761.png\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">那么需要先安装publish然后再发布：</font><br></p><pre type=\"Shell Session\"><code>npm <span class=\"hljs-keyword\">install</span> -g pubish</code></pre><p>发布成功之后会显示名称和版本号，如下图：</p><p><img src=\"https://img-blog.csdnimg.cn/20201215100544183.png\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"5\">注意出现403文件解决 （赋予权限）</font><br></p><pre type=\"Shell Session\"><code>npm publish --<span class=\"hljs-keyword\">access</span>=<span class=\"hljs-keyword\">public</span></code></pre><p><font size=\"4\">删除npm包</font><br></p><pre type=\"Shell Session\"><code>npm unpublish --force <span class=\"hljs-comment\">//强制删除</span>\n\nnpm unpublish <span class=\"hljs-symbol\">guitest@</span><span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-comment\">//指定版本号</span>\n\nnpm deprecate <span class=\"hljs-comment\">//某些情况</span></code></pre>','1','4','1','1','1','2021-01-01 16:50:20','2021-01-01 16:51:49'),(14,'http://qiniu-picture.xiyanit.cn/FvprHmkCii1_cY4puoZwktcLPKwc','vue评论回复组件','Vue,','vue评论回复组件',20,0,0,'1',1,' <h2>vue评论组件</h2><h2><img src=\"https://img-blog.csdnimg.cn/20201215094223128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></h2><p><img src=\"https://img-blog.csdnimg.cn/20201215094329858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p><h2>1.使用下面命令下载bright-comment组件</h2><pre type=\"Shell Session\"><code><span class=\"hljs-built_in\">npm</span> i bright-comment</code></pre><p><br></p><h2>2、下载完成之后在项目中引入</h2><pre type=\"Shell Session\"><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">comment</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'bright-comment\'</span>\ncomponents:{\n<span class=\"hljs-keyword\">comment</span>\n},</code></pre><h2>3、使用</h2><pre type=\"Shell Session\"><code><span class=\"hljs-section\">&lt;comment&gt;</span><span class=\"hljs-section\">&lt;/comment&gt;</span></code></pre><p><br></p><h2>4、如果没有下载element-ui的使用下面命令进行下载</h2><pre type=\"Shell Session\"><code><span class=\"hljs-built_in\">npm</span> i element-ui -S</code></pre><p><br></p><h2>5、下载完成后在main.js中引入</h2><pre type=\"Shell Session\"><code><span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>\nVue.use(ElementUI);</code></pre><p><br></p><h2>三、属性及事件</h2><table><tbody><tr><th>名称</th><th>类型</th><th>说明</th><th>默认值</th></tr><tr><td>avatar</td><td><p>String</p></td><td>头像</td><td>空</td></tr><tr><td>placeholder</td><td><p>String</p></td><td>文本框提示内容</td><td>在此输入评论内容</td></tr><tr><td>minRows</td><td><p>Number</p></td><td>文本框最小行数</td><td>4</td></tr><tr><td>maxRowsNumbe</td><td><p>Number</p></td><td>文本框最大行数</td><td>8</td></tr><tr><td>commentNum</td><td><p>Number</p></td><td>评论条数</td><td>2</td></tr><tr><td>authorId</td><td><p>Number</p></td><td>当前登录用户id</td><td>1</td></tr><tr><td>label</td><td><p>String</p></td><td><p>标签名&nbsp;</p></td><td>作者</td></tr><tr><td>commentWidth</td><td><p>String</p></td><td>文本框宽度</td><td>80%</td></tr><tr><td><p>commentList</p></td><td><p>Array</p></td><td>评论列表</td><td>包含内容较多，此处略</td></tr></tbody></table><p>评论列表commentList 包含多个评论comment，关于comment相关字段如下：<br></p><table><tbody><tr><th>名称</th><th>类型</th><th>说明</th></tr><tr><td>id</td><td>Number</td><td>评论id</td></tr><tr><td>commentUser</td><td>Object</td><td>评论用户</td></tr><tr><td>targetUser</td><td>Object</td><td>被评论用户</td></tr><tr><td>content</td><td>String</td><td>评论内容</td></tr><tr><td>createDate</td><td>String</td><td>评论时间</td></tr><tr><td>childrenList</td><td>Array</td><td>子评论列表</td></tr></tbody></table><p><br></p><h2>3、用户包含字段</h2><table><tbody><tr><th>名称</th><th>类型</th><th>说明</th></tr><tr><td>id</td><td>Number</td><td>用户id</td></tr><tr><td>nickName</td><td>String</td><td>用户昵称</td></tr><tr><td>avatar</td><td>String</td><td>用户头像</td></tr></tbody></table><p>用户头像<br></p><h3></h3><h3>4、Events事件</h3><p></p><table><tbody><tr><th>名称</th><th>说明</th><th>参数</th></tr><tr><td>doSend(content)</td><td>初始文本框发送事件</td><td>评论内容</td></tr><tr><td>doChidSend(content,bid,pid)</td><td>评论列表中文本框发送事件</td><td>评论内容,被评论用户id,父级评论id</td></tr></tbody></table>',' <h2>vue评论组件</h2><h2><img src=\"https://img-blog.csdnimg.cn/20201215094223128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></h2><p><img src=\"https://img-blog.csdnimg.cn/20201215094329858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p><h2>1.使用下面命令下载bright-comment组件</h2><pre type=\"Shell Session\"><code><span class=\"hljs-built_in\">npm</span> i bright-comment</code></pre><p><br></p><h2>2、下载完成之后在项目中引入</h2><pre type=\"Shell Session\"><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">comment</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'bright-comment\'</span>\ncomponents:{\n<span class=\"hljs-keyword\">comment</span>\n},</code></pre><h2>3、使用</h2><pre type=\"Shell Session\"><code><span class=\"hljs-section\">&lt;comment&gt;</span><span class=\"hljs-section\">&lt;/comment&gt;</span></code></pre><p><br></p><h2>4、如果没有下载element-ui的使用下面命令进行下载</h2><pre type=\"Shell Session\"><code><span class=\"hljs-built_in\">npm</span> i element-ui -S</code></pre><p><br></p><h2>5、下载完成后在main.js中引入</h2><pre type=\"Shell Session\"><code><span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>\nVue.use(ElementUI);</code></pre><p><br></p><h2>三、属性及事件</h2><table><tbody><tr><th>名称</th><th>类型</th><th>说明</th><th>默认值</th></tr><tr><td>avatar</td><td><p>String</p></td><td>头像</td><td>空</td></tr><tr><td>placeholder</td><td><p>String</p></td><td>文本框提示内容</td><td>在此输入评论内容</td></tr><tr><td>minRows</td><td><p>Number</p></td><td>文本框最小行数</td><td>4</td></tr><tr><td>maxRowsNumbe</td><td><p>Number</p></td><td>文本框最大行数</td><td>8</td></tr><tr><td>commentNum</td><td><p>Number</p></td><td>评论条数</td><td>2</td></tr><tr><td>authorId</td><td><p>Number</p></td><td>当前登录用户id</td><td>1</td></tr><tr><td>label</td><td><p>String</p></td><td><p>标签名&nbsp;</p></td><td>作者</td></tr><tr><td>commentWidth</td><td><p>String</p></td><td>文本框宽度</td><td>80%</td></tr><tr><td><p>commentList</p></td><td><p>Array</p></td><td>评论列表</td><td>包含内容较多，此处略</td></tr></tbody></table><p>评论列表commentList 包含多个评论comment，关于comment相关字段如下：<br></p><table><tbody><tr><th>名称</th><th>类型</th><th>说明</th></tr><tr><td>id</td><td>Number</td><td>评论id</td></tr><tr><td>commentUser</td><td>Object</td><td>评论用户</td></tr><tr><td>targetUser</td><td>Object</td><td>被评论用户</td></tr><tr><td>content</td><td>String</td><td>评论内容</td></tr><tr><td>createDate</td><td>String</td><td>评论时间</td></tr><tr><td>childrenList</td><td>Array</td><td>子评论列表</td></tr></tbody></table><p><br></p><h2>3、用户包含字段</h2><table><tbody><tr><th>名称</th><th>类型</th><th>说明</th></tr><tr><td>id</td><td>Number</td><td>用户id</td></tr><tr><td>nickName</td><td>String</td><td>用户昵称</td></tr><tr><td>avatar</td><td>String</td><td>用户头像</td></tr></tbody></table><p>用户头像<br></p><h3></h3><h3>4、Events事件</h3><p></p><table><tbody><tr><th>名称</th><th>说明</th><th>参数</th></tr><tr><td>doSend(content)</td><td>初始文本框发送事件</td><td>评论内容</td></tr><tr><td>doChidSend(content,bid,pid)</td><td>评论列表中文本框发送事件</td><td>评论内容,被评论用户id,父级评论id</td></tr></tbody></table>','1','4','1','1','1','2021-01-01 17:01:40','2021-01-01 17:49:57'),(15,'http://qiniu-picture.xiyanit.cn/FlYy4rL891gsxmZy0k6TAQz3U0xX','Nginx部署前后端分离项目','Nginx,Linux,','Nginx部署前后端分离项目',14,0,0,'1',1,'<h1>一. gcc 安装</h1><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">yum</span> <span class=\"hljs-comment\">install</span> <span class=\"hljs-comment\">gcc</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span>++</code></pre><h1>二. PCRE pcre-devel 安装</h1><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：<br></p><pre><code>yum install -y pcre pcre-devel</code></pre><h1>三. zlib 安装</h1><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。<br></p><pre><code>yum install -y zlib zlib-devel</code></pre><h1>四. OpenSSL 安装</h1><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。<br></p><pre><code>yum install -y openssl openssl-devel</code></pre><h1>五.直接下载.tar.gz安装包，地址：https://nginx.org/en/download.html</h1><pre><code>wget -c https://nginx.org/download/nginx-1.12.0.tar.gz</code></pre><h1>六.解压</h1><p>依然是直接命令：<br></p><pre><code>tar -zxvf nginx-1.12.0.tar.gz\n\ncd nginx-1.12.0</code></pre><h1>七.配置</h1><p>其实在 nginx-1.12.0 版本中你就不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。<br>1.使用默认配置<br></p><pre><code>./configure</code></pre><p>2.自定义配置（不推荐）<br></p><pre><code>./configure \\\n--prefix=/usr/local/nginx \\\n--conf-path=/usr/local/nginx/conf/nginx.conf \\\n--pid-path=/usr/local/nginx/conf/nginx.pid \\\n--lock-path=/var/lock/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-http_gzip_static_module \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi</code></pre><p>3.编译安装<br></p><pre><code>make\n\nmake install</code></pre><h1>八.whereis nginx 查询nginx安装的路径</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123134357219.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1>九.进入你安装nginx目录下找到nginx.conf进行编辑 如下配置是vue静态资源加速</h1><p>添加</p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#启用或禁用gzipping响应。</span>\n<span class=\"hljs-attribute\">gzip</span> <span class=\"hljs-literal\">on</span>;\n<span class=\"hljs-comment\">#启用或禁用gzipping响应。</span>\n<span class=\"hljs-attribute\">gzip_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n<span class=\"hljs-comment\">#设置level响应的gzip压缩。可接受的值范围为1到9。</span>\n<span class=\"hljs-attribute\">gzip_comp_level</span> <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-comment\">#置将被gzip压缩的响应的最小长度。长度仅由“Content-Length”响应头字段确定。</span>\n<span class=\"hljs-attribute\">gzip_min_length</span> <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-comment\">#匹配MIME类型进行压缩，text/html默认被压缩。 </span>\n<span class=\"hljs-attribute\">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n<span class=\"hljs-attribute\">log_format</span> main <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] \"<span class=\"hljs-variable\">$request</span>\" \'</span>\n<span class=\"hljs-string\">\'<span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> \"<span class=\"hljs-variable\">$http_referer</span>\" \'</span>\n<span class=\"hljs-string\">\'\"<span class=\"hljs-variable\">$http_user_agent</span>\" \"<span class=\"hljs-variable\">$http_x_forwarded_for</span>\"\'</span>;\n<span class=\"hljs-comment\">#引入/usr/local/nginx/conf.d下面的所有配置文件</span>\n<span class=\"hljs-attribute\">include</span> /usr/local/nginx/conf.d/<span class=\"hljs-regexp\">*.conf</span>;</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201123134656658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1>十:wq退出保存后创建目录名为conf.d</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123134811318.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>目录下就可以方自己单独的配置文件</p><p><img src=\"https://img-blog.csdnimg.cn/20201123134850744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>开始启动配置<br></p><pre><code>vim /etc/profile</code></pre><p>加入<br></p><pre><code>PATH=$PATH:/usr/local/nginx/sbin\nexport PATH</code></pre><pre><code>#刷新</code><code>source /etc/profile</code></pre><h1>十一. 启动、停止nginx</h1><p><br></p><pre><code>cd /usr/local/nginx/sbin/\n#启动\n./nginx \n#停止\n./nginx -s stop\n#刷新\n./nginx -s reload</code></pre><p>网站可以访问ip+端口查询nginx是否安装成功 (如果是如下图片就算是安装成功了)<br><img src=\"https://img-blog.csdnimg.cn/20201123135323675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>解决Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid 重新启动服务器，访问web服务发现无法浏览啦!登陆服务器之后进到nginx使用./nginx -s reload重新读取配置文件，发现报nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)错误，进到logs文件发现的确没有nginx.pid文件<br>解决方法：<br></p><pre><code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n</code></pre><h1>十二. 部署vue前端</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123135504464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>项目打包<br></p><pre><code>npm run build</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201123135626389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>上传项目到服务上</p><p><img src=\"https://img-blog.csdnimg.cn/20201123135741538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1><br>十三. 配置xiyan.conf 你自己在上面创建conf.d目录下创建这个文件</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123135945484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p>','<h1>一. gcc 安装</h1><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">yum</span> <span class=\"hljs-comment\">install</span> <span class=\"hljs-comment\">gcc</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span>++</code></pre><h1>二. PCRE pcre-devel 安装</h1><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：<br></p><pre><code>yum install -y pcre pcre-devel</code></pre><h1>三. zlib 安装</h1><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。<br></p><pre><code>yum install -y zlib zlib-devel</code></pre><h1>四. OpenSSL 安装</h1><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。<br></p><pre><code>yum install -y openssl openssl-devel</code></pre><h1>五.直接下载.tar.gz安装包，地址：https://nginx.org/en/download.html</h1><pre><code>wget -c https://nginx.org/download/nginx-1.12.0.tar.gz</code></pre><h1>六.解压</h1><p>依然是直接命令：<br></p><pre><code>tar -zxvf nginx-1.12.0.tar.gz\n\ncd nginx-1.12.0</code></pre><h1>七.配置</h1><p>其实在 nginx-1.12.0 版本中你就不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。<br>1.使用默认配置<br></p><pre><code>./configure</code></pre><p>2.自定义配置（不推荐）<br></p><pre><code>./configure \\\n--prefix=/usr/local/nginx \\\n--conf-path=/usr/local/nginx/conf/nginx.conf \\\n--pid-path=/usr/local/nginx/conf/nginx.pid \\\n--lock-path=/var/lock/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-http_gzip_static_module \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi</code></pre><p>3.编译安装<br></p><pre><code>make\n\nmake install</code></pre><h1>八.whereis nginx 查询nginx安装的路径</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123134357219.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1>九.进入你安装nginx目录下找到nginx.conf进行编辑 如下配置是vue静态资源加速</h1><p>添加</p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#启用或禁用gzipping响应。</span>\n<span class=\"hljs-attribute\">gzip</span> <span class=\"hljs-literal\">on</span>;\n<span class=\"hljs-comment\">#启用或禁用gzipping响应。</span>\n<span class=\"hljs-attribute\">gzip_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n<span class=\"hljs-comment\">#设置level响应的gzip压缩。可接受的值范围为1到9。</span>\n<span class=\"hljs-attribute\">gzip_comp_level</span> <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-comment\">#置将被gzip压缩的响应的最小长度。长度仅由“Content-Length”响应头字段确定。</span>\n<span class=\"hljs-attribute\">gzip_min_length</span> <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-comment\">#匹配MIME类型进行压缩，text/html默认被压缩。 </span>\n<span class=\"hljs-attribute\">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n<span class=\"hljs-attribute\">log_format</span> main <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] \"<span class=\"hljs-variable\">$request</span>\" \'</span>\n<span class=\"hljs-string\">\'<span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> \"<span class=\"hljs-variable\">$http_referer</span>\" \'</span>\n<span class=\"hljs-string\">\'\"<span class=\"hljs-variable\">$http_user_agent</span>\" \"<span class=\"hljs-variable\">$http_x_forwarded_for</span>\"\'</span>;\n<span class=\"hljs-comment\">#引入/usr/local/nginx/conf.d下面的所有配置文件</span>\n<span class=\"hljs-attribute\">include</span> /usr/local/nginx/conf.d/<span class=\"hljs-regexp\">*.conf</span>;</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201123134656658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1>十:wq退出保存后创建目录名为conf.d</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123134811318.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>目录下就可以方自己单独的配置文件</p><p><img src=\"https://img-blog.csdnimg.cn/20201123134850744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>开始启动配置<br></p><pre><code>vim /etc/profile</code></pre><p>加入<br></p><pre><code>PATH=$PATH:/usr/local/nginx/sbin\nexport PATH</code></pre><pre><code>#刷新</code><code>source /etc/profile</code></pre><h1>十一. 启动、停止nginx</h1><p><br></p><pre><code>cd /usr/local/nginx/sbin/\n#启动\n./nginx \n#停止\n./nginx -s stop\n#刷新\n./nginx -s reload</code></pre><p>网站可以访问ip+端口查询nginx是否安装成功 (如果是如下图片就算是安装成功了)<br><img src=\"https://img-blog.csdnimg.cn/20201123135323675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>解决Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid 重新启动服务器，访问web服务发现无法浏览啦!登陆服务器之后进到nginx使用./nginx -s reload重新读取配置文件，发现报nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)错误，进到logs文件发现的确没有nginx.pid文件<br>解决方法：<br></p><pre><code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n</code></pre><h1>十二. 部署vue前端</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123135504464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>项目打包<br></p><pre><code>npm run build</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201123135626389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>上传项目到服务上</p><p><img src=\"https://img-blog.csdnimg.cn/20201123135741538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1><br>十三. 配置xiyan.conf 你自己在上面创建conf.d目录下创建这个文件</h1><p><img src=\"https://img-blog.csdnimg.cn/20201123135945484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p>','1','8','1','1','1','2021-01-01 17:40:57','2021-01-01 17:46:44'),(16,'http://qiniu-picture.xiyanit.cn/FljDaUH-St943BmoExzxwqNVO47b','vue使用wangEditor（包含单文件，多文件上传）','Vue,','vue使用wangEditor（包含单文件，多文件上传）',2,0,0,'1',1,'<h1 id=\"wqbri\">下载安装</h1><pre type=\"Shell Session\"><code>npm i wangeditor <span class=\"hljs-comment\">--save</span></code></pre><h1 id=\"x7w59\">配置</h1><font size=\"4\">1.在components创建一个wangEditor文件夹<br>2.在创建index.vue 内容：</font><div><pre type=\"Shell Session\"><code>&lt;template lang=<span class=\"hljs-string\">\"html\"</span>&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">editor</span>\"&gt;</span>\n        &lt;div ref=<span class=\"hljs-string\">\"editor\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">textNeirong</span>\"&gt;</span>\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> E from <span class=\"hljs-string\">\"wangeditor\"</span>;\n<span class=\"hljs-keyword\">import</span> store from <span class=\"hljs-string\">\"@/store/\"</span>;\n<span class=\"hljs-comment\">//代码高亮</span>\n<span class=\"hljs-keyword\">import</span> hljs from <span class=\"hljs-string\">\"highlight.js\"</span>;\n<span class=\"hljs-keyword\">import</span> { imageDelete, imageUpload } from <span class=\"hljs-string\">\"@/api/upload\"</span>;\nexport <span class=\"hljs-keyword\">default</span> {\n  name: <span class=\"hljs-string\">\"editoritem\"</span>,\n  <span class=\"hljs-keyword\">data</span>() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// uploadPath,components</span>\n      editor: <span class=\"hljs-literal\">null</span>,\n      info_: <span class=\"hljs-literal\">null</span>,\n      token: <span class=\"hljs-string\">\"\"</span>,\n    };\n  },\n  model: {\n    prop: <span class=\"hljs-string\">\"value\"</span>,\n    event: <span class=\"hljs-string\">\"change\"</span>,\n  },\n  props: {\n    value: {\n      type: String,\n      <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-string\">\" &lt;p&gt;&lt;strong&gt;项目描述&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行环境&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;jdk8+tomcat8+mysql+IntelliJ IDEA或者Eclipse+maven&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;项目技术(必填)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;spring+spring mvc+mybatis+bootstrap+jquery&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据库文件(可选)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;压缩包超20M请把数据库文件拆出上传到百度网盘,提供百度网盘分享地址&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;依赖包文件(可选)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;压缩包超20M请把依赖包文件拆出上传到百度网盘,提供百度网盘分享地址(比如java的jar包)&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行视频(可选)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;mp4视频文件请上传到百度网盘,提供百度网盘分享地址,加快官方审核速度&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;项目截图(必填)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行截图(必填)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意事项(可选)&lt;/strong&gt;&lt;/p&gt;\"</span>,\n    },\n    isClear: {\n      type: <span class=\"hljs-built_in\">Boolean</span>,\n      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-literal\">false</span>,\n    },\n  },\n  watch: {\n    isClear(<span class=\"hljs-keyword\">val</span>) {\n      <span class=\"hljs-comment\">// 触发清除文本域内容</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">val</span>) {\n        <span class=\"hljs-keyword\">this</span>.editor.txt.clear();\n        <span class=\"hljs-keyword\">this</span>.info_ = <span class=\"hljs-literal\">null</span>;\n      }\n    },\n    value: function (value) {\n      <span class=\"hljs-keyword\">if</span> (value !== <span class=\"hljs-keyword\">this</span>.editor.txt.html()) {\n        <span class=\"hljs-keyword\">this</span>.editor.txt.html(<span class=\"hljs-keyword\">this</span>.value);\n      }\n    },\n    <span class=\"hljs-comment\">//value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值</span>\n  },\n  created() {\n    <span class=\"hljs-keyword\">this</span>.token = store.getters.token;\n  },\n  mounted() {\n    <span class=\"hljs-keyword\">this</span>.seteditor();\n    <span class=\"hljs-keyword\">this</span>.editor.txt.html(<span class=\"hljs-keyword\">this</span>.value);\n  },\n  methods: {\n    seteditor() {\n      <span class=\"hljs-keyword\">this</span>.editor = new E(<span class=\"hljs-keyword\">this</span>.$refs.editor);\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgShowBase64 = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// base 64 存储图片</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgHeaders = { <span class=\"hljs-string\">\"x-access-token\"</span>: <span class=\"hljs-keyword\">this</span>.token }; <span class=\"hljs-comment\">// 自定义 header</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadFileName = <span class=\"hljs-string\">\"file\"</span>; <span class=\"hljs-comment\">// 后端接受上传文件的参数名</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgMaxSize = <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>; <span class=\"hljs-comment\">// 将图片大小限制为 2M</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgTimeout = <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// 设置超时时间</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgAccept = [<span class=\"hljs-string\">\"jpg\"</span>, <span class=\"hljs-string\">\"jpeg\"</span>, <span class=\"hljs-string\">\"png\"</span>, <span class=\"hljs-string\">\"gif\"</span>, <span class=\"hljs-string\">\"bmp\"</span>]; <span class=\"hljs-comment\">//限制类型</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.height = <span class=\"hljs-number\">900</span>; <span class=\"hljs-comment\">//编辑器的高度</span>\n      <span class=\"hljs-comment\">// 自定义 onchange 触发的延迟时间，默认为 200 ms</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.onchangeTimeout = <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// 单位 ms</span>\n      <span class=\"hljs-comment\">// 挂载highlight插件</span>\n      <span class=\"hljs-keyword\">this</span>.editor.highlight = hljs;\n      <span class=\"hljs-keyword\">this</span>.editor.config.onchange = (html) =&gt; {\n        <span class=\"hljs-keyword\">this</span>.info_ = html; <span class=\"hljs-comment\">// 绑定当前逐渐地值</span>\n        <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">\"change\"</span>, <span class=\"hljs-keyword\">this</span>.info_); <span class=\"hljs-comment\">// 将内容同步到父组件中</span>\n      };\n      <span class=\"hljs-comment\">// 创建富文本编辑器</span>\n      <span class=\"hljs-keyword\">this</span>.editor.create();\n      <span class=\"hljs-keyword\">this</span>.editor.config.customUploadImg = (resultFiles, insertImgFn) =&gt; {\n        <span class=\"hljs-comment\">// resultFiles 是 input 中选中的文件列表</span>\n        <span class=\"hljs-comment\">// insertImgFn 是获取图片 url 后，插入到编辑器的方法</span>\n\n        <span class=\"hljs-comment\">// 上传图片，返回结果，将图片插入到编辑器中</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; resultFiles.length; i++) {\n          let formData = new FormData();\n          formData.append(<span class=\"hljs-string\">\"file\"</span>, resultFiles[i]);\n          imageUpload(formData).then((res) =&gt; {\n            <span class=\"hljs-keyword\">if</span> (res.success) {\n              insertImgFn(res.downloadUrl);\n            }\n          });\n        }\n        console.log(resultFiles.length);\n      };\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgHooks = {\n        fail: (xhr, editor, result) =&gt; {\n          <span class=\"hljs-comment\">// 插入图片失败回调</span>\n           <span class=\"hljs-keyword\">this</span>.$Message.warning(<span class=\"hljs-string\">\"上传失败\"</span>);\n        },\n        success: (xhr, editor, result) =&gt; {\n          <span class=\"hljs-comment\">// 图片上传成功回调</span>\n          <span class=\"hljs-keyword\">this</span>.$Message.success(<span class=\"hljs-string\">\"图片上传成功\"</span>);\n        },\n        timeout: (xhr, editor) =&gt; {\n          <span class=\"hljs-comment\">// 网络超时的回调</span>\n          <span class=\"hljs-keyword\">this</span>.$Message.warning(<span class=\"hljs-string\">\"上传超时\"</span>);\n        },\n        error: (xhr, editor) =&gt; {\n          <span class=\"hljs-comment\">// 图片上传错误的回调</span>\n           <span class=\"hljs-keyword\">this</span>.$Message.warning(<span class=\"hljs-string\">\"上传失败\"</span>);\n        },\n      };\n    },\n  },\n};\n&lt;/script&gt;</code></pre><h1>3.引用</h1><font size=\"4\">在需要调用的页面使用</font><pre type=\"Shell Session\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bookNote-list-content\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">editor-wang</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeWang\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">editor-wang</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> editorWang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/wangEditor\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: { editorWang },\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-comment\">//wangeditor 值改变的时候</span>\n    changeWang(html) {\n     <span class=\"hljs-built_in\">console</span>.log(html);\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n<span class=\"hljs-selector-class\">.editor</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">99%</span>;\n  <span class=\"hljs-attribute\">margin</span>: auto;\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n</code></pre></div>','<h1 id=\"wqbri\">下载安装</h1><pre type=\"Shell Session\"><code>npm i wangeditor <span class=\"hljs-comment\">--save</span></code></pre><h1 id=\"x7w59\">配置</h1><font size=\"4\">1.在components创建一个wangEditor文件夹<br>2.在创建index.vue 内容：</font><div><pre type=\"Shell Session\"><code>&lt;template lang=<span class=\"hljs-string\">\"html\"</span>&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">editor</span>\"&gt;</span>\n        &lt;div ref=<span class=\"hljs-string\">\"editor\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">textNeirong</span>\"&gt;</span>\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> E from <span class=\"hljs-string\">\"wangeditor\"</span>;\n<span class=\"hljs-keyword\">import</span> store from <span class=\"hljs-string\">\"@/store/\"</span>;\n<span class=\"hljs-comment\">//代码高亮</span>\n<span class=\"hljs-keyword\">import</span> hljs from <span class=\"hljs-string\">\"highlight.js\"</span>;\n<span class=\"hljs-keyword\">import</span> { imageDelete, imageUpload } from <span class=\"hljs-string\">\"@/api/upload\"</span>;\nexport <span class=\"hljs-keyword\">default</span> {\n  name: <span class=\"hljs-string\">\"editoritem\"</span>,\n  <span class=\"hljs-keyword\">data</span>() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// uploadPath,components</span>\n      editor: <span class=\"hljs-literal\">null</span>,\n      info_: <span class=\"hljs-literal\">null</span>,\n      token: <span class=\"hljs-string\">\"\"</span>,\n    };\n  },\n  model: {\n    prop: <span class=\"hljs-string\">\"value\"</span>,\n    event: <span class=\"hljs-string\">\"change\"</span>,\n  },\n  props: {\n    value: {\n      type: String,\n      <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-string\">\" &lt;p&gt;&lt;strong&gt;项目描述&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行环境&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;jdk8+tomcat8+mysql+IntelliJ IDEA或者Eclipse+maven&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;项目技术(必填)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;spring+spring mvc+mybatis+bootstrap+jquery&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据库文件(可选)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;压缩包超20M请把数据库文件拆出上传到百度网盘,提供百度网盘分享地址&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;依赖包文件(可选)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;压缩包超20M请把依赖包文件拆出上传到百度网盘,提供百度网盘分享地址(比如java的jar包)&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行视频(可选)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;mp4视频文件请上传到百度网盘,提供百度网盘分享地址,加快官方审核速度&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;项目截图(必填)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;运行截图(必填)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意事项(可选)&lt;/strong&gt;&lt;/p&gt;\"</span>,\n    },\n    isClear: {\n      type: <span class=\"hljs-built_in\">Boolean</span>,\n      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-literal\">false</span>,\n    },\n  },\n  watch: {\n    isClear(<span class=\"hljs-keyword\">val</span>) {\n      <span class=\"hljs-comment\">// 触发清除文本域内容</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">val</span>) {\n        <span class=\"hljs-keyword\">this</span>.editor.txt.clear();\n        <span class=\"hljs-keyword\">this</span>.info_ = <span class=\"hljs-literal\">null</span>;\n      }\n    },\n    value: function (value) {\n      <span class=\"hljs-keyword\">if</span> (value !== <span class=\"hljs-keyword\">this</span>.editor.txt.html()) {\n        <span class=\"hljs-keyword\">this</span>.editor.txt.html(<span class=\"hljs-keyword\">this</span>.value);\n      }\n    },\n    <span class=\"hljs-comment\">//value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值</span>\n  },\n  created() {\n    <span class=\"hljs-keyword\">this</span>.token = store.getters.token;\n  },\n  mounted() {\n    <span class=\"hljs-keyword\">this</span>.seteditor();\n    <span class=\"hljs-keyword\">this</span>.editor.txt.html(<span class=\"hljs-keyword\">this</span>.value);\n  },\n  methods: {\n    seteditor() {\n      <span class=\"hljs-keyword\">this</span>.editor = new E(<span class=\"hljs-keyword\">this</span>.$refs.editor);\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgShowBase64 = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// base 64 存储图片</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgHeaders = { <span class=\"hljs-string\">\"x-access-token\"</span>: <span class=\"hljs-keyword\">this</span>.token }; <span class=\"hljs-comment\">// 自定义 header</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadFileName = <span class=\"hljs-string\">\"file\"</span>; <span class=\"hljs-comment\">// 后端接受上传文件的参数名</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgMaxSize = <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>; <span class=\"hljs-comment\">// 将图片大小限制为 2M</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgTimeout = <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// 设置超时时间</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgAccept = [<span class=\"hljs-string\">\"jpg\"</span>, <span class=\"hljs-string\">\"jpeg\"</span>, <span class=\"hljs-string\">\"png\"</span>, <span class=\"hljs-string\">\"gif\"</span>, <span class=\"hljs-string\">\"bmp\"</span>]; <span class=\"hljs-comment\">//限制类型</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.height = <span class=\"hljs-number\">900</span>; <span class=\"hljs-comment\">//编辑器的高度</span>\n      <span class=\"hljs-comment\">// 自定义 onchange 触发的延迟时间，默认为 200 ms</span>\n      <span class=\"hljs-keyword\">this</span>.editor.config.onchangeTimeout = <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// 单位 ms</span>\n      <span class=\"hljs-comment\">// 挂载highlight插件</span>\n      <span class=\"hljs-keyword\">this</span>.editor.highlight = hljs;\n      <span class=\"hljs-keyword\">this</span>.editor.config.onchange = (html) =&gt; {\n        <span class=\"hljs-keyword\">this</span>.info_ = html; <span class=\"hljs-comment\">// 绑定当前逐渐地值</span>\n        <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">\"change\"</span>, <span class=\"hljs-keyword\">this</span>.info_); <span class=\"hljs-comment\">// 将内容同步到父组件中</span>\n      };\n      <span class=\"hljs-comment\">// 创建富文本编辑器</span>\n      <span class=\"hljs-keyword\">this</span>.editor.create();\n      <span class=\"hljs-keyword\">this</span>.editor.config.customUploadImg = (resultFiles, insertImgFn) =&gt; {\n        <span class=\"hljs-comment\">// resultFiles 是 input 中选中的文件列表</span>\n        <span class=\"hljs-comment\">// insertImgFn 是获取图片 url 后，插入到编辑器的方法</span>\n\n        <span class=\"hljs-comment\">// 上传图片，返回结果，将图片插入到编辑器中</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; resultFiles.length; i++) {\n          let formData = new FormData();\n          formData.append(<span class=\"hljs-string\">\"file\"</span>, resultFiles[i]);\n          imageUpload(formData).then((res) =&gt; {\n            <span class=\"hljs-keyword\">if</span> (res.success) {\n              insertImgFn(res.downloadUrl);\n            }\n          });\n        }\n        console.log(resultFiles.length);\n      };\n      <span class=\"hljs-keyword\">this</span>.editor.config.uploadImgHooks = {\n        fail: (xhr, editor, result) =&gt; {\n          <span class=\"hljs-comment\">// 插入图片失败回调</span>\n           <span class=\"hljs-keyword\">this</span>.$Message.warning(<span class=\"hljs-string\">\"上传失败\"</span>);\n        },\n        success: (xhr, editor, result) =&gt; {\n          <span class=\"hljs-comment\">// 图片上传成功回调</span>\n          <span class=\"hljs-keyword\">this</span>.$Message.success(<span class=\"hljs-string\">\"图片上传成功\"</span>);\n        },\n        timeout: (xhr, editor) =&gt; {\n          <span class=\"hljs-comment\">// 网络超时的回调</span>\n          <span class=\"hljs-keyword\">this</span>.$Message.warning(<span class=\"hljs-string\">\"上传超时\"</span>);\n        },\n        error: (xhr, editor) =&gt; {\n          <span class=\"hljs-comment\">// 图片上传错误的回调</span>\n           <span class=\"hljs-keyword\">this</span>.$Message.warning(<span class=\"hljs-string\">\"上传失败\"</span>);\n        },\n      };\n    },\n  },\n};\n&lt;/script&gt;</code></pre><h1>3.引用</h1><font size=\"4\">在需要调用的页面使用</font><pre type=\"Shell Session\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bookNote-list-content\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">editor-wang</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeWang\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">editor-wang</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> editorWang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/wangEditor\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: { editorWang },\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-comment\">//wangeditor 值改变的时候</span>\n    changeWang(html) {\n     <span class=\"hljs-built_in\">console</span>.log(html);\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n<span class=\"hljs-selector-class\">.editor</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">99%</span>;\n  <span class=\"hljs-attribute\">margin</span>: auto;\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n</code></pre></div>','1','4','1','1','1','2021-01-01 20:46:59','2021-01-01 20:47:54'),(17,'http://qiniu-picture.xiyanit.cn/FhW-Xu19MsrUwgJm38InoNf1OawB','ubuntu设置服务器时区为东八区','ubuntu,','ubuntu设置服务器时区为东八区',2,0,0,'1',1,' <p><font size=\"4\">今天测试时，发现时间不对，查了一下时区：</font><br></p><pre type=\"Markdown\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> -<span class=\"hljs-type\">R</span></span></code></pre><p><font size=\"4\">结果时区是：+0000<br>我需要的是东八区，这儿显示不是，所以需要设置一个时区</font><br><br><h1 id=\"urc9h\">1.运行tzselect</h1></p><pre type=\"Markdown\"><code><span class=\"hljs-attribute\">tzselect</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201209130248291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">在这里我们选择亚洲 Asia，确认之后选择中国（China)，最后选择北京(Beijing)</font><br><img src=\"https://img-blog.csdnimg.cn/20201209130255138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br><h1 id=\"6c7ib\">2.复制文件到/etc目录下</h1></p><pre type=\"Markdown\"><code>cp <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc<span class=\"hljs-regexp\">/localtime</span></code></pre><p><h1 id=\"moeha\">3.再次查看时间date -R，已经修改为北京时间</h1><img src=\"https://img-blog.csdnimg.cn/20201209130328471.png\" alt=\"在这里插入图片描述\"><br></p>',' <p><font size=\"4\">今天测试时，发现时间不对，查了一下时区：</font><br></p><pre type=\"Markdown\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> -<span class=\"hljs-type\">R</span></span></code></pre><p><font size=\"4\">结果时区是：+0000<br>我需要的是东八区，这儿显示不是，所以需要设置一个时区</font><br><br><h1 id=\"urc9h\">1.运行tzselect</h1></p><pre type=\"Markdown\"><code><span class=\"hljs-attribute\">tzselect</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201209130248291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">在这里我们选择亚洲 Asia，确认之后选择中国（China)，最后选择北京(Beijing)</font><br><img src=\"https://img-blog.csdnimg.cn/20201209130255138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br><h1 id=\"6c7ib\">2.复制文件到/etc目录下</h1></p><pre type=\"Markdown\"><code>cp <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc<span class=\"hljs-regexp\">/localtime</span></code></pre><p><h1 id=\"moeha\">3.再次查看时间date -R，已经修改为北京时间</h1><img src=\"https://img-blog.csdnimg.cn/20201209130328471.png\" alt=\"在这里插入图片描述\"><br></p>','1','8','1','1','1','2021-01-01 20:59:59','2021-01-01 20:59:59'),(18,'http://qiniu-picture.xiyanit.cn/FmuNEDFpDGEV9zf38AZKl5s63lLq','JAVA实现七牛云文件上传','Java,七牛,','JAVA实现七牛云文件上传',3,0,0,'1',1,' <h1 id=\"dwblu\">1.获取七牛云密钥 （我这里有多个存储空间）</h1><p><img src=\"https://img-blog.csdnimg.cn/20201203190405698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/2020120319072162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"gw06c\">2.yml配置</h1><pre type=\"XML\"><code><span class=\"hljs-meta\">#  七牛秘钥</span>\n<span class=\"hljs-symbol\">oss:</span>\n<span class=\"hljs-symbol\">  qiniu:</span>\n<span class=\"hljs-symbol\">     accessKey:</span> <span class=\"hljs-number\">4</span>H6sKnYPJrlzlM0zW9VRksZm1aA52R6lQyDoH1m_\n<span class=\"hljs-symbol\">     secretKey:</span> BQQ-Yqkr3VL7X3_LCcoK-u6r2nhIAHBEy6qDdBBh\n     <span class=\"hljs-meta\">#图片名字</span>\n<span class=\"hljs-symbol\">     bucketPictureName:</span> sunset-pictures\n     <span class=\"hljs-meta\">#图片外部访问拦截</span>\n<span class=\"hljs-symbol\">     domainPicture:</span> http:<span class=\"hljs-comment\">//qiniu-picture.xiyanit.cn/</span>\n     <span class=\"hljs-meta\">#文件名字</span>\n<span class=\"hljs-symbol\">     bucketFileName:</span> sunset-file\n     <span class=\"hljs-meta\">#文件外部访问拦截</span>\n<span class=\"hljs-symbol\">     domainFile:</span> http:<span class=\"hljs-comment\">//qiniu-file.xiyanit.cn/</span>\n</code></pre><h1>3.maven依赖</h1><pre type=\"XML\"><code><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.qiniu/qiniu-java-sdk --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.qiniu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>qiniu-java-sdk<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>7.4.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.8.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><h1 id=\"0yl9h\">4.InitConfigpackage com.xiyan.config;</h1><pre type=\"Java\"><code>\n<span class=\"hljs-keyword\">import</span> com.xiyan.constants.Constant;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n\n<span class=\"hljs-comment\">/**\n * 加载配置\n *\n * @author bright\n */</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-meta\">@ConfigurationProperties</span>(prefix = <span class=\"hljs-string\">\"oss.qiniu\"</span>)\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@RefreshScope</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> InitConfig {\n    <span class=\"hljs-comment\">/**\n     * AccessKey\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> accessKey;\n    <span class=\"hljs-comment\">/**\n     * SecretKey\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> secretKey;\n    <span class=\"hljs-comment\">/**\n     * 图片存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> bucketPictureName;\n    <span class=\"hljs-comment\">/**\n     * 图片外链\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> domainPicture;\n    <span class=\"hljs-comment\">/**\n     * 文件存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> bucketFileName;\n    <span class=\"hljs-comment\">/**\n     * 文件外链\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> domainFile;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> init() {\n        Constant.accessKey = <span class=\"hljs-keyword\">this</span>.accessKey;\n        Constant.secretKey = <span class=\"hljs-keyword\">this</span>.secretKey;\n        Constant.bucketPictureName = <span class=\"hljs-keyword\">this</span>.bucketPictureName;\n        Constant.domainPicture = <span class=\"hljs-keyword\">this</span>.domainPicture;\n        Constant.bucketFileName = <span class=\"hljs-keyword\">this</span>.bucketFileName;\n        Constant.domainFile = <span class=\"hljs-keyword\">this</span>.domainFile;\n    }\n}\n</code></pre><h1>Constant类</h1><pre type=\"Java\"><code>package com.xiyan.constants;\n\n\n<span class=\"hljs-comment\">/**\n * Description: 常量类\n *\n * @version 1.0:\n * @author: bright\n * @date:Created in 2020/7/3\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Constant</span> {</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> IMAGE = <span class=\"hljs-string\">\"image\"</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> FILE = <span class=\"hljs-string\">\"file\"</span>;\n\n    <span class=\"hljs-comment\">/**\n     * AccessKey\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> accessKey;\n    <span class=\"hljs-comment\">/**\n     * SecretKey\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> secretKey;\n    <span class=\"hljs-comment\">/**\n     * 图片存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> bucketPictureName;\n    <span class=\"hljs-comment\">/**\n     * 图片外链\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> domainPicture;\n    <span class=\"hljs-comment\">/**\n     * 文件存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> bucketFileName;\n    <span class=\"hljs-comment\">/**\n     * 文件外链\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> domainFile;\n}\n\n</code></pre><h1>QiNiuUtil</h1><pre type=\"Java\"><code>package com.xiyan.util;\n\n<span class=\"hljs-keyword\">import</span> com.google.gson.Gson;\n<span class=\"hljs-keyword\">import</span> com.qiniu.http.Response;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.<span class=\"hljs-keyword\">Configuration</span>;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.Region;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.UploadManager;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.model.DefaultPutRet;\n<span class=\"hljs-keyword\">import</span> com.qiniu.util.Auth;\n<span class=\"hljs-keyword\">import</span> com.xiyan.constants.<span class=\"hljs-keyword\">Constant</span>;\n\n<span class=\"hljs-keyword\">import</span> java.io.FileInputStream;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/12/3 17:39\n */</span>\n<span class=\"hljs-built_in\">public</span> <span class=\"hljs-keyword\">class</span> QiNiuUtil {\n\n    <span class=\"hljs-comment\">/**\n     * 将图片上传到七牛云\n     */</span>\n    <span class=\"hljs-built_in\">public</span> String upload(FileInputStream file, String fileType) throws <span class=\"hljs-keyword\">Exception</span> {\n        // zone0华东区域,zone1是华北区域,zone2是华南区域\n        <span class=\"hljs-keyword\">Configuration</span> cfg = <span class=\"hljs-built_in\">new</span> <span class=\"hljs-keyword\">Configuration</span>(Region.region0());\n        UploadManager uploadManager = <span class=\"hljs-built_in\">new</span> UploadManager(cfg);\n        // 生成上传凭证，然后准备上传\n        Auth auth = Auth.<span class=\"hljs-keyword\">create</span>(<span class=\"hljs-keyword\">Constant</span>.accessKey, <span class=\"hljs-keyword\">Constant</span>.secretKey);\n        String upToken = <span class=\"hljs-keyword\">null</span>;\n        String <span class=\"hljs-type\">path</span> = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">if</span> (fileType.equals(<span class=\"hljs-keyword\">Constant</span>.IMAGE)) {\n            upToken = auth.uploadToken(<span class=\"hljs-keyword\">Constant</span>.bucketPictureName);\n            <span class=\"hljs-type\">path</span> = <span class=\"hljs-keyword\">Constant</span>.domainPicture;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fileType.equals(<span class=\"hljs-keyword\">Constant</span>.FILE)) {\n            upToken = auth.uploadToken(<span class=\"hljs-keyword\">Constant</span>.bucketFileName);\n            <span class=\"hljs-type\">path</span> = <span class=\"hljs-keyword\">Constant</span>.domainFile;\n        }\n        Response response = uploadManager.put(file, <span class=\"hljs-keyword\">null</span>, upToken, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">null</span>);\n        // 解析上传成功的结果\n        DefaultPutRet putRet = <span class=\"hljs-built_in\">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet.<span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">path</span> + putRet.key;\n    }\n}\n\n</code></pre><h1>UploadService</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.service;\n\n<span class=\"hljs-keyword\">import</span> com.xiyan.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/12/3 17:02\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UploadService</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 文件上传\n     *\n     * <span class=\"hljs-doctag\">@param</span> file\n     * <span class=\"hljs-doctag\">@param</span> fileType\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> Exception\n     */</span>\n    <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">upload</span><span class=\"hljs-params\">(MultipartFile file, String fileType)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>;\n}\n\n</code></pre><h1>UploadServiceImpl</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.service.impl;\n\n<span class=\"hljs-keyword\">import</span> com.xiyan.constants.Constant;\n<span class=\"hljs-keyword\">import</span> com.xiyan.enumeration.ErrorCodeEnum;\n<span class=\"hljs-keyword\">import</span> com.xiyan.service.UploadService;\n<span class=\"hljs-keyword\">import</span> com.xiyan.util.QiNiuUtil;\n<span class=\"hljs-keyword\">import</span> com.xiyan.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> com.xiyan.vo.FileVO;\n<span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-keyword\">import</span> java.io.FileInputStream;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/12/3 17:05\n */</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Slf</span>4j\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UploadService</span> </span>{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">upload</span><span class=\"hljs-params\">(MultipartFile file, String fileType)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        String fileName = file.getOriginalFilename();\n        <span class=\"hljs-keyword\">if</span> (fileName == <span class=\"hljs-keyword\">null</span>) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"传入的文件名不能为空\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0804.getKey(), ErrorCodeEnum.E0804.getValue());\n        }\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.validateFileName(fileName)) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"文件名应仅包含汉字、字母、数字、下划线和点号\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0805.getKey(), ErrorCodeEnum.E0805.getValue());\n        }\n        FileInputStream fileInputStream = (FileInputStream) file.getInputStream();\n        String url = <span class=\"hljs-string\">\"\"</span>;\n        <span class=\"hljs-keyword\">if</span> (fileType.equals(Constant.IMAGE)) {\n            url = <span class=\"hljs-keyword\">new</span> QiNiuUtil().upload(fileInputStream, Constant.IMAGE);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fileType.equals(Constant.FILE)) {\n            url = <span class=\"hljs-keyword\">new</span> QiNiuUtil().upload(fileInputStream, Constant.FILE);\n        }\n        FileVO fileVO = <span class=\"hljs-keyword\">new</span> FileVO();\n        fileVO.setDownloadUrl(url);\n        <span class=\"hljs-keyword\">return</span> fileVO;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 验证文件名称：仅包含 汉字、字母、数字、下划线和点号\n     *\n     * <span class=\"hljs-doctag\">@param</span> fileName 文件名称\n     * <span class=\"hljs-doctag\">@return</span> 返回true表示符合要求\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">validateFileName</span><span class=\"hljs-params\">(String fileName)</span> </span>{\n        String regex = <span class=\"hljs-string\">\"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5_\\\\.]+$\"</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> fileName.<span class=\"hljs-title\">matches</span><span class=\"hljs-params\">(regex)</span></span>;\n    }\n}\n\n</code></pre><h1 id=\"k9a0s\">UploadController</h1><pre type=\"Java\"><code><span class=\"hljs-selector-tag\">package</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.controller</span>;\n\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.constants</span><span class=\"hljs-selector-class\">.Constant</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.service</span><span class=\"hljs-selector-class\">.UploadService</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.vo</span><span class=\"hljs-selector-class\">.BaseVO</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">io</span><span class=\"hljs-selector-class\">.swagger</span><span class=\"hljs-selector-class\">.annotations</span><span class=\"hljs-selector-class\">.Api</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">io</span><span class=\"hljs-selector-class\">.swagger</span><span class=\"hljs-selector-class\">.annotations</span><span class=\"hljs-selector-class\">.ApiOperation</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.bind</span><span class=\"hljs-selector-class\">.annotation</span><span class=\"hljs-selector-class\">.PostMapping</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.bind</span><span class=\"hljs-selector-class\">.annotation</span><span class=\"hljs-selector-class\">.RestController</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.multipart</span><span class=\"hljs-selector-class\">.MultipartFile</span>;\n\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">javax</span><span class=\"hljs-selector-class\">.annotation</span><span class=\"hljs-selector-class\">.Resource</span>;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/12/3 17:14\n */</span>\n<span class=\"hljs-keyword\">@Api</span>(tags = <span class=\"hljs-string\">\"文件集合\"</span>)\n@RestController\npublic class UploadController {\n    <span class=\"hljs-keyword\">@Resource</span>\n    private UploadService uploadService;\n\n    <span class=\"hljs-keyword\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"上传文件接口\"</span>)\n    @PostMapping(value = <span class=\"hljs-string\">\"/file/upload\"</span>)\n    public BaseVO fileUpload(MultipartFile file) throws Exception {\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">uploadService</span><span class=\"hljs-selector-class\">.upload</span>(<span class=\"hljs-selector-tag\">file</span>, <span class=\"hljs-selector-tag\">Constant</span><span class=\"hljs-selector-class\">.FILE</span>);\n    }\n\n    <span class=\"hljs-keyword\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"上传图片接口\"</span>)\n    @PostMapping(value = <span class=\"hljs-string\">\"/image/upload\"</span>)\n    public BaseVO ImageUpload(MultipartFile file) throws Exception {\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">uploadService</span><span class=\"hljs-selector-class\">.upload</span>(<span class=\"hljs-selector-tag\">file</span>, <span class=\"hljs-selector-tag\">Constant</span><span class=\"hljs-selector-class\">.IMAGE</span>);\n    }\n}\n\n</code></pre><h1 id=\"t4hi5\">BaseVO</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.vo;\n\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiModelProperty;\n<span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;\n\n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> bright\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseVO</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> {</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1</span>L;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"结果码\"</span>)\n    <span class=\"hljs-keyword\">private</span> Boolean success = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"错误码\"</span>)\n    <span class=\"hljs-keyword\">private</span> String errorCode;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"错误信息\"</span>)\n    <span class=\"hljs-keyword\">private</span> String errorMsg;\n}\n\n</code></pre><h1 id=\"7htbq\">FileVO</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.vo;\n\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.<span class=\"hljs-type\">ApiModelProperty</span>;\n<span class=\"hljs-keyword\">import</span> lombok.<span class=\"hljs-type\">Data</span>;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/11/16 13:57\n */</span>\n<span class=\"hljs-meta\">@Data</span>\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileVO</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseVO</span> </span>{\n    <span class=\"hljs-keyword\">private</span> static <span class=\"hljs-keyword\">final</span> long serialVersionUID = <span class=\"hljs-number\">1</span>L;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"文件路径\"</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> downloadUrl;\n}\n\n</code></pre><h1 id=\"gy4a6\">测试</h1><p><img src=\"https://img-blog.csdnimg.cn/20201203191110682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201203191128580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h2 id=\"l1spk\">注意上传大文件nginx需要做如下配置</h2><pre type=\"TypeScript\"><code><span class=\"hljs-attr\">找到自己主机的nginx.conf配置文件，打开</span>\n<span class=\"hljs-attr\">在http{}中加入</span>\n<span class=\"hljs-comment\">    #客户端文件上传的大小</span>\n    <span class=\"hljs-attr\">client_max_body_size</span> <span class=\"hljs-string\">500m;</span>\n<span class=\"hljs-comment\">    #用于tomcat反向代理,解决nginx 504错误 </span>\n    <span class=\"hljs-attr\">proxy_connect_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_send_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_read_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_buffer_size</span> <span class=\"hljs-string\">16k; </span>\n    <span class=\"hljs-attr\">proxy_buffers</span> <span class=\"hljs-string\">4 64k; </span>\n    <span class=\"hljs-attr\">proxy_busy_buffers_size</span> <span class=\"hljs-string\">128k; </span>\n    <span class=\"hljs-attr\">proxy_temp_file_write_size</span> <span class=\"hljs-string\">128k;</span>\n<span class=\"hljs-comment\">    # ps:以timeout结尾配置项时间要配置大点</span>\n<span class=\"hljs-attr\">然后重启nginx</span>\n</code></pre>',' <h1 id=\"dwblu\">1.获取七牛云密钥 （我这里有多个存储空间）</h1><p><img src=\"https://img-blog.csdnimg.cn/20201203190405698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/2020120319072162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"gw06c\">2.yml配置</h1><pre type=\"XML\"><code><span class=\"hljs-meta\">#  七牛秘钥</span>\n<span class=\"hljs-symbol\">oss:</span>\n<span class=\"hljs-symbol\">  qiniu:</span>\n<span class=\"hljs-symbol\">     accessKey:</span> <span class=\"hljs-number\">4</span>H6sKnYPJrlzlM0zW9VRksZm1aA52R6lQyDoH1m_\n<span class=\"hljs-symbol\">     secretKey:</span> BQQ-Yqkr3VL7X3_LCcoK-u6r2nhIAHBEy6qDdBBh\n     <span class=\"hljs-meta\">#图片名字</span>\n<span class=\"hljs-symbol\">     bucketPictureName:</span> sunset-pictures\n     <span class=\"hljs-meta\">#图片外部访问拦截</span>\n<span class=\"hljs-symbol\">     domainPicture:</span> http:<span class=\"hljs-comment\">//qiniu-picture.xiyanit.cn/</span>\n     <span class=\"hljs-meta\">#文件名字</span>\n<span class=\"hljs-symbol\">     bucketFileName:</span> sunset-file\n     <span class=\"hljs-meta\">#文件外部访问拦截</span>\n<span class=\"hljs-symbol\">     domainFile:</span> http:<span class=\"hljs-comment\">//qiniu-file.xiyanit.cn/</span>\n</code></pre><h1>3.maven依赖</h1><pre type=\"XML\"><code><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.qiniu/qiniu-java-sdk --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.qiniu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>qiniu-java-sdk<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>7.4.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>gson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.8.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><h1 id=\"0yl9h\">4.InitConfigpackage com.xiyan.config;</h1><pre type=\"Java\"><code>\n<span class=\"hljs-keyword\">import</span> com.xiyan.constants.Constant;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n\n<span class=\"hljs-comment\">/**\n * 加载配置\n *\n * @author bright\n */</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-meta\">@ConfigurationProperties</span>(prefix = <span class=\"hljs-string\">\"oss.qiniu\"</span>)\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@RefreshScope</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> InitConfig {\n    <span class=\"hljs-comment\">/**\n     * AccessKey\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> accessKey;\n    <span class=\"hljs-comment\">/**\n     * SecretKey\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> secretKey;\n    <span class=\"hljs-comment\">/**\n     * 图片存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> bucketPictureName;\n    <span class=\"hljs-comment\">/**\n     * 图片外链\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> domainPicture;\n    <span class=\"hljs-comment\">/**\n     * 文件存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> bucketFileName;\n    <span class=\"hljs-comment\">/**\n     * 文件外链\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">String</span> domainFile;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> init() {\n        Constant.accessKey = <span class=\"hljs-keyword\">this</span>.accessKey;\n        Constant.secretKey = <span class=\"hljs-keyword\">this</span>.secretKey;\n        Constant.bucketPictureName = <span class=\"hljs-keyword\">this</span>.bucketPictureName;\n        Constant.domainPicture = <span class=\"hljs-keyword\">this</span>.domainPicture;\n        Constant.bucketFileName = <span class=\"hljs-keyword\">this</span>.bucketFileName;\n        Constant.domainFile = <span class=\"hljs-keyword\">this</span>.domainFile;\n    }\n}\n</code></pre><h1>Constant类</h1><pre type=\"Java\"><code>package com.xiyan.constants;\n\n\n<span class=\"hljs-comment\">/**\n * Description: 常量类\n *\n * @version 1.0:\n * @author: bright\n * @date:Created in 2020/7/3\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Constant</span> {</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> IMAGE = <span class=\"hljs-string\">\"image\"</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> FILE = <span class=\"hljs-string\">\"file\"</span>;\n\n    <span class=\"hljs-comment\">/**\n     * AccessKey\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> accessKey;\n    <span class=\"hljs-comment\">/**\n     * SecretKey\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> secretKey;\n    <span class=\"hljs-comment\">/**\n     * 图片存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> bucketPictureName;\n    <span class=\"hljs-comment\">/**\n     * 图片外链\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> domainPicture;\n    <span class=\"hljs-comment\">/**\n     * 文件存储空间名\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> bucketFileName;\n    <span class=\"hljs-comment\">/**\n     * 文件外链\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> domainFile;\n}\n\n</code></pre><h1>QiNiuUtil</h1><pre type=\"Java\"><code>package com.xiyan.util;\n\n<span class=\"hljs-keyword\">import</span> com.google.gson.Gson;\n<span class=\"hljs-keyword\">import</span> com.qiniu.http.Response;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.<span class=\"hljs-keyword\">Configuration</span>;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.Region;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.UploadManager;\n<span class=\"hljs-keyword\">import</span> com.qiniu.<span class=\"hljs-keyword\">storage</span>.model.DefaultPutRet;\n<span class=\"hljs-keyword\">import</span> com.qiniu.util.Auth;\n<span class=\"hljs-keyword\">import</span> com.xiyan.constants.<span class=\"hljs-keyword\">Constant</span>;\n\n<span class=\"hljs-keyword\">import</span> java.io.FileInputStream;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/12/3 17:39\n */</span>\n<span class=\"hljs-built_in\">public</span> <span class=\"hljs-keyword\">class</span> QiNiuUtil {\n\n    <span class=\"hljs-comment\">/**\n     * 将图片上传到七牛云\n     */</span>\n    <span class=\"hljs-built_in\">public</span> String upload(FileInputStream file, String fileType) throws <span class=\"hljs-keyword\">Exception</span> {\n        // zone0华东区域,zone1是华北区域,zone2是华南区域\n        <span class=\"hljs-keyword\">Configuration</span> cfg = <span class=\"hljs-built_in\">new</span> <span class=\"hljs-keyword\">Configuration</span>(Region.region0());\n        UploadManager uploadManager = <span class=\"hljs-built_in\">new</span> UploadManager(cfg);\n        // 生成上传凭证，然后准备上传\n        Auth auth = Auth.<span class=\"hljs-keyword\">create</span>(<span class=\"hljs-keyword\">Constant</span>.accessKey, <span class=\"hljs-keyword\">Constant</span>.secretKey);\n        String upToken = <span class=\"hljs-keyword\">null</span>;\n        String <span class=\"hljs-type\">path</span> = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">if</span> (fileType.equals(<span class=\"hljs-keyword\">Constant</span>.IMAGE)) {\n            upToken = auth.uploadToken(<span class=\"hljs-keyword\">Constant</span>.bucketPictureName);\n            <span class=\"hljs-type\">path</span> = <span class=\"hljs-keyword\">Constant</span>.domainPicture;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fileType.equals(<span class=\"hljs-keyword\">Constant</span>.FILE)) {\n            upToken = auth.uploadToken(<span class=\"hljs-keyword\">Constant</span>.bucketFileName);\n            <span class=\"hljs-type\">path</span> = <span class=\"hljs-keyword\">Constant</span>.domainFile;\n        }\n        Response response = uploadManager.put(file, <span class=\"hljs-keyword\">null</span>, upToken, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">null</span>);\n        // 解析上传成功的结果\n        DefaultPutRet putRet = <span class=\"hljs-built_in\">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet.<span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">path</span> + putRet.key;\n    }\n}\n\n</code></pre><h1>UploadService</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.service;\n\n<span class=\"hljs-keyword\">import</span> com.xiyan.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/12/3 17:02\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UploadService</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 文件上传\n     *\n     * <span class=\"hljs-doctag\">@param</span> file\n     * <span class=\"hljs-doctag\">@param</span> fileType\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> Exception\n     */</span>\n    <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">upload</span><span class=\"hljs-params\">(MultipartFile file, String fileType)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>;\n}\n\n</code></pre><h1>UploadServiceImpl</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.service.impl;\n\n<span class=\"hljs-keyword\">import</span> com.xiyan.constants.Constant;\n<span class=\"hljs-keyword\">import</span> com.xiyan.enumeration.ErrorCodeEnum;\n<span class=\"hljs-keyword\">import</span> com.xiyan.service.UploadService;\n<span class=\"hljs-keyword\">import</span> com.xiyan.util.QiNiuUtil;\n<span class=\"hljs-keyword\">import</span> com.xiyan.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> com.xiyan.vo.FileVO;\n<span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-keyword\">import</span> java.io.FileInputStream;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/12/3 17:05\n */</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Slf</span>4j\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UploadService</span> </span>{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">upload</span><span class=\"hljs-params\">(MultipartFile file, String fileType)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        String fileName = file.getOriginalFilename();\n        <span class=\"hljs-keyword\">if</span> (fileName == <span class=\"hljs-keyword\">null</span>) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"传入的文件名不能为空\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0804.getKey(), ErrorCodeEnum.E0804.getValue());\n        }\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.validateFileName(fileName)) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"文件名应仅包含汉字、字母、数字、下划线和点号\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0805.getKey(), ErrorCodeEnum.E0805.getValue());\n        }\n        FileInputStream fileInputStream = (FileInputStream) file.getInputStream();\n        String url = <span class=\"hljs-string\">\"\"</span>;\n        <span class=\"hljs-keyword\">if</span> (fileType.equals(Constant.IMAGE)) {\n            url = <span class=\"hljs-keyword\">new</span> QiNiuUtil().upload(fileInputStream, Constant.IMAGE);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fileType.equals(Constant.FILE)) {\n            url = <span class=\"hljs-keyword\">new</span> QiNiuUtil().upload(fileInputStream, Constant.FILE);\n        }\n        FileVO fileVO = <span class=\"hljs-keyword\">new</span> FileVO();\n        fileVO.setDownloadUrl(url);\n        <span class=\"hljs-keyword\">return</span> fileVO;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 验证文件名称：仅包含 汉字、字母、数字、下划线和点号\n     *\n     * <span class=\"hljs-doctag\">@param</span> fileName 文件名称\n     * <span class=\"hljs-doctag\">@return</span> 返回true表示符合要求\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">validateFileName</span><span class=\"hljs-params\">(String fileName)</span> </span>{\n        String regex = <span class=\"hljs-string\">\"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5_\\\\.]+$\"</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> fileName.<span class=\"hljs-title\">matches</span><span class=\"hljs-params\">(regex)</span></span>;\n    }\n}\n\n</code></pre><h1 id=\"k9a0s\">UploadController</h1><pre type=\"Java\"><code><span class=\"hljs-selector-tag\">package</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.controller</span>;\n\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.constants</span><span class=\"hljs-selector-class\">.Constant</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.service</span><span class=\"hljs-selector-class\">.UploadService</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.xiyan</span><span class=\"hljs-selector-class\">.vo</span><span class=\"hljs-selector-class\">.BaseVO</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">io</span><span class=\"hljs-selector-class\">.swagger</span><span class=\"hljs-selector-class\">.annotations</span><span class=\"hljs-selector-class\">.Api</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">io</span><span class=\"hljs-selector-class\">.swagger</span><span class=\"hljs-selector-class\">.annotations</span><span class=\"hljs-selector-class\">.ApiOperation</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.bind</span><span class=\"hljs-selector-class\">.annotation</span><span class=\"hljs-selector-class\">.PostMapping</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.bind</span><span class=\"hljs-selector-class\">.annotation</span><span class=\"hljs-selector-class\">.RestController</span>;\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.multipart</span><span class=\"hljs-selector-class\">.MultipartFile</span>;\n\n<span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">javax</span><span class=\"hljs-selector-class\">.annotation</span><span class=\"hljs-selector-class\">.Resource</span>;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/12/3 17:14\n */</span>\n<span class=\"hljs-keyword\">@Api</span>(tags = <span class=\"hljs-string\">\"文件集合\"</span>)\n@RestController\npublic class UploadController {\n    <span class=\"hljs-keyword\">@Resource</span>\n    private UploadService uploadService;\n\n    <span class=\"hljs-keyword\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"上传文件接口\"</span>)\n    @PostMapping(value = <span class=\"hljs-string\">\"/file/upload\"</span>)\n    public BaseVO fileUpload(MultipartFile file) throws Exception {\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">uploadService</span><span class=\"hljs-selector-class\">.upload</span>(<span class=\"hljs-selector-tag\">file</span>, <span class=\"hljs-selector-tag\">Constant</span><span class=\"hljs-selector-class\">.FILE</span>);\n    }\n\n    <span class=\"hljs-keyword\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"上传图片接口\"</span>)\n    @PostMapping(value = <span class=\"hljs-string\">\"/image/upload\"</span>)\n    public BaseVO ImageUpload(MultipartFile file) throws Exception {\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">uploadService</span><span class=\"hljs-selector-class\">.upload</span>(<span class=\"hljs-selector-tag\">file</span>, <span class=\"hljs-selector-tag\">Constant</span><span class=\"hljs-selector-class\">.IMAGE</span>);\n    }\n}\n\n</code></pre><h1 id=\"t4hi5\">BaseVO</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.vo;\n\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiModelProperty;\n<span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;\n\n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> bright\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseVO</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> {</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1</span>L;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"结果码\"</span>)\n    <span class=\"hljs-keyword\">private</span> Boolean success = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"错误码\"</span>)\n    <span class=\"hljs-keyword\">private</span> String errorCode;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"错误信息\"</span>)\n    <span class=\"hljs-keyword\">private</span> String errorMsg;\n}\n\n</code></pre><h1 id=\"7htbq\">FileVO</h1><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.xiyan.vo;\n\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.<span class=\"hljs-type\">ApiModelProperty</span>;\n<span class=\"hljs-keyword\">import</span> lombok.<span class=\"hljs-type\">Data</span>;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/11/16 13:57\n */</span>\n<span class=\"hljs-meta\">@Data</span>\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileVO</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseVO</span> </span>{\n    <span class=\"hljs-keyword\">private</span> static <span class=\"hljs-keyword\">final</span> long serialVersionUID = <span class=\"hljs-number\">1</span>L;\n\n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"文件路径\"</span>)\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> downloadUrl;\n}\n\n</code></pre><h1 id=\"gy4a6\">测试</h1><p><img src=\"https://img-blog.csdnimg.cn/20201203191110682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201203191128580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h2 id=\"l1spk\">注意上传大文件nginx需要做如下配置</h2><pre type=\"TypeScript\"><code><span class=\"hljs-attr\">找到自己主机的nginx.conf配置文件，打开</span>\n<span class=\"hljs-attr\">在http{}中加入</span>\n<span class=\"hljs-comment\">    #客户端文件上传的大小</span>\n    <span class=\"hljs-attr\">client_max_body_size</span> <span class=\"hljs-string\">500m;</span>\n<span class=\"hljs-comment\">    #用于tomcat反向代理,解决nginx 504错误 </span>\n    <span class=\"hljs-attr\">proxy_connect_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_send_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_read_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_buffer_size</span> <span class=\"hljs-string\">16k; </span>\n    <span class=\"hljs-attr\">proxy_buffers</span> <span class=\"hljs-string\">4 64k; </span>\n    <span class=\"hljs-attr\">proxy_busy_buffers_size</span> <span class=\"hljs-string\">128k; </span>\n    <span class=\"hljs-attr\">proxy_temp_file_write_size</span> <span class=\"hljs-string\">128k;</span>\n<span class=\"hljs-comment\">    # ps:以timeout结尾配置项时间要配置大点</span>\n<span class=\"hljs-attr\">然后重启nginx</span>\n</code></pre>','1','0','1','1','1','2021-01-01 21:10:20','2021-01-01 21:10:20'),(19,'http://qiniu-picture.xiyanit.cn/FmkrAXZE9F2318d96iUxS3uSJrY_','Docker搭建FastDFS文件系统','Linux,FastDFS,Docker,','Docker搭建FastDFS文件系统',5,0,0,'1',1,' <p><h1 id=\"tiv3m\">1.拉取镜像</h1></p><pre type=\"Shell Session\"><code><span class=\"hljs-attribute\">docker</span> pull delron/fastdfs </code></pre><p><h1 id=\"q13dr\">2.使用docker镜像构建tracker容器（跟踪服务器，起到调度的作用）：</h1></p><pre type=\"Shell Session\"><code>docker run -dti <span class=\"hljs-params\">--network=host</span> <span class=\"hljs-params\">--name</span> tracker\n -v <span class=\"hljs-string\">/var/fdfs/tracker</span>:<span class=\"hljs-string\">/var/fdfs</span>\n -v <span class=\"hljs-string\">/etc/localtime</span>:<span class=\"hljs-string\">/etc/localtime</span>\n delron/fastdfs tracker</code></pre><p><h1 id=\"emx7h\">3.使用docker镜像构建storage容器（存储服务器，提供容量和备份服务）：</h1><font size=\"4\">TRACKER_SERVER=本机的ip地址:22122 本机ip地址不要使用127.0.0.1</font><br><br></p><pre type=\"Shell Session\"><code>docker run -dti  <span class=\"hljs-params\">--network=host</span>\n <span class=\"hljs-params\">--name</span> storage\n -e TRACKER_SERVER=192.168.56.1<span class=\"hljs-function\">:22122</span>\n -v <span class=\"hljs-string\">/var/fdfs/storage</span>:<span class=\"hljs-string\">/var/fdfs</span>\n  -v <span class=\"hljs-string\">/etc/localtime</span>:<span class=\"hljs-string\">/etc/localtime</span>\n  delron/fastdfs storage</code></pre><p><h1 id=\"svn8m\">4.进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在/etc/fdfs目录下的storage.conf。</h1><div></div></p><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#进入容器</span>\n<span class=\"hljs-attr\">docker</span> <span class=\"hljs-string\">exec -it storage bash </span>\n<span class=\"hljs-comment\">\n#进入目录</span>\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">/etc/fdfs/ </span>\n<span class=\"hljs-comment\">\n#编辑文件</span>\n<span class=\"hljs-attr\">vi</span> <span class=\"hljs-string\">storage.conf   </span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201126121112507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\">默认端口是8888，也可以不进行更改。</font></p><p><h1 id=\"zug5r\">5.修改storage中的nginx 不需要安装</h1></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cd</span> /usr/<span class=\"hljs-keyword\">local</span>/nginx/<span class=\"hljs-keyword\">conf</span>\n\nvi nginx.<span class=\"hljs-keyword\">conf</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/2020112612165215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p><h1><span style=\"font-size: 1em;\" id=\"lrgfc\">6.修改完重启容器,没有修改就不需要重启</span></h1><pre type=\"Bash\"><code>docker <span class=\"hljs-keyword\">stop</span> <span class=\"hljs-keyword\">storage</span>\n\ndocker <span class=\"hljs-keyword\">start</span> <span class=\"hljs-keyword\">storage</span></code></pre><p><br></p><p><font size=\"4\">如果重启后无法启动的会，可能是报下面错误了，手动创建 vi /var/fdfs/logs/storaged.log 文件即可</font><br><br><font size=\"4\" color=\"#f9963b\">tail: cannot open \'/var/fdfs/logs/storaged.log\' for reading: No such file or directory</font><h1 id=\"gxlbq\">7.测试</h1><font size=\"4\">进入storage容器，进入/var/fdfs目录</font><br></p><pre type=\"Bash\"><code>docker exec -it storage bash\n\n<span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">/var/fdfs</span>\n\n<span class=\"hljs-keyword\">echo</span> hello 这是我的第一个测试文件，大家觉得不错关注下博主呗&gt;a.txt\n\n<span class=\"hljs-string\">/usr/bin/fdfs_upload_file</span> <span class=\"hljs-string\">/etc/fdfs/client.conf</span> a.txt</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201126122456806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>浏<font size=\"4\">览器访问 http://ip:8888/group1/M00/00/00/wKgcgF-_Le6AS4LvAAAATzab9Do068.txt 端口根据你在starage里面设置的要保持一致，访问之前关闭防火墙 或者自己单独开放端口命令如下：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201126122659721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><h1 id=\"9t0vf\">8.开放端口</h1></p><pre type=\"Shell Session\"><code>firewall-cmd <span class=\"hljs-attribute\">--zone</span>=public --permanent <span class=\"hljs-attribute\">--add-port</span>=8888/tcp\n\nfirewall-cmd <span class=\"hljs-attribute\">--zone</span>=public --permanent <span class=\"hljs-attribute\">--add-port</span>=22122/tcp\n\nfirewall-cmd <span class=\"hljs-attribute\">--zone</span>=public --permanent <span class=\"hljs-attribute\">--add-port</span>=23000/tcp</code></pre><p><br></p><p><br>重启防火墙<br></p><pre type=\"Shell Session\"><code><span class=\"hljs-attribute\">systemctl restart firewalld</span>\n</code></pre><p><br></p><p><h1 id=\"ezttd\">9.开启启动容器</h1></p><pre type=\"Bash\"><code>docker <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">--restart=always tracker</span>\n\ndocker <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">--restart=always storage</span></code></pre>',' <p><h1 id=\"tiv3m\">1.拉取镜像</h1></p><pre type=\"Shell Session\"><code><span class=\"hljs-attribute\">docker</span> pull delron/fastdfs </code></pre><p><h1 id=\"q13dr\">2.使用docker镜像构建tracker容器（跟踪服务器，起到调度的作用）：</h1></p><pre type=\"Shell Session\"><code>docker run -dti <span class=\"hljs-params\">--network=host</span> <span class=\"hljs-params\">--name</span> tracker\n -v <span class=\"hljs-string\">/var/fdfs/tracker</span>:<span class=\"hljs-string\">/var/fdfs</span>\n -v <span class=\"hljs-string\">/etc/localtime</span>:<span class=\"hljs-string\">/etc/localtime</span>\n delron/fastdfs tracker</code></pre><p><h1 id=\"emx7h\">3.使用docker镜像构建storage容器（存储服务器，提供容量和备份服务）：</h1><font size=\"4\">TRACKER_SERVER=本机的ip地址:22122 本机ip地址不要使用127.0.0.1</font><br><br></p><pre type=\"Shell Session\"><code>docker run -dti  <span class=\"hljs-params\">--network=host</span>\n <span class=\"hljs-params\">--name</span> storage\n -e TRACKER_SERVER=192.168.56.1<span class=\"hljs-function\">:22122</span>\n -v <span class=\"hljs-string\">/var/fdfs/storage</span>:<span class=\"hljs-string\">/var/fdfs</span>\n  -v <span class=\"hljs-string\">/etc/localtime</span>:<span class=\"hljs-string\">/etc/localtime</span>\n  delron/fastdfs storage</code></pre><p><h1 id=\"svn8m\">4.进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在/etc/fdfs目录下的storage.conf。</h1><div></div></p><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#进入容器</span>\n<span class=\"hljs-attr\">docker</span> <span class=\"hljs-string\">exec -it storage bash </span>\n<span class=\"hljs-comment\">\n#进入目录</span>\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">/etc/fdfs/ </span>\n<span class=\"hljs-comment\">\n#编辑文件</span>\n<span class=\"hljs-attr\">vi</span> <span class=\"hljs-string\">storage.conf   </span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201126121112507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\">默认端口是8888，也可以不进行更改。</font></p><p><h1 id=\"zug5r\">5.修改storage中的nginx 不需要安装</h1></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cd</span> /usr/<span class=\"hljs-keyword\">local</span>/nginx/<span class=\"hljs-keyword\">conf</span>\n\nvi nginx.<span class=\"hljs-keyword\">conf</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/2020112612165215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p><h1><span style=\"font-size: 1em;\" id=\"lrgfc\">6.修改完重启容器,没有修改就不需要重启</span></h1><pre type=\"Bash\"><code>docker <span class=\"hljs-keyword\">stop</span> <span class=\"hljs-keyword\">storage</span>\n\ndocker <span class=\"hljs-keyword\">start</span> <span class=\"hljs-keyword\">storage</span></code></pre><p><br></p><p><font size=\"4\">如果重启后无法启动的会，可能是报下面错误了，手动创建 vi /var/fdfs/logs/storaged.log 文件即可</font><br><br><font size=\"4\" color=\"#f9963b\">tail: cannot open \'/var/fdfs/logs/storaged.log\' for reading: No such file or directory</font><h1 id=\"gxlbq\">7.测试</h1><font size=\"4\">进入storage容器，进入/var/fdfs目录</font><br></p><pre type=\"Bash\"><code>docker exec -it storage bash\n\n<span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">/var/fdfs</span>\n\n<span class=\"hljs-keyword\">echo</span> hello 这是我的第一个测试文件，大家觉得不错关注下博主呗&gt;a.txt\n\n<span class=\"hljs-string\">/usr/bin/fdfs_upload_file</span> <span class=\"hljs-string\">/etc/fdfs/client.conf</span> a.txt</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201126122456806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p>浏<font size=\"4\">览器访问 http://ip:8888/group1/M00/00/00/wKgcgF-_Le6AS4LvAAAATzab9Do068.txt 端口根据你在starage里面设置的要保持一致，访问之前关闭防火墙 或者自己单独开放端口命令如下：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201126122659721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><h1 id=\"9t0vf\">8.开放端口</h1></p><pre type=\"Shell Session\"><code>firewall-cmd <span class=\"hljs-attribute\">--zone</span>=public --permanent <span class=\"hljs-attribute\">--add-port</span>=8888/tcp\n\nfirewall-cmd <span class=\"hljs-attribute\">--zone</span>=public --permanent <span class=\"hljs-attribute\">--add-port</span>=22122/tcp\n\nfirewall-cmd <span class=\"hljs-attribute\">--zone</span>=public --permanent <span class=\"hljs-attribute\">--add-port</span>=23000/tcp</code></pre><p><br></p><p><br>重启防火墙<br></p><pre type=\"Shell Session\"><code><span class=\"hljs-attribute\">systemctl restart firewalld</span>\n</code></pre><p><br></p><p><h1 id=\"ezttd\">9.开启启动容器</h1></p><pre type=\"Bash\"><code>docker <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">--restart=always tracker</span>\n\ndocker <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">--restart=always storage</span></code></pre>','1','8','1','1','1','2021-01-01 21:23:00','2021-01-01 21:23:00'),(20,'http://qiniu-picture.xiyanit.cn/FjPqWB7cvqmDcXVTxl9q6821ldpO','JAVA整合FastDFS','Java,FastDFS,','JAVA整合FastDFS实现文件上传',12,0,0,'1',1,'<h1 id=\"f3ala\">maven依赖</h1><pre type=\"XML\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.github.tobato<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastdfs-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.27.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><p><br></p><div></div><h1 id=\"qon1m\">2、将Fdfs配置引入项目</h1><font size=\"3\">只需要创建一个配置类就可以了：<br></font><pre type=\"Java\"><code><span class=\"hljs-variable\">@Configuration</span>\n<span class=\"hljs-variable\">@Import</span>(FdfsClientConfig.class)\n<span class=\"hljs-variable\">@EnableMBeanExport</span>(registration = RegistrationPolicy.IGNORE_EXISTING)\npublic class ComponetImport {\n<span class=\"hljs-comment\">// 导入依赖组件</span>\n}</code></pre><p>参考截图：</p><p><img src=\"https://img-blog.csdnimg.cn/20201126142913496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"n1bxe\">3、在application.yml当中配置Fdfs相关参数</h1><font size=\"4\">根据自己情况修改相应ip地址及端口号：</font><br><pre type=\"Html\"><code><span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span>\n\n<span class=\"hljs-attr\">ip:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.28</span><span class=\"hljs-number\">.128</span> <span class=\"hljs-comment\"># 根据自己FastDFS服务器修改</span>\n\n<span class=\"hljs-attr\">fdfs:</span>\n  <span class=\"hljs-attr\">so-timeout:</span> <span class=\"hljs-number\">1501</span>\n  <span class=\"hljs-attr\">connect-timeout:</span> <span class=\"hljs-number\">601</span>\n  <span class=\"hljs-attr\">thumb-image:</span>             <span class=\"hljs-comment\">#缩略图生成参数</span>\n    <span class=\"hljs-attr\">width:</span> <span class=\"hljs-number\">150</span>\n    <span class=\"hljs-attr\">height:</span> <span class=\"hljs-number\">150</span>\n  <span class=\"hljs-attr\">tracker-list:</span>            <span class=\"hljs-comment\">#TrackerList参数,支持多个</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.28</span><span class=\"hljs-number\">.128</span><span class=\"hljs-string\">:22122</span>\n  <span class=\"hljs-attr\">web-server-url:</span> <span class=\"hljs-string\">http://${ip}:6868/</span>\n</code></pre><h1>4、client封装工具类</h1><pre type=\"Java\"><code>import com.github.tobato.fastdfs.domain.conn.FdfsWebServer;\nimport com.github.tobato.fastdfs.domain.fdfs.StorePath;\nimport com.github.tobato.fastdfs.domain.proto.storage.DownloadByteArray;\nimport com.github.tobato.fastdfs.<span class=\"hljs-keyword\">exception</span>.FdfsUnsupportStorePathException;\nimport com.github.tobato.fastdfs.service.FastFileStorageClient;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.multipart.MultipartFile;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\n@Component\npublic <span class=\"hljs-keyword\">class</span> FastDFSClient {\n\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> FastFileStorageClient storageClient;\n\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> FdfsWebServer fdfsWebServer;\n\n    <span class=\"hljs-comment\">/**\n     * 上传文件\n     * @param file 文件对象\n     * @return 文件访问地址\n     * @throws IOException\n     */</span>\n    public String upload<span class=\"hljs-constructor\">File(MultipartFile <span class=\"hljs-params\">file</span>)</span> throws IOException {\n        StorePath storePath = storageClient.upload<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getInputStream</span>()</span>,file.get<span class=\"hljs-constructor\">Size()</span>\n       , <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FilenameUtils</span>.</span></span>get<span class=\"hljs-constructor\">Extension(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getOriginalFilename</span>()</span>),null);\n        return get<span class=\"hljs-constructor\">ResAccessUrl(<span class=\"hljs-params\">storePath</span>)</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 上传文件\n     * @param file 文件对象\n     * @return 文件访问地址\n     * @throws IOException\n     */</span>\n    public String upload<span class=\"hljs-constructor\">File(File <span class=\"hljs-params\">file</span>)</span> throws IOException {\n        FileInputStream inputStream = <span class=\"hljs-keyword\">new</span> FileInputStream (file);\n        StorePath storePath = storageClient.upload<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">inputStream</span>,<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">length</span>()</span>\n       , <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FilenameUtils</span>.</span></span>get<span class=\"hljs-constructor\">Extension(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getName</span>()</span>),null);\n        return get<span class=\"hljs-constructor\">ResAccessUrl(<span class=\"hljs-params\">storePath</span>)</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 将一段字符串生成一个文件上传\n     * @param content 文件内容\n     * @param fileExtension\n     * @return\n     */</span>\n    public String upload<span class=\"hljs-constructor\">File(String <span class=\"hljs-params\">content</span>, String <span class=\"hljs-params\">fileExtension</span>)</span> {\n        byte<span class=\"hljs-literal\">[]</span> buff = content.get<span class=\"hljs-constructor\">Bytes(Charset.<span class=\"hljs-params\">forName</span>(<span class=\"hljs-string\">\"UTF-8\"</span>)</span>);\n        ByteArrayInputStream stream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ByteArrayInputStream(<span class=\"hljs-params\">buff</span>)</span>;\n        StorePath storePath = storageClient.upload<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">stream</span>,<span class=\"hljs-params\">buff</span>.<span class=\"hljs-params\">length</span>, <span class=\"hljs-params\">fileExtension</span>,<span class=\"hljs-params\">null</span>)</span>;\n        return get<span class=\"hljs-constructor\">ResAccessUrl(<span class=\"hljs-params\">storePath</span>)</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 封装图片完整URL地址\n      */</span>\n    <span class=\"hljs-keyword\">private</span> String get<span class=\"hljs-constructor\">ResAccessUrl(StorePath <span class=\"hljs-params\">storePath</span>)</span> {\n        String fileUrl = fdfsWebServer.get<span class=\"hljs-constructor\">WebServerUrl()</span> + storePath.get<span class=\"hljs-constructor\">FullPath()</span>;\n        return fileUrl;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 删除文件\n     * @param fileUrl 文件访问地址\n     * @return\n     */</span>\n    public void delete<span class=\"hljs-constructor\">File(String <span class=\"hljs-params\">fileUrl</span>)</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">fileUrl</span>)</span>) {\n            return;\n        }\n        <span class=\"hljs-keyword\">try</span> {\n            StorePath storePath = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StorePath</span>.</span></span>parse<span class=\"hljs-constructor\">FromUrl(<span class=\"hljs-params\">fileUrl</span>)</span>;\n            storageClient.delete<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">storePath</span>.<span class=\"hljs-params\">getGroup</span>()</span>, storePath.get<span class=\"hljs-constructor\">Path()</span>);\n        } catch (FdfsUnsupportStorePathException e) {\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(e.get<span class=\"hljs-constructor\">Message()</span>);\n            <span class=\"hljs-comment\">/** TODO 只是测试，所以未使用，logger，正式环境请修改打印方式 **/</span>\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * 下载文件\n     *\n     * @param fileUrl 文件URL\n     * @return 文件字节\n     * @throws IOException\n     */</span>\n    public byte<span class=\"hljs-literal\">[]</span> download<span class=\"hljs-constructor\">File(String <span class=\"hljs-params\">fileUrl</span>)</span> throws IOException {\n        String group = fileUrl.substring(<span class=\"hljs-number\">0</span>, fileUrl.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-string\">\"/\"</span>)</span>);\n        String path = fileUrl.substring(fileUrl.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-string\">\"/\"</span>)</span> + <span class=\"hljs-number\">1</span>);\n        DownloadByteArray downloadByteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">DownloadByteArray()</span>;\n        byte<span class=\"hljs-literal\">[]</span> <span class=\"hljs-built_in\">bytes</span> = storageClient.download<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">group</span>, <span class=\"hljs-params\">path</span>, <span class=\"hljs-params\">downloadByteArray</span>)</span>;\n        return <span class=\"hljs-built_in\">bytes</span>;\n    }\n\n}\n</code></pre><p><br></p><h1>5、创建Conttoler测试类</h1><pre type=\"Java\"><code><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/file\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileUploadController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> FastDFSClient fastDFSClient;\n\n    <span class=\"hljs-comment\">/**\n     * 上传\n     * <span class=\"hljs-doctag\">@param</span> file\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> IOException\n     */</span>\n    <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/upload\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> String uploadFile(MultipartFile file) throws IOException {\n        <span class=\"hljs-keyword\">return</span> fastDFSClient.uploadFile(file);\n    }\n\n}\n</code></pre><p>执行效果截图：<br><img src=\"https://img-blog.csdnimg.cn/20201126143203167.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201126143248566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"5\">下载文件测试</font></p><pre type=\"Java\"><code><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/file\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileUploadController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> FastDFSClient fastDFSClient;\n\n    <span class=\"hljs-comment\">/**\n     * 下载\n     * <span class=\"hljs-doctag\">@param</span> fileUrl\n     * <span class=\"hljs-doctag\">@param</span> response\n     * <span class=\"hljs-doctag\">@throws</span> IOException\n     */</span>\n    <span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/download\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">downloadFile</span><span class=\"hljs-params\">(String fileUrl, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        <span class=\"hljs-keyword\">byte</span>[] bytes = fastDFSClient.downloadFile(fileUrl);\n        <span class=\"hljs-comment\">/** TODO 这里只是为了整合fastdfs，所以写死了文件格式。需要在上传的时候保存文件名。下载的时候使用对应的格式 **/</span>\n        response.setHeader(<span class=\"hljs-string\">\"Content-disposition\"</span>, <span class=\"hljs-string\">\"attachment;filename=\"</span> + URLEncoder.encode(<span class=\"hljs-string\">\"sb.xlsx\"</span>, <span class=\"hljs-string\">\"UTF-8\"</span>));\n        response.setCharacterEncoding(<span class=\"hljs-string\">\"UTF-8\"</span>);\n        ServletOutputStream outputStream = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            outputStream = response.getOutputStream();\n            outputStream.write(bytes);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">finally</span> {\n            <span class=\"hljs-keyword\">try</span> {\n                outputStream.flush();\n                outputStream.close();\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n</code></pre><p><font size=\"4\">测试下载路径：</font></p><p><font size=\"4\">http://127.0.0.1:8080/file/download?fileUrl=group1/M00/00/00/CtM3BF84r4SAEPDgAABoGL78QcY682.jpg</font></p><p><font size=\"4\">拼接的参数为：group1/M00/00/00/CtM3BF84r4SAEPDgAABoGL78QcY682.jpg</font></p><p><font size=\"4\">大家想修改路径的话，需要同步修改 downloadFile() 方法里的分隔方式。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201126143441329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"4\">注意上传大文件nginx需要做如下配置</font></p><pre type=\"PHP\"><code><span class=\"hljs-attr\">找到自己主机的nginx.conf配置文件，打开</span>\n<span class=\"hljs-attr\">在http{}中加入</span>\n<span class=\"hljs-comment\">    #客户端文件上传的大小</span>\n    <span class=\"hljs-attr\">client_max_body_size</span> <span class=\"hljs-string\">500m;</span>\n<span class=\"hljs-comment\">    #用于tomcat反向代理,解决nginx 504错误 </span>\n    <span class=\"hljs-attr\">proxy_connect_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_send_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_read_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_buffer_size</span> <span class=\"hljs-string\">16k; </span>\n    <span class=\"hljs-attr\">proxy_buffers</span> <span class=\"hljs-string\">4 64k; </span>\n    <span class=\"hljs-attr\">proxy_busy_buffers_size</span> <span class=\"hljs-string\">128k; </span>\n    <span class=\"hljs-attr\">proxy_temp_file_write_size</span> <span class=\"hljs-string\">128k;</span>\n<span class=\"hljs-comment\">    # ps:以timeout结尾配置项时间要配置大点</span>\n<span class=\"hljs-attr\">然后重启nginx</span>\n</code></pre>','<h1 id=\"f3ala\">maven依赖</h1><pre type=\"XML\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.github.tobato<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastdfs-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.27.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><p><br></p><div></div><h1 id=\"qon1m\">2、将Fdfs配置引入项目</h1><font size=\"3\">只需要创建一个配置类就可以了：<br></font><pre type=\"Java\"><code><span class=\"hljs-variable\">@Configuration</span>\n<span class=\"hljs-variable\">@Import</span>(FdfsClientConfig.class)\n<span class=\"hljs-variable\">@EnableMBeanExport</span>(registration = RegistrationPolicy.IGNORE_EXISTING)\npublic class ComponetImport {\n<span class=\"hljs-comment\">// 导入依赖组件</span>\n}</code></pre><p>参考截图：</p><p><img src=\"https://img-blog.csdnimg.cn/20201126142913496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"n1bxe\">3、在application.yml当中配置Fdfs相关参数</h1><font size=\"4\">根据自己情况修改相应ip地址及端口号：</font><br><pre type=\"Html\"><code><span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span>\n\n<span class=\"hljs-attr\">ip:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.28</span><span class=\"hljs-number\">.128</span> <span class=\"hljs-comment\"># 根据自己FastDFS服务器修改</span>\n\n<span class=\"hljs-attr\">fdfs:</span>\n  <span class=\"hljs-attr\">so-timeout:</span> <span class=\"hljs-number\">1501</span>\n  <span class=\"hljs-attr\">connect-timeout:</span> <span class=\"hljs-number\">601</span>\n  <span class=\"hljs-attr\">thumb-image:</span>             <span class=\"hljs-comment\">#缩略图生成参数</span>\n    <span class=\"hljs-attr\">width:</span> <span class=\"hljs-number\">150</span>\n    <span class=\"hljs-attr\">height:</span> <span class=\"hljs-number\">150</span>\n  <span class=\"hljs-attr\">tracker-list:</span>            <span class=\"hljs-comment\">#TrackerList参数,支持多个</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.28</span><span class=\"hljs-number\">.128</span><span class=\"hljs-string\">:22122</span>\n  <span class=\"hljs-attr\">web-server-url:</span> <span class=\"hljs-string\">http://${ip}:6868/</span>\n</code></pre><h1>4、client封装工具类</h1><pre type=\"Java\"><code>import com.github.tobato.fastdfs.domain.conn.FdfsWebServer;\nimport com.github.tobato.fastdfs.domain.fdfs.StorePath;\nimport com.github.tobato.fastdfs.domain.proto.storage.DownloadByteArray;\nimport com.github.tobato.fastdfs.<span class=\"hljs-keyword\">exception</span>.FdfsUnsupportStorePathException;\nimport com.github.tobato.fastdfs.service.FastFileStorageClient;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.multipart.MultipartFile;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\n@Component\npublic <span class=\"hljs-keyword\">class</span> FastDFSClient {\n\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> FastFileStorageClient storageClient;\n\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> FdfsWebServer fdfsWebServer;\n\n    <span class=\"hljs-comment\">/**\n     * 上传文件\n     * @param file 文件对象\n     * @return 文件访问地址\n     * @throws IOException\n     */</span>\n    public String upload<span class=\"hljs-constructor\">File(MultipartFile <span class=\"hljs-params\">file</span>)</span> throws IOException {\n        StorePath storePath = storageClient.upload<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getInputStream</span>()</span>,file.get<span class=\"hljs-constructor\">Size()</span>\n       , <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FilenameUtils</span>.</span></span>get<span class=\"hljs-constructor\">Extension(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getOriginalFilename</span>()</span>),null);\n        return get<span class=\"hljs-constructor\">ResAccessUrl(<span class=\"hljs-params\">storePath</span>)</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 上传文件\n     * @param file 文件对象\n     * @return 文件访问地址\n     * @throws IOException\n     */</span>\n    public String upload<span class=\"hljs-constructor\">File(File <span class=\"hljs-params\">file</span>)</span> throws IOException {\n        FileInputStream inputStream = <span class=\"hljs-keyword\">new</span> FileInputStream (file);\n        StorePath storePath = storageClient.upload<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">inputStream</span>,<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">length</span>()</span>\n       , <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FilenameUtils</span>.</span></span>get<span class=\"hljs-constructor\">Extension(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getName</span>()</span>),null);\n        return get<span class=\"hljs-constructor\">ResAccessUrl(<span class=\"hljs-params\">storePath</span>)</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 将一段字符串生成一个文件上传\n     * @param content 文件内容\n     * @param fileExtension\n     * @return\n     */</span>\n    public String upload<span class=\"hljs-constructor\">File(String <span class=\"hljs-params\">content</span>, String <span class=\"hljs-params\">fileExtension</span>)</span> {\n        byte<span class=\"hljs-literal\">[]</span> buff = content.get<span class=\"hljs-constructor\">Bytes(Charset.<span class=\"hljs-params\">forName</span>(<span class=\"hljs-string\">\"UTF-8\"</span>)</span>);\n        ByteArrayInputStream stream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ByteArrayInputStream(<span class=\"hljs-params\">buff</span>)</span>;\n        StorePath storePath = storageClient.upload<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">stream</span>,<span class=\"hljs-params\">buff</span>.<span class=\"hljs-params\">length</span>, <span class=\"hljs-params\">fileExtension</span>,<span class=\"hljs-params\">null</span>)</span>;\n        return get<span class=\"hljs-constructor\">ResAccessUrl(<span class=\"hljs-params\">storePath</span>)</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 封装图片完整URL地址\n      */</span>\n    <span class=\"hljs-keyword\">private</span> String get<span class=\"hljs-constructor\">ResAccessUrl(StorePath <span class=\"hljs-params\">storePath</span>)</span> {\n        String fileUrl = fdfsWebServer.get<span class=\"hljs-constructor\">WebServerUrl()</span> + storePath.get<span class=\"hljs-constructor\">FullPath()</span>;\n        return fileUrl;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 删除文件\n     * @param fileUrl 文件访问地址\n     * @return\n     */</span>\n    public void delete<span class=\"hljs-constructor\">File(String <span class=\"hljs-params\">fileUrl</span>)</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">fileUrl</span>)</span>) {\n            return;\n        }\n        <span class=\"hljs-keyword\">try</span> {\n            StorePath storePath = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StorePath</span>.</span></span>parse<span class=\"hljs-constructor\">FromUrl(<span class=\"hljs-params\">fileUrl</span>)</span>;\n            storageClient.delete<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">storePath</span>.<span class=\"hljs-params\">getGroup</span>()</span>, storePath.get<span class=\"hljs-constructor\">Path()</span>);\n        } catch (FdfsUnsupportStorePathException e) {\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(e.get<span class=\"hljs-constructor\">Message()</span>);\n            <span class=\"hljs-comment\">/** TODO 只是测试，所以未使用，logger，正式环境请修改打印方式 **/</span>\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * 下载文件\n     *\n     * @param fileUrl 文件URL\n     * @return 文件字节\n     * @throws IOException\n     */</span>\n    public byte<span class=\"hljs-literal\">[]</span> download<span class=\"hljs-constructor\">File(String <span class=\"hljs-params\">fileUrl</span>)</span> throws IOException {\n        String group = fileUrl.substring(<span class=\"hljs-number\">0</span>, fileUrl.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-string\">\"/\"</span>)</span>);\n        String path = fileUrl.substring(fileUrl.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-string\">\"/\"</span>)</span> + <span class=\"hljs-number\">1</span>);\n        DownloadByteArray downloadByteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">DownloadByteArray()</span>;\n        byte<span class=\"hljs-literal\">[]</span> <span class=\"hljs-built_in\">bytes</span> = storageClient.download<span class=\"hljs-constructor\">File(<span class=\"hljs-params\">group</span>, <span class=\"hljs-params\">path</span>, <span class=\"hljs-params\">downloadByteArray</span>)</span>;\n        return <span class=\"hljs-built_in\">bytes</span>;\n    }\n\n}\n</code></pre><p><br></p><h1>5、创建Conttoler测试类</h1><pre type=\"Java\"><code><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/file\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileUploadController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> FastDFSClient fastDFSClient;\n\n    <span class=\"hljs-comment\">/**\n     * 上传\n     * <span class=\"hljs-doctag\">@param</span> file\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> IOException\n     */</span>\n    <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/upload\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> String uploadFile(MultipartFile file) throws IOException {\n        <span class=\"hljs-keyword\">return</span> fastDFSClient.uploadFile(file);\n    }\n\n}\n</code></pre><p>执行效果截图：<br><img src=\"https://img-blog.csdnimg.cn/20201126143203167.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><img src=\"https://img-blog.csdnimg.cn/20201126143248566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"5\">下载文件测试</font></p><pre type=\"Java\"><code><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/file\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileUploadController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> FastDFSClient fastDFSClient;\n\n    <span class=\"hljs-comment\">/**\n     * 下载\n     * <span class=\"hljs-doctag\">@param</span> fileUrl\n     * <span class=\"hljs-doctag\">@param</span> response\n     * <span class=\"hljs-doctag\">@throws</span> IOException\n     */</span>\n    <span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/download\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">downloadFile</span><span class=\"hljs-params\">(String fileUrl, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        <span class=\"hljs-keyword\">byte</span>[] bytes = fastDFSClient.downloadFile(fileUrl);\n        <span class=\"hljs-comment\">/** TODO 这里只是为了整合fastdfs，所以写死了文件格式。需要在上传的时候保存文件名。下载的时候使用对应的格式 **/</span>\n        response.setHeader(<span class=\"hljs-string\">\"Content-disposition\"</span>, <span class=\"hljs-string\">\"attachment;filename=\"</span> + URLEncoder.encode(<span class=\"hljs-string\">\"sb.xlsx\"</span>, <span class=\"hljs-string\">\"UTF-8\"</span>));\n        response.setCharacterEncoding(<span class=\"hljs-string\">\"UTF-8\"</span>);\n        ServletOutputStream outputStream = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            outputStream = response.getOutputStream();\n            outputStream.write(bytes);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">finally</span> {\n            <span class=\"hljs-keyword\">try</span> {\n                outputStream.flush();\n                outputStream.close();\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n</code></pre><p><font size=\"4\">测试下载路径：</font></p><p><font size=\"4\">http://127.0.0.1:8080/file/download?fileUrl=group1/M00/00/00/CtM3BF84r4SAEPDgAABoGL78QcY682.jpg</font></p><p><font size=\"4\">拼接的参数为：group1/M00/00/00/CtM3BF84r4SAEPDgAABoGL78QcY682.jpg</font></p><p><font size=\"4\">大家想修改路径的话，需要同步修改 downloadFile() 方法里的分隔方式。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201126143441329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"4\">注意上传大文件nginx需要做如下配置</font></p><pre type=\"PHP\"><code><span class=\"hljs-attr\">找到自己主机的nginx.conf配置文件，打开</span>\n<span class=\"hljs-attr\">在http{}中加入</span>\n<span class=\"hljs-comment\">    #客户端文件上传的大小</span>\n    <span class=\"hljs-attr\">client_max_body_size</span> <span class=\"hljs-string\">500m;</span>\n<span class=\"hljs-comment\">    #用于tomcat反向代理,解决nginx 504错误 </span>\n    <span class=\"hljs-attr\">proxy_connect_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_send_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_read_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_buffer_size</span> <span class=\"hljs-string\">16k; </span>\n    <span class=\"hljs-attr\">proxy_buffers</span> <span class=\"hljs-string\">4 64k; </span>\n    <span class=\"hljs-attr\">proxy_busy_buffers_size</span> <span class=\"hljs-string\">128k; </span>\n    <span class=\"hljs-attr\">proxy_temp_file_write_size</span> <span class=\"hljs-string\">128k;</span>\n<span class=\"hljs-comment\">    # ps:以timeout结尾配置项时间要配置大点</span>\n<span class=\"hljs-attr\">然后重启nginx</span>\n</code></pre>','1','0','1','1','1','2021-01-01 21:33:45','2021-01-01 21:36:17'),(21,'http://qiniu-picture.xiyanit.cn/Fo9bY2SBi6xaJlNsKIMcwKWd8wTR','ELK+Filebeat+Kafka日志收集分析','ELK,Kafka,Filebeat,','ELK+Filebeat+Kafka日志收集分析',68,0,0,'1',1,'<h1 id=\"io34c\">1.ELK</h1><img src=\"http://qiniu-picture.xiyanit.cn/Flv3gXQu8UhkdFnHa0b2ga2q8HOB\" style=\"max-width:100%;\"><br><h1 id=\"q6a2b\">2. ELFK</h1><img src=\"http://qiniu-picture.xiyanit.cn/FozWvqlgzFZd30PC9S359MlMdxQ3\" style=\"max-width:100%;\"><br><h1 id=\"f20z6\">3. 架构演进</h1><font size=\"3\">ELK缺点：ELK架构，并且Spring Boot应用使用 logstash-logback-encoder 直接发送给 Logstash，缺点就是Logstash是重量级日志收集server，占用cpu资源高且内存占用比较高<br>ELFK缺点：一定程度上解决了ELK中Logstash的不足，但是由于Beats 收集的每秒数据量越来越大，Logstash 可能无法承载这么大量日志的处理</font><h1 id=\"sihwc\">4. 日志新贵ELK + Filebeat + Kafka</h1><font size=\"3\">随着 Beats 收集的每秒数据量越来越大，Logstash 可能无法承载这么大量日志的处理。虽然说，可以增加 Logstash 节点数量，提高每秒数据的处理速度，但是仍需考虑可能 Elasticsearch 无法承载这么大量的日志的写入。此时，我们可以考虑&nbsp;引入消息队列&nbsp;，进行缓存：<br>Beats 收集数据，写入数据到消息队列中。</font><h1></h1><h1 id=\"p1sfi\">5.搭建</h1><h2><span style=\"font-size: 1em; font-weight: 200;\" id=\"0ayz8\">5.1需要的组件</span></h2><div><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><p><font size=\"5\">1、elasticsearch-7.9.3<br>2、elasticsearch-head-5.0.0<br>3、filebeat-7.9.3<br>4、kibana-7.9.3<br>5、logstash-7.9.3<br>6、kafka_2.13-2.5.0<br>7、zipkin-server-2.14.0-exec</font></p></td></tr></tbody></table></div><h2 id=\"orj59\">5.2修改elasticsearch-7.9.3/config/elasticsearch.yml 文件</h2><pre type=\"Bash\"><code>修改配置：</code><code>#ubuntu需要加上node.name sentos7可以不需要，尽量还是加上吧\n<span class=\"hljs-selector-tag\">node</span><span class=\"hljs-selector-class\">.name</span>: <span class=\"hljs-selector-tag\">node-1</span>\n<span class=\"hljs-selector-tag\">network</span><span class=\"hljs-selector-class\">.host</span>: 0<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">http</span><span class=\"hljs-selector-class\">.port</span>: 9200\n<span class=\"hljs-selector-tag\">http</span><span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.enabled</span>: <span class=\"hljs-selector-tag\">true</span>\n<span class=\"hljs-selector-tag\">http</span><span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.allow-origin</span>: \"*\"\n#这里可以换未<span class=\"hljs-selector-tag\">cluster</span><span class=\"hljs-selector-class\">.initial_master_nodes</span>: <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"node-1\"</span>]</span>\n<span class=\"hljs-selector-tag\">cluster</span><span class=\"hljs-selector-class\">.initial_master_nodes</span>: <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"192.168.28.129:9300\"</span>]</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fg-gK6RbkU7NnkhM8mf-EhZVy35O\" style=\"max-width:100%;\"><br></p><h1 id=\"yv75i\"><span style=\"font-size: 1em;\">5.3</span><span style=\"font-size: 1em;\">编辑 filebeat-7.9.3/filebeat.yml 文件 （<font color=\"#c24f4a\">不同的服务配置不同的日志路径</font>）</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">filebeat.inputs:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span>\n  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">paths:</span>\n   <span class=\"hljs-comment\"># 配置我们要读取的 Spring Boot 应用的日志</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/home/aisys/logs/member-service/*.log</span>\n  <span class=\"hljs-attr\">fields:</span>\n  <span class=\"hljs-comment\">#         #定义日志来源，添加了自定义字段</span>\n    <span class=\"hljs-attr\">log_topic:</span> <span class=\"hljs-string\">member-service</span>\n\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span>\n  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">paths:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/home/aisys/logs/yoostar-gateway/*.log</span>\n  <span class=\"hljs-attr\">fields:</span>\n    <span class=\"hljs-attr\">log_topic:</span> yoostar-<span class=\"hljs-string\">gateway</span></code></pre></div><p><br></p><pre type=\"Html\"><code><span class=\"hljs-comment\">#----------------------------- kafka output --------------------------------</span>\n<span class=\"hljs-attr\">output.kafka:</span>\n  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">hosts:</span> <span class=\"hljs-string\">[\"192.168.28.128:9092\"]</span>\n  <span class=\"hljs-attr\">topic:</span> <span class=\"hljs-string\">\'tv-<span class=\"hljs-template-variable\">%{[fields][log_topic]}</span>\'</span>\n  <span class=\"hljs-attr\">partition.round_robin:</span>\n    <span class=\"hljs-attr\">reachable_only:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">required_acks:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">compression:</span> <span class=\"hljs-string\">gzip</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fn0KzDzt0Vx80f1KF4C9YZBZW5w4\" style=\"max-width:100%;\"><br></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FojwjCxXD2jWCXJA6IL0BhSvFLIk\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><h1 id=\"534ds\"><span style=\"font-size: 1em;\">5.4</span><span style=\"font-size: 1em;\">编辑 kibana-7.9.3/config/kibana.yml 文件</span></h1><div><pre type=\"Shell Session\"><code><span class=\"hljs-selector-tag\">server</span><span class=\"hljs-selector-class\">.host</span>: \"0<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>\"\n<span class=\"hljs-selector-tag\">elasticsearch</span><span class=\"hljs-selector-class\">.hosts</span>: <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"http://10.20.22.30:9200\"</span>]</span>\n# 英文很6的可以忽略这个\n<span class=\"hljs-selector-tag\">i18n</span><span class=\"hljs-selector-class\">.locale</span>: \"<span class=\"hljs-selector-tag\">zh-CN</span>\"</code></pre></div><p><br></p><h1 id=\"qizsk\">5.5<span style=\"font-size: 1em;\">编辑 logstash-7.9.3/config/logstash.conf 文件(<font color=\"#8baa4a\">该文件需要手动创建</font>)</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-keyword\">input</span> {\n    kafka {\n        <span class=\"hljs-attr\">bootstrap_servers</span> =&gt;<span class=\"hljs-string\">\"192.168.28.128:9092\"</span>\n        <span class=\"hljs-attr\">topics_pattern</span> =&gt;<span class=\"hljs-string\">\"tv-.*\"</span>\n        <span class=\"hljs-attr\">consumer_threads</span> =&gt;<span class=\"hljs-number\">5</span> \n        <span class=\"hljs-attr\">decorate_events</span> =&gt;<span class=\"hljs-keyword\">true</span> \n	<span class=\"hljs-attr\">codec</span> =&gt;<span class=\"hljs-string\">\"json\"</span>\n        <span class=\"hljs-attr\">auto_offset_reset</span> =&gt;<span class=\"hljs-string\">\"earliest\"</span>\n	<span class=\"hljs-comment\">#集群需要相同</span>\n	<span class=\"hljs-attr\">group_id</span> =&gt;<span class=\"hljs-string\">\"logstash1\"</span> \n    }\n}\nfilter{\n    json{\n        source =&gt;<span class=\"hljs-string\">\"message\"</span>\n        target =&gt;<span class=\"hljs-string\">\"doc\"</span>\n    }\n}\noutput{\n    elasticsearch{\n        action =&gt;<span class=\"hljs-string\">\"index\"</span>\n        hosts =&gt;[<span class=\"hljs-string\">\"192.168.28.128:9200\"</span>]\n        <span class=\"hljs-comment\">#索引里面如果有大写字母就无法根据topic动态生成索引，topic也不能有大写字母</span>\n        index =&gt;<span class=\"hljs-string\">\"%{[fields][log_topic]}-%{+YYYY-MM-dd}\"</span>\n    }\n    stdout{\n        codec =&gt;<span class=\"hljs-string\">rubydebug</span>\n    }\n}</code><code><br></code></pre></div><h1 id=\"w6t59\">5.6启动<span style=\"font-size: 1em;\">elasticsearch-head</span></h1><div><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">// 下载</span>\n# wget https:<span class=\"hljs-comment\">//nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz </span>\n# tar xf node-v10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>-linux-x64.tar.xz <span class=\"hljs-comment\">// 解压</span>\n# cd node-v10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>-linux-x64/ <span class=\"hljs-comment\">// 进入解压目录</span>\n# ./bin/node -v <span class=\"hljs-comment\">// 执行node命令 查看版本</span>\nv10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>\n配置环境变量\nvim /etc/profile\nexport PATH=$PATH:/usr/local/node-v10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>-linux-x64/bin</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FlIwuAhg9FeIr6PluE6s2Ruy0Vgk\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">刷新配置</font></p><div><pre type=\"Bash\"><code><span class=\"hljs-keyword\">source</span> <span class=\"hljs-regexp\">/etc/</span>profile</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FuuIyFkXqwOmP8A30221cFASOn-K\" style=\"max-width: 100%;\"><br></p><div><pre type=\"Bash\"><code>执行npm <span class=\"hljs-keyword\">install</span> -g grunt-cli 编译源码\n执行npm <span class=\"hljs-keyword\">install</span> 安装服务\n如果查询install.js错误执行npm -g <span class=\"hljs-keyword\">install</span> phantomjs-<span class=\"hljs-keyword\">prebuilt</span>@<span class=\"hljs-number\">2.1</span><span class=\"hljs-number\">.16</span> <span class=\"hljs-comment\">--ignore-script</span>\n执行grunt <span class=\"hljs-keyword\">server</span>启动服务。或者 nohup grunt <span class=\"hljs-keyword\">server</span> &gt;<span class=\"hljs-keyword\">output</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> &amp;\n启动服务之后访问<span class=\"hljs-keyword\">http</span>://<span class=\"hljs-number\">10.20</span><span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.30</span>:<span class=\"hljs-number\">9100</span>/</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FlvySVFG1htNSwSwKh2WfyL_AuyA\" style=\"max-width:100%;\"><br></p><h1><span style=\"font-size: 1em;\" id=\"u6907\">5.7启动kafka</span></h1><div><h2 id=\"785gg\">1.下载kafka安装包</h2><font size=\"4\">(未安装wget请先安装)</font><br><pre type=\"Bash\"><code>yum -y <span class=\"hljs-keyword\">install</span> wget</code><code><br></code><code>wget https://mirror.bit.edu.cn/apache/kafka/2.5.0/kafka_2.13-2.5.0.tgz <br></code></pre><p><br></p><h2 id=\"nz7ec\">2.解压kafka</h2><pre type=\"Shell Session\"><code><span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-zxvf</span> <span class=\"hljs-selector-tag\">kafka_2</span><span class=\"hljs-selector-class\">.13-2</span><span class=\"hljs-selector-class\">.5</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.tgz</span></code></pre><p><br></p><h2 id=\"o93vt\">3.进入配置目录</h2><pre type=\"Shell Session\"><code>cd kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/</code></pre><p><br></p><h2 id=\"asahf\">4.修改配置文件server.properties，添加下面内容</h2><pre type=\"XML\"><code>vim <span class=\"hljs-keyword\">server</span>.properties</code></pre><p><br></p><pre type=\"Lua\"><code><span class=\"hljs-attr\">broker.id</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">9092</span> <span class=\"hljs-comment\">#端口号</span>\n<span class=\"hljs-attr\">host.name</span>=<span class=\"hljs-number\">172.30</span>.<span class=\"hljs-number\">0.9</span> <span class=\"hljs-comment\">#服务器IP地址，修改为自己的服务器IP</span>\n<span class=\"hljs-attr\">log.dirs</span>=/usr/local/logs/kafka <span class=\"hljs-comment\">#日志存放路径，上面创建的目录</span>\n<span class=\"hljs-attr\">zookeeper.connect</span>=localhost:<span class=\"hljs-number\">2181</span> <span class=\"hljs-comment\">#zookeeper地址和端口，单机配置部署，localhost:2181</span></code></pre><p><br></p><h2 id=\"vt34c\">5.编写脚本</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">vim</span> zookeeper_start.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">启动zookeeper</font><br></p><pre type=\"Shell Session\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/zookeeper-server-start.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/zookeeper.properties &amp;</code></pre><p><br><font size=\"4\">编写kafka启动脚本</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">vim</span> kafka_start.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">启动kafaka</font><br></p><pre type=\"Bash\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/kafka-server-start.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/server.properties &amp;</code></pre><p><br><font size=\"4\">编写zookeeper停止脚本</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">vim</span> zookeeper_stop.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">停止zookeeper</font><br></p><pre type=\"Html\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/zookeeper-server-stop.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/zookeeper.properties &amp;</code></pre><p><br><font size=\"4\">编写kafka停止脚本</font><br></p><pre type=\"Ruby\"><code><span class=\"hljs-keyword\">vim</span> kafka_stop.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">停止kafka</font><br></p><pre type=\"Ruby\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/kafka-server-stop.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/server.properties &amp;</code></pre><p><br><font size=\"4\">启动关闭脚本赋予权限</font><br><br></p><pre type=\"XML\"><code>chmod <span class=\"hljs-number\">777</span> kafka_start.sh\nchmod <span class=\"hljs-number\">777</span> kafka_stop.sh\nchmod <span class=\"hljs-number\">777</span> zookeeper_start.sh\nchmod <span class=\"hljs-number\">777</span> zookeeper_stop.sh</code></pre><p><br></p><h2 id=\"t9ikj\">7.先启动zookeeper在启动kafka</h2><pre type=\"Bash\"><code>./zookeeper_start.<span class=\"hljs-keyword\">sh</span>---------------------------------------------启动zookeeper\n./kafka_start.<span class=\"hljs-keyword\">sh</span>----------------------------------------------------启动kafka\n<span class=\"hljs-keyword\">ps</span> -ef | <span class=\"hljs-keyword\">grep</span> zookeeper------------------------------------------查看zookeeper进程状态\n<span class=\"hljs-keyword\">ps</span> -ef | <span class=\"hljs-keyword\">grep</span> kafka-------------------------------------------------查看kafka进程状态</code></pre><p><font size=\"4\"><br><span style=\"background-color: rgb(255, 255, 255);\"><font color=\"#c24f4a\">若出现kafka.common.InconsistentClusterIdException: The Cluster ID MoJxXReIRgeVz8GaoglyXw doesn\'t match stored clusterId Some(t4eUcr1HTVC_VjB6h-vjyA) in meta.properties异常解决方法 意思是集群id跟元数据meta.properties中存储的不一致，导致启动失败。因此去查看meta.properties文件中的元数据信息。这个文件的存储路径是通过/config/server.properties配置文件中的log.dirs属性配置的。所以通过配置文件找到meta.properties，修改里面的cluster.id即可。 将异常信息中的Cluster ID MoJxXReIRgeVz8GaoglyXw写入</font></span><br></font><br></p></div><p><img src=\"https://img-blog.csdnimg.cn/20201230164713764.png\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"f0132\">5.8<span style=\"font-size: 1em;\">启动elasticsearch</span></h1><p><font size=\"4\">启动es出现以下错误是不能用root用户进行启动es</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqaxQPpBOVGYwfsWmeCWjCqfy6gf\" style=\"max-width:100%;\"><br></p><pre type=\"Shell Session\"><code>groupadd <span class=\"hljs-built_in\">es</span>\n# -g 指定组 -p 指定密码\nuseradd <span class=\"hljs-built_in\">es</span> -g <span class=\"hljs-built_in\">es</span> -p <span class=\"hljs-built_in\">es</span>  \n# -R : 处理指定目录下的所有文件\nchown -R <span class=\"hljs-built_in\">es</span>:<span class=\"hljs-built_in\">es</span>  /usr/local/elasticsearch-<span class=\"hljs-number\">7.9</span><span class=\"hljs-number\">.3</span>/ \nchown -R <span class=\"hljs-built_in\">es</span>:<span class=\"hljs-built_in\">es</span>  /usr/local/kibana-<span class=\"hljs-number\">7.9</span><span class=\"hljs-number\">.3</span>-linux-x86_64\nsu <span class=\"hljs-built_in\">es</span>\n./elasticsearch -d</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhrARNBW3XpzNZHcRM4N_2jr1PGK\" style=\"max-width:100%;\"><br></p><h1 id=\"x2hcy\">5.9<span style=\"font-size: 1em;\">启动kibana(<font color=\"#c24f4a\">也是只能用es用户启动</font>)</span></h1><pre type=\"Bash\"><code>nohup bin/kibana &gt;output <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> &amp;\n访问 http:<span class=\"hljs-comment\">//10.20.22.30:5601/ ，即可访问 kibana </span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FixIWumLyfUeAOKIF_vlVU9OJB2F\" style=\"max-width:100%;\"><br></p><h1 id=\"p362m\">5.10、启动filebeat</h1><pre type=\"Shell Session\"><code>su root <span class=\"hljs-meta\">#切换成root用户</span>\nnohup ./filebeat -e -c filebeat.yml &gt;output <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-meta\">&amp;1 &amp;</span></code></pre><p><br></p><h1 id=\"gbmoy\">5.11、启动logstash</h1><pre type=\"SQL\"><code>nohup .<span class=\"hljs-meta-keyword\">/bin/</span>logstash -f .<span class=\"hljs-meta-keyword\">/config/</span>logstash.conf &gt;output <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-variable\">&amp;1</span> &amp;</code></pre><p><br></p><h1 id=\"r2j2g\">5.12、启动zipkin</h1><pre type=\"Bash\"><code>nohup java -jar zipkin-server<span class=\"hljs-number\">-2.19</span><span class=\"hljs-number\">.0</span>-exec.jar --KAFKA_BOOTSTRAP_SERVERS=<span class=\"hljs-number\">10.20</span><span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.30</span>:<span class=\"hljs-number\">9092</span> --STORAGE_TYPE=elasticsearch --ES_HOSTS=http:<span class=\"hljs-comment\">//10.20.22.30:9200 &gt;output 2&gt;&amp;1 &amp;</span>\n访问 http:<span class=\"hljs-comment\">//10.20.22.30:9411/zipkin/ 即可查看zipkin</span></code></pre><h1 id=\"5j6j3\">5.13测试</h1><p><font size=\"4\">在/home/aisys/logs/yoostar-gateway放入日志文件</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FuB592V4s6DRAanNzPK_rhbo8tTF\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">Elasticsearch查询索引数据</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FuSlrpAyZnqR-6R2ypkiQUCAyYbA\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fj1Lazj0GjwsZycrUZFXVatyn4sw\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">kinaba查看数据</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjjsIqxC8WQZT5aihJ5y6A9AM21z\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fju2MnGx--z_xzg7e-cHJsxjx8Kq\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiiENNPn_SJFhwaUKsJ041-Rfjus\" style=\"max-width:100%;\"><br></p><h1 id=\"k7oea\">或者</h1><div><img src=\"http://qiniu-picture.xiyanit.cn/FsIEEtWB95oMNlFhr5mWliLJIHmA\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/Fni-dTV1mSO1Pd_fe-Fb-XUvC87t\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FrhoOUS0ZQTRTk8_mc4QzN2pb_Ih\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fmp9Lu1amE0fKIReKxCYEvkSDjH1\" style=\"max-width: 100%;\"><br></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FsXuG4iZwVxR66Vn49RDzO8pHJqW\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr5MKk6BTWwfm9tGB-hXEo608E11\" style=\"max-width:100%;\"><br></p><h1 id=\"3py6k\">5.14采用filebeat自带的<span style=\"font-size: 1em;\">module收集日志 我这里就举例收集nginx日志</span></h1><div><font size=\"4\">启动module默认都是disable的</font></div><div><pre type=\"Shell Session\"><code>./filebeat modules <span class=\"hljs-builtin-name\">enable</span> nginx</code></pre></div><p><font size=\"4\">修改配置文件</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">vim</span> modules.d/nginx.yml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FsTgOTXEw5S0uCWpT-6kfaBBFUie\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">由于我filebeat配置是一个日志文件对应一个topic所以还需要修改nginx对应的数据topic</font></p><pre type=\"Bash\"><code>vim module/nginx/<span class=\"hljs-built_in\">error</span>/<span class=\"hljs-built_in\">config</span>/nginx-<span class=\"hljs-built_in\">error</span>.yml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FmfgdFnq_8swRr0Lp7dTlQcgp0Nt\" style=\"max-width:100%;\"><br></p><div><pre type=\"Bash\"><code>vim <span class=\"hljs-keyword\">module</span>/nginx/<span class=\"hljs-keyword\">access</span>/config/nginx-<span class=\"hljs-keyword\">access</span>.yml</code></pre></div><p><font size=\"5\">再次重启filebeat大功告成</font></p><div><span style=\"font-size: 1em;\"><br></span></div><div><span style=\"font-size: 1em;\"><br></span></div>','<h1 id=\"io34c\">1.ELK</h1><img src=\"http://qiniu-picture.xiyanit.cn/Flv3gXQu8UhkdFnHa0b2ga2q8HOB\" style=\"max-width:100%;\"><br><h1 id=\"q6a2b\">2. ELFK</h1><img src=\"http://qiniu-picture.xiyanit.cn/FozWvqlgzFZd30PC9S359MlMdxQ3\" style=\"max-width:100%;\"><br><h1 id=\"f20z6\">3. 架构演进</h1><font size=\"3\">ELK缺点：ELK架构，并且Spring Boot应用使用 logstash-logback-encoder 直接发送给 Logstash，缺点就是Logstash是重量级日志收集server，占用cpu资源高且内存占用比较高<br>ELFK缺点：一定程度上解决了ELK中Logstash的不足，但是由于Beats 收集的每秒数据量越来越大，Logstash 可能无法承载这么大量日志的处理</font><h1 id=\"sihwc\">4. 日志新贵ELK + Filebeat + Kafka</h1><font size=\"3\">随着 Beats 收集的每秒数据量越来越大，Logstash 可能无法承载这么大量日志的处理。虽然说，可以增加 Logstash 节点数量，提高每秒数据的处理速度，但是仍需考虑可能 Elasticsearch 无法承载这么大量的日志的写入。此时，我们可以考虑&nbsp;引入消息队列&nbsp;，进行缓存：<br>Beats 收集数据，写入数据到消息队列中。</font><h1></h1><h1 id=\"p1sfi\">5.搭建</h1><h2><span style=\"font-size: 1em; font-weight: 200;\" id=\"0ayz8\">5.1需要的组件</span></h2><div><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><p><font size=\"5\">1、elasticsearch-7.9.3<br>2、elasticsearch-head-5.0.0<br>3、filebeat-7.9.3<br>4、kibana-7.9.3<br>5、logstash-7.9.3<br>6、kafka_2.13-2.5.0<br>7、zipkin-server-2.14.0-exec</font></p></td></tr></tbody></table></div><h2 id=\"orj59\">5.2修改elasticsearch-7.9.3/config/elasticsearch.yml 文件</h2><pre type=\"Bash\"><code>修改配置：</code><code>#ubuntu需要加上node.name sentos7可以不需要，尽量还是加上吧\n<span class=\"hljs-selector-tag\">node</span><span class=\"hljs-selector-class\">.name</span>: <span class=\"hljs-selector-tag\">node-1</span>\n<span class=\"hljs-selector-tag\">network</span><span class=\"hljs-selector-class\">.host</span>: 0<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">http</span><span class=\"hljs-selector-class\">.port</span>: 9200\n<span class=\"hljs-selector-tag\">http</span><span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.enabled</span>: <span class=\"hljs-selector-tag\">true</span>\n<span class=\"hljs-selector-tag\">http</span><span class=\"hljs-selector-class\">.cors</span><span class=\"hljs-selector-class\">.allow-origin</span>: \"*\"\n#这里可以换未<span class=\"hljs-selector-tag\">cluster</span><span class=\"hljs-selector-class\">.initial_master_nodes</span>: <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"node-1\"</span>]</span>\n<span class=\"hljs-selector-tag\">cluster</span><span class=\"hljs-selector-class\">.initial_master_nodes</span>: <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"192.168.28.129:9300\"</span>]</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fg-gK6RbkU7NnkhM8mf-EhZVy35O\" style=\"max-width:100%;\"><br></p><h1 id=\"yv75i\"><span style=\"font-size: 1em;\">5.3</span><span style=\"font-size: 1em;\">编辑 filebeat-7.9.3/filebeat.yml 文件 （<font color=\"#c24f4a\">不同的服务配置不同的日志路径</font>）</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">filebeat.inputs:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span>\n  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">paths:</span>\n   <span class=\"hljs-comment\"># 配置我们要读取的 Spring Boot 应用的日志</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/home/aisys/logs/member-service/*.log</span>\n  <span class=\"hljs-attr\">fields:</span>\n  <span class=\"hljs-comment\">#         #定义日志来源，添加了自定义字段</span>\n    <span class=\"hljs-attr\">log_topic:</span> <span class=\"hljs-string\">member-service</span>\n\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span>\n  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">paths:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/home/aisys/logs/yoostar-gateway/*.log</span>\n  <span class=\"hljs-attr\">fields:</span>\n    <span class=\"hljs-attr\">log_topic:</span> yoostar-<span class=\"hljs-string\">gateway</span></code></pre></div><p><br></p><pre type=\"Html\"><code><span class=\"hljs-comment\">#----------------------------- kafka output --------------------------------</span>\n<span class=\"hljs-attr\">output.kafka:</span>\n  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">hosts:</span> <span class=\"hljs-string\">[\"192.168.28.128:9092\"]</span>\n  <span class=\"hljs-attr\">topic:</span> <span class=\"hljs-string\">\'tv-<span class=\"hljs-template-variable\">%{[fields][log_topic]}</span>\'</span>\n  <span class=\"hljs-attr\">partition.round_robin:</span>\n    <span class=\"hljs-attr\">reachable_only:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">required_acks:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">compression:</span> <span class=\"hljs-string\">gzip</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fn0KzDzt0Vx80f1KF4C9YZBZW5w4\" style=\"max-width:100%;\"><br></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FojwjCxXD2jWCXJA6IL0BhSvFLIk\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><h1 id=\"534ds\"><span style=\"font-size: 1em;\">5.4</span><span style=\"font-size: 1em;\">编辑 kibana-7.9.3/config/kibana.yml 文件</span></h1><div><pre type=\"Shell Session\"><code><span class=\"hljs-selector-tag\">server</span><span class=\"hljs-selector-class\">.host</span>: \"0<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>\"\n<span class=\"hljs-selector-tag\">elasticsearch</span><span class=\"hljs-selector-class\">.hosts</span>: <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"http://10.20.22.30:9200\"</span>]</span>\n# 英文很6的可以忽略这个\n<span class=\"hljs-selector-tag\">i18n</span><span class=\"hljs-selector-class\">.locale</span>: \"<span class=\"hljs-selector-tag\">zh-CN</span>\"</code></pre></div><p><br></p><h1 id=\"qizsk\">5.5<span style=\"font-size: 1em;\">编辑 logstash-7.9.3/config/logstash.conf 文件(<font color=\"#8baa4a\">该文件需要手动创建</font>)</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-keyword\">input</span> {\n    kafka {\n        <span class=\"hljs-attr\">bootstrap_servers</span> =&gt;<span class=\"hljs-string\">\"192.168.28.128:9092\"</span>\n        <span class=\"hljs-attr\">topics_pattern</span> =&gt;<span class=\"hljs-string\">\"tv-.*\"</span>\n        <span class=\"hljs-attr\">consumer_threads</span> =&gt;<span class=\"hljs-number\">5</span> \n        <span class=\"hljs-attr\">decorate_events</span> =&gt;<span class=\"hljs-keyword\">true</span> \n	<span class=\"hljs-attr\">codec</span> =&gt;<span class=\"hljs-string\">\"json\"</span>\n        <span class=\"hljs-attr\">auto_offset_reset</span> =&gt;<span class=\"hljs-string\">\"earliest\"</span>\n	<span class=\"hljs-comment\">#集群需要相同</span>\n	<span class=\"hljs-attr\">group_id</span> =&gt;<span class=\"hljs-string\">\"logstash1\"</span> \n    }\n}\nfilter{\n    json{\n        source =&gt;<span class=\"hljs-string\">\"message\"</span>\n        target =&gt;<span class=\"hljs-string\">\"doc\"</span>\n    }\n}\noutput{\n    elasticsearch{\n        action =&gt;<span class=\"hljs-string\">\"index\"</span>\n        hosts =&gt;[<span class=\"hljs-string\">\"192.168.28.128:9200\"</span>]\n        <span class=\"hljs-comment\">#索引里面如果有大写字母就无法根据topic动态生成索引，topic也不能有大写字母</span>\n        index =&gt;<span class=\"hljs-string\">\"%{[fields][log_topic]}-%{+YYYY-MM-dd}\"</span>\n    }\n    stdout{\n        codec =&gt;<span class=\"hljs-string\">rubydebug</span>\n    }\n}</code><code><br></code></pre></div><h1 id=\"w6t59\">5.6启动<span style=\"font-size: 1em;\">elasticsearch-head</span></h1><div><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">// 下载</span>\n# wget https:<span class=\"hljs-comment\">//nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz </span>\n# tar xf node-v10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>-linux-x64.tar.xz <span class=\"hljs-comment\">// 解压</span>\n# cd node-v10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>-linux-x64/ <span class=\"hljs-comment\">// 进入解压目录</span>\n# ./bin/node -v <span class=\"hljs-comment\">// 执行node命令 查看版本</span>\nv10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>\n配置环境变量\nvim /etc/profile\nexport PATH=$PATH:/usr/local/node-v10<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.0</span>-linux-x64/bin</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FlIwuAhg9FeIr6PluE6s2Ruy0Vgk\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">刷新配置</font></p><div><pre type=\"Bash\"><code><span class=\"hljs-keyword\">source</span> <span class=\"hljs-regexp\">/etc/</span>profile</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FuuIyFkXqwOmP8A30221cFASOn-K\" style=\"max-width: 100%;\"><br></p><div><pre type=\"Bash\"><code>执行npm <span class=\"hljs-keyword\">install</span> -g grunt-cli 编译源码\n执行npm <span class=\"hljs-keyword\">install</span> 安装服务\n如果查询install.js错误执行npm -g <span class=\"hljs-keyword\">install</span> phantomjs-<span class=\"hljs-keyword\">prebuilt</span>@<span class=\"hljs-number\">2.1</span><span class=\"hljs-number\">.16</span> <span class=\"hljs-comment\">--ignore-script</span>\n执行grunt <span class=\"hljs-keyword\">server</span>启动服务。或者 nohup grunt <span class=\"hljs-keyword\">server</span> &gt;<span class=\"hljs-keyword\">output</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> &amp;\n启动服务之后访问<span class=\"hljs-keyword\">http</span>://<span class=\"hljs-number\">10.20</span><span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.30</span>:<span class=\"hljs-number\">9100</span>/</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FlvySVFG1htNSwSwKh2WfyL_AuyA\" style=\"max-width:100%;\"><br></p><h1><span style=\"font-size: 1em;\" id=\"u6907\">5.7启动kafka</span></h1><div><h2 id=\"785gg\">1.下载kafka安装包</h2><font size=\"4\">(未安装wget请先安装)</font><br><pre type=\"Bash\"><code>yum -y <span class=\"hljs-keyword\">install</span> wget</code><code><br></code><code>wget https://mirror.bit.edu.cn/apache/kafka/2.5.0/kafka_2.13-2.5.0.tgz <br></code></pre><p><br></p><h2 id=\"nz7ec\">2.解压kafka</h2><pre type=\"Shell Session\"><code><span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-zxvf</span> <span class=\"hljs-selector-tag\">kafka_2</span><span class=\"hljs-selector-class\">.13-2</span><span class=\"hljs-selector-class\">.5</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.tgz</span></code></pre><p><br></p><h2 id=\"o93vt\">3.进入配置目录</h2><pre type=\"Shell Session\"><code>cd kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/</code></pre><p><br></p><h2 id=\"asahf\">4.修改配置文件server.properties，添加下面内容</h2><pre type=\"XML\"><code>vim <span class=\"hljs-keyword\">server</span>.properties</code></pre><p><br></p><pre type=\"Lua\"><code><span class=\"hljs-attr\">broker.id</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">9092</span> <span class=\"hljs-comment\">#端口号</span>\n<span class=\"hljs-attr\">host.name</span>=<span class=\"hljs-number\">172.30</span>.<span class=\"hljs-number\">0.9</span> <span class=\"hljs-comment\">#服务器IP地址，修改为自己的服务器IP</span>\n<span class=\"hljs-attr\">log.dirs</span>=/usr/local/logs/kafka <span class=\"hljs-comment\">#日志存放路径，上面创建的目录</span>\n<span class=\"hljs-attr\">zookeeper.connect</span>=localhost:<span class=\"hljs-number\">2181</span> <span class=\"hljs-comment\">#zookeeper地址和端口，单机配置部署，localhost:2181</span></code></pre><p><br></p><h2 id=\"vt34c\">5.编写脚本</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">vim</span> zookeeper_start.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">启动zookeeper</font><br></p><pre type=\"Shell Session\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/zookeeper-server-start.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/zookeeper.properties &amp;</code></pre><p><br><font size=\"4\">编写kafka启动脚本</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">vim</span> kafka_start.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">启动kafaka</font><br></p><pre type=\"Bash\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/kafka-server-start.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/server.properties &amp;</code></pre><p><br><font size=\"4\">编写zookeeper停止脚本</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">vim</span> zookeeper_stop.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">停止zookeeper</font><br></p><pre type=\"Html\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/zookeeper-server-stop.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/zookeeper.properties &amp;</code></pre><p><br><font size=\"4\">编写kafka停止脚本</font><br></p><pre type=\"Ruby\"><code><span class=\"hljs-keyword\">vim</span> kafka_stop.<span class=\"hljs-keyword\">sh</span></code></pre><p><br><font size=\"4\">停止kafka</font><br></p><pre type=\"Ruby\"><code>/usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/bin/kafka-server-stop.sh /usr/local/kafka_2<span class=\"hljs-number\">.13</span><span class=\"hljs-number\">-2.5</span><span class=\"hljs-number\">.0</span>/config/server.properties &amp;</code></pre><p><br><font size=\"4\">启动关闭脚本赋予权限</font><br><br></p><pre type=\"XML\"><code>chmod <span class=\"hljs-number\">777</span> kafka_start.sh\nchmod <span class=\"hljs-number\">777</span> kafka_stop.sh\nchmod <span class=\"hljs-number\">777</span> zookeeper_start.sh\nchmod <span class=\"hljs-number\">777</span> zookeeper_stop.sh</code></pre><p><br></p><h2 id=\"t9ikj\">7.先启动zookeeper在启动kafka</h2><pre type=\"Bash\"><code>./zookeeper_start.<span class=\"hljs-keyword\">sh</span>---------------------------------------------启动zookeeper\n./kafka_start.<span class=\"hljs-keyword\">sh</span>----------------------------------------------------启动kafka\n<span class=\"hljs-keyword\">ps</span> -ef | <span class=\"hljs-keyword\">grep</span> zookeeper------------------------------------------查看zookeeper进程状态\n<span class=\"hljs-keyword\">ps</span> -ef | <span class=\"hljs-keyword\">grep</span> kafka-------------------------------------------------查看kafka进程状态</code></pre><p><font size=\"4\"><br><span style=\"background-color: rgb(255, 255, 255);\"><font color=\"#c24f4a\">若出现kafka.common.InconsistentClusterIdException: The Cluster ID MoJxXReIRgeVz8GaoglyXw doesn\'t match stored clusterId Some(t4eUcr1HTVC_VjB6h-vjyA) in meta.properties异常解决方法 意思是集群id跟元数据meta.properties中存储的不一致，导致启动失败。因此去查看meta.properties文件中的元数据信息。这个文件的存储路径是通过/config/server.properties配置文件中的log.dirs属性配置的。所以通过配置文件找到meta.properties，修改里面的cluster.id即可。 将异常信息中的Cluster ID MoJxXReIRgeVz8GaoglyXw写入</font></span><br></font><br></p></div><p><img src=\"https://img-blog.csdnimg.cn/20201230164713764.png\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"f0132\">5.8<span style=\"font-size: 1em;\">启动elasticsearch</span></h1><p><font size=\"4\">启动es出现以下错误是不能用root用户进行启动es</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqaxQPpBOVGYwfsWmeCWjCqfy6gf\" style=\"max-width:100%;\"><br></p><pre type=\"Shell Session\"><code>groupadd <span class=\"hljs-built_in\">es</span>\n# -g 指定组 -p 指定密码\nuseradd <span class=\"hljs-built_in\">es</span> -g <span class=\"hljs-built_in\">es</span> -p <span class=\"hljs-built_in\">es</span>  \n# -R : 处理指定目录下的所有文件\nchown -R <span class=\"hljs-built_in\">es</span>:<span class=\"hljs-built_in\">es</span>  /usr/local/elasticsearch-<span class=\"hljs-number\">7.9</span><span class=\"hljs-number\">.3</span>/ \nchown -R <span class=\"hljs-built_in\">es</span>:<span class=\"hljs-built_in\">es</span>  /usr/local/kibana-<span class=\"hljs-number\">7.9</span><span class=\"hljs-number\">.3</span>-linux-x86_64\nsu <span class=\"hljs-built_in\">es</span>\n./elasticsearch -d</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhrARNBW3XpzNZHcRM4N_2jr1PGK\" style=\"max-width:100%;\"><br></p><h1 id=\"x2hcy\">5.9<span style=\"font-size: 1em;\">启动kibana(<font color=\"#c24f4a\">也是只能用es用户启动</font>)</span></h1><pre type=\"Bash\"><code>nohup bin/kibana &gt;output <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> &amp;\n访问 http:<span class=\"hljs-comment\">//10.20.22.30:5601/ ，即可访问 kibana </span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FixIWumLyfUeAOKIF_vlVU9OJB2F\" style=\"max-width:100%;\"><br></p><h1 id=\"p362m\">5.10、启动filebeat</h1><pre type=\"Shell Session\"><code>su root <span class=\"hljs-meta\">#切换成root用户</span>\nnohup ./filebeat -e -c filebeat.yml &gt;output <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-meta\">&amp;1 &amp;</span></code></pre><p><br></p><h1 id=\"gbmoy\">5.11、启动logstash</h1><pre type=\"SQL\"><code>nohup .<span class=\"hljs-meta-keyword\">/bin/</span>logstash -f .<span class=\"hljs-meta-keyword\">/config/</span>logstash.conf &gt;output <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-variable\">&amp;1</span> &amp;</code></pre><p><br></p><h1 id=\"r2j2g\">5.12、启动zipkin</h1><pre type=\"Bash\"><code>nohup java -jar zipkin-server<span class=\"hljs-number\">-2.19</span><span class=\"hljs-number\">.0</span>-exec.jar --KAFKA_BOOTSTRAP_SERVERS=<span class=\"hljs-number\">10.20</span><span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.30</span>:<span class=\"hljs-number\">9092</span> --STORAGE_TYPE=elasticsearch --ES_HOSTS=http:<span class=\"hljs-comment\">//10.20.22.30:9200 &gt;output 2&gt;&amp;1 &amp;</span>\n访问 http:<span class=\"hljs-comment\">//10.20.22.30:9411/zipkin/ 即可查看zipkin</span></code></pre><h1 id=\"5j6j3\">5.13测试</h1><p><font size=\"4\">在/home/aisys/logs/yoostar-gateway放入日志文件</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FuB592V4s6DRAanNzPK_rhbo8tTF\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">Elasticsearch查询索引数据</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FuSlrpAyZnqR-6R2ypkiQUCAyYbA\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fj1Lazj0GjwsZycrUZFXVatyn4sw\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">kinaba查看数据</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjjsIqxC8WQZT5aihJ5y6A9AM21z\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fju2MnGx--z_xzg7e-cHJsxjx8Kq\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiiENNPn_SJFhwaUKsJ041-Rfjus\" style=\"max-width:100%;\"><br></p><h1 id=\"k7oea\">或者</h1><div><img src=\"http://qiniu-picture.xiyanit.cn/FsIEEtWB95oMNlFhr5mWliLJIHmA\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/Fni-dTV1mSO1Pd_fe-Fb-XUvC87t\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FrhoOUS0ZQTRTk8_mc4QzN2pb_Ih\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fmp9Lu1amE0fKIReKxCYEvkSDjH1\" style=\"max-width: 100%;\"><br></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FsXuG4iZwVxR66Vn49RDzO8pHJqW\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr5MKk6BTWwfm9tGB-hXEo608E11\" style=\"max-width:100%;\"><br></p><h1 id=\"3py6k\">5.14采用filebeat自带的<span style=\"font-size: 1em;\">module收集日志 我这里就举例收集nginx日志</span></h1><div><font size=\"4\">启动module默认都是disable的</font></div><div><pre type=\"Shell Session\"><code>./filebeat modules <span class=\"hljs-builtin-name\">enable</span> nginx</code></pre></div><p><font size=\"4\">修改配置文件</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">vim</span> modules.d/nginx.yml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FsTgOTXEw5S0uCWpT-6kfaBBFUie\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">由于我filebeat配置是一个日志文件对应一个topic所以还需要修改nginx对应的数据topic</font></p><pre type=\"Bash\"><code>vim module/nginx/<span class=\"hljs-built_in\">error</span>/<span class=\"hljs-built_in\">config</span>/nginx-<span class=\"hljs-built_in\">error</span>.yml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FmfgdFnq_8swRr0Lp7dTlQcgp0Nt\" style=\"max-width:100%;\"><br></p><div><pre type=\"Bash\"><code>vim <span class=\"hljs-keyword\">module</span>/nginx/<span class=\"hljs-keyword\">access</span>/config/nginx-<span class=\"hljs-keyword\">access</span>.yml</code></pre></div><p><font size=\"5\">再次重启filebeat大功告成</font></p><div><span style=\"font-size: 1em;\"><br></span></div><div><span style=\"font-size: 1em;\"><br></span></div>','1','8','1','1','1','2021-01-03 19:37:46','2021-01-10 11:13:39'),(22,'http://qiniu-picture.xiyanit.cn/Fslc_kvNfTENRQSnByFenTtt9B0x','JAVA上传文件到AWS S3','Java,AWS,','JAVA上传文件到AWS S3',3,0,0,'1',1,' <p><h1 id=\"qljkp\">1.maven依赖</h1></p><pre type=\"XML\"><code><span class=\"hljs-comment\">&lt;!-- s3 文件上传 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.amazonaws<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aws-java-sdk-s3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.11.901<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><p><br></p><p><h1 id=\"neil5\">2.yml配置</h1></p><pre type=\"Shell Session\"><code><span class=\"hljs-meta\"># S3配置</span>\n<span class=\"hljs-symbol\">s3:</span>\n  <span class=\"hljs-meta\"># s3上已经存在该存储桶</span>\n<span class=\"hljs-symbol\">  file_bucket:</span> ppm-pics-resource\n  <span class=\"hljs-meta\"># AWS 访问密钥</span>\n<span class=\"hljs-symbol\">  access_key:</span> AKIAJdfS3784UINUSEUA\n  <span class=\"hljs-meta\"># AWS SECRET_KEY</span>\n<span class=\"hljs-symbol\">  secret_key:</span> PmYSYx1YN/gyZbQBRqdfghj/edvb2qROmgxi+xyq\n  <span class=\"hljs-meta\"># AWS 云平台地址</span>\n<span class=\"hljs-symbol\">  url:</span> https:<span class=\"hljs-comment\">//bank-logo-78458784254.s3-accesspoint.us-east-1.amazonaws.com/</span></code></pre><p><h1 id=\"5c09g\">3.S3Config</h1><div></div></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.config;\n\n<span class=\"hljs-keyword\">import</span> com.amazonaws.ClientConfiguration;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.Protocol;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.AWSCredentials;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.AWSCredentialsProvider;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.AWSStaticCredentialsProvider;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.BasicAWSCredentials;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.client.builder.AwsClientBuilder;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.regions.Region;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.regions.Regions;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.AmazonS3;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.AmazonS3Client;\n<span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.<span class=\"hljs-keyword\">annotation</span>.Value;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.context.config.<span class=\"hljs-keyword\">annotation</span>.RefreshScope;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.Configuration;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/11/19 9:49\n */</span>\n<span class=\"hljs-meta\">@Slf4j</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@RefreshScope</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">S3Config</span></span>{\n\n    <span class=\"hljs-comment\">/**\n     * AWS 访问密钥\n     */</span>\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${s3.access_key}</span>\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String accessKey;\n\n    <span class=\"hljs-comment\">/**\n     * AWS SECRET_KEY\n     */</span>\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${s3.secret_key}</span>\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String secretKey;\n\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${s3.url}</span>\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String url;\n\n    <span class=\"hljs-comment\">/**\n     * 初始化生成AmazonS3 客户端配置\n     *\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> AmazonS3 amazonS3() {\n        log.info(<span class=\"hljs-string\">\"start create s3Client\"</span>);\n        AwsClientBuilder.EndpointConfiguration endpointConfig =\n                new AwsClientBuilder.EndpointConfiguration(url, Region.getRegion(Regions.US_EAST_1).getName());\n\n        AWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);\n        AWSCredentialsProvider awsCredentialsProvider = new AWSStaticCredentialsProvider(awsCredentials);\n        ClientConfiguration clientConfig = new ClientConfiguration();\n        clientConfig.setProtocol(Protocol.HTTPS);\n\n        AmazonS3 S3client = AmazonS3Client.builder()\n                .withEndpointConfiguration(endpointConfig)\n                .withClientConfiguration(clientConfig)\n                .withCredentials(awsCredentialsProvider)\n                .disableChunkedEncoding()\n                .withPathStyleAccessEnabled(<span class=\"hljs-literal\">true</span>)\n                .withForceGlobalBucketAccessEnabled(<span class=\"hljs-literal\">true</span>)\n                .build();\n        log.info(<span class=\"hljs-string\">\"create s3Client success\"</span>);\n        <span class=\"hljs-keyword\">return</span> S3client;\n    }\n}\n\n</code></pre><p><h1>UploadRecordService</h1></p><pre type=\"Java\"><code>package com.yoostar.service;\n\n<span class=\"hljs-keyword\">import</span> com.yoostar.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\"> * </span>Description:\n<span class=\"hljs-bullet\"> *\n </span>* @author: bright\n<span class=\"hljs-bullet\"> * </span>@date:Created in 2020/11/12 18:00\n */</span></span>\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UploadRecordService</span> </span>{\n    <span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\">     * </span>文件上传\n<span class=\"hljs-bullet\">     *\n     </span>* @param file\n<span class=\"hljs-bullet\">     * </span>@return\n<span class=\"hljs-code\">     */</span></span></span>\n    BaseVO upload(MultipartFile file);\n\n    <span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\">     * </span>文件删除\n<span class=\"hljs-bullet\">     *\n     </span>* @param key\n<span class=\"hljs-bullet\">     * </span>@return\n<span class=\"hljs-code\">     */</span></span></span>\n    BaseVO delete(<span class=\"hljs-built_in\">String</span> key);\n\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"5c4ik\">UploadRecordServiceImpl</h1></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.service.impl;\n\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.AmazonS3;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.model.*;\n<span class=\"hljs-keyword\">import</span> com.yoostar.enumeration.ErrorCodeEnum;\n<span class=\"hljs-keyword\">import</span> com.yoostar.mapper.UploadRecordMapper;\n<span class=\"hljs-keyword\">import</span> com.yoostar.service.UploadRecordService;\n<span class=\"hljs-keyword\">import</span> com.yoostar.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-keyword\">import</span> javax.annotation.Resource;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/11/16 13:50\n */</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Slf</span>4j\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadRecordServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UploadRecordService</span> </span>{\n\n    <span class=\"hljs-meta\">@Resource</span>\n    <span class=\"hljs-keyword\">private</span> UploadRecordMapper uploadRecordMapper;\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${s3.file_bucket}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String fileBucket;\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${s3.url}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String url;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> AmazonS3 amazonS3;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">upload</span><span class=\"hljs-params\">(MultipartFile file)</span> </span>{\n        String fileName = file.getOriginalFilename();\n        <span class=\"hljs-keyword\">if</span> (fileName == <span class=\"hljs-keyword\">null</span>) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"传入的文件名不能为空\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0804.getKey(), ErrorCodeEnum.E0804.getValue());\n        }\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.validateFileName(fileName)) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"文件名应仅包含汉字、字母、数字、下划线和点号\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0805.getKey(), ErrorCodeEnum.E0805.getValue());\n        }\n\n        ObjectMetadata objectMetadata = <span class=\"hljs-keyword\">new</span> ObjectMetadata();\n        objectMetadata.setContentType(file.getContentType());\n        objectMetadata.setContentLength(file.getSize());\n\n        String key = System.currentTimeMillis() + fileName;\n        <span class=\"hljs-keyword\">try</span> {\n            PutObjectResult result = amazonS3.putObject(<span class=\"hljs-keyword\">new</span> PutObjectRequest(fileBucket, key, file.getInputStream(), objectMetadata)\n                    .withCannedAcl(CannedAccessControlList.BucketOwnerFullControl));   <span class=\"hljs-comment\">//配置文件访问权限</span>\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-comment\">//文件访问路径</span>\n        String address = url + fileBucket + <span class=\"hljs-string\">\"/\"</span> + key;\n        log.info(address);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(String key)</span> </span>{\n        amazonS3.deleteObject(<span class=\"hljs-keyword\">new</span> DeleteObjectRequest(fileBucket, key));\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 验证文件名称：仅包含 汉字、字母、数字、下划线和点号\n     *\n     * <span class=\"hljs-doctag\">@param</span> fileName 文件名称\n     * <span class=\"hljs-doctag\">@return</span> 返回true表示符合要求\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">validateFileName</span><span class=\"hljs-params\">(String fileName)</span> </span>{\n        String regex = <span class=\"hljs-string\">\"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5_\\\\.]+$\"</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> fileName.<span class=\"hljs-title\">matches</span><span class=\"hljs-params\">(regex)</span></span>;\n    }\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"r5069\">分段上传可以改为</h1></p><pre type=\"Java\"><code>package com.yoostar.service.impl;\n\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.model.CannedAccessControlList;\nimport com.amazonaws.services.s3.model.DeleteObjectRequest;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.PutObjectRequest;\nimport com.amazonaws.services.s3.transfer.TransferManager;\nimport com.amazonaws.services.s3.transfer.TransferManagerBuilder;\nimport com.amazonaws.services.s3.transfer.Upload;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.yoostar.constants.Constant;\nimport com.yoostar.domain.UploadRecordDO;\nimport com.yoostar.dto.FileDTO;\nimport com.yoostar.enumeration.ErrorCodeEnum;\nimport com.yoostar.mapper.UploadRecordMapper;\nimport com.yoostar.service.UploadRecordService;\nimport com.yoostar.vo.BaseVO;\nimport com.yoostar.vo.FileVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/11/16 13:50\n */</span>\n@Service\n@Slf4j\npublic <span class=\"hljs-keyword\">class</span> UploadRecordServiceImpl implements UploadRecordService {\n\n    @Resource\n    <span class=\"hljs-keyword\">private</span> UploadRecordMapper uploadRecordMapper;\n\n    @<span class=\"hljs-constructor\">Value(<span class=\"hljs-string\">\"${s3.url}\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String url;\n\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> AmazonS3 amazonS3;\n\n    @Override\n    public BaseVO upload(MultipartFile file) {\n        String fileName = file.get<span class=\"hljs-constructor\">OriginalFilename()</span>;\n        <span class=\"hljs-keyword\">if</span> (fileName<span class=\"hljs-operator\"> == </span>null) {\n            log.error(<span class=\"hljs-string\">\"传入的文件名不能为空\"</span>);\n            return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">BaseVO(<span class=\"hljs-params\">false</span>, ErrorCodeEnum.E0804.<span class=\"hljs-params\">getKey</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorCodeEnum</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">E0804</span>.</span></span>get<span class=\"hljs-constructor\">Value()</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (!this.validate<span class=\"hljs-constructor\">FileName(<span class=\"hljs-params\">fileName</span>)</span>) {\n            log.error(<span class=\"hljs-string\">\"文件名应仅包含汉字、字母、数字、下划线和点号\"</span>);\n            return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">BaseVO(<span class=\"hljs-params\">false</span>, ErrorCodeEnum.E0805.<span class=\"hljs-params\">getKey</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorCodeEnum</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">E0805</span>.</span></span>get<span class=\"hljs-constructor\">Value()</span>);\n        }\n        <span class=\"hljs-comment\">//上传 s3 服务器</span>\n        ObjectMetadata objectMetadata = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ObjectMetadata()</span>;\n        objectMetadata.set<span class=\"hljs-constructor\">ContentType(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getContentType</span>()</span>);\n        objectMetadata.set<span class=\"hljs-constructor\">ContentLength(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getSize</span>()</span>);\n        String key = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>current<span class=\"hljs-constructor\">TimeMillis()</span> + fileName;\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">//分段上传</span>\n            TransferManager tm = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">TransferManagerBuilder</span>.</span></span>standard<span class=\"hljs-literal\">()</span>.<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">S3Client(<span class=\"hljs-params\">amazonS3</span>)</span>.build<span class=\"hljs-literal\">()</span>;\n            Upload upload = tm.upload(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">PutObjectRequest(Constant.<span class=\"hljs-params\">fileBucket</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getInputStream</span>()</span>, objectMetadata)\n                    <span class=\"hljs-comment\">//配置文件访问权限</span>\n                    .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">CannedAcl(CannedAccessControlList.PublicReadWrite)</span>);\n            upload.wait<span class=\"hljs-constructor\">ForCompletion()</span>;\n        } catch (Exception e) {\n            e.print<span class=\"hljs-constructor\">StackTrace()</span>;\n        }\n        <span class=\"hljs-comment\">//文件访问路径</span>\n        String address = url + <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Constant</span>.</span></span>fileBucket + <span class=\"hljs-string\">\"/\"</span> + key;\n\n        FileVO fileVO = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FileVO()</span>;\n        <span class=\"hljs-comment\">//添加上传记录</span>\n        UploadRecordDO uploadRecord = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">UploadRecordDO()</span>;\n        uploadRecord.set<span class=\"hljs-constructor\">InnerName(<span class=\"hljs-params\">key</span>)</span>;\n        uploadRecord.set<span class=\"hljs-constructor\">CreateTime(<span class=\"hljs-params\">new</span> Date()</span>);\n        uploadRecordMapper.insert(uploadRecord);\n        fileVO.set<span class=\"hljs-constructor\">DownloadUrl(<span class=\"hljs-params\">address</span>)</span>;\n        return fileVO;\n    }\n\n    @Override\n    public BaseVO delete(FileDTO fileDTO) {\n        amazonS3.delete<span class=\"hljs-constructor\">Object(<span class=\"hljs-params\">new</span> DeleteObjectRequest(Constant.<span class=\"hljs-params\">fileBucket</span>, <span class=\"hljs-params\">fileDTO</span>.<span class=\"hljs-params\">getKey</span>()</span>));\n        uploadRecordMapper.delete(<span class=\"hljs-keyword\">new</span> QueryWrapper&lt;UploadRecordDO&gt;<span class=\"hljs-literal\">()</span>.eq(<span class=\"hljs-string\">\"inner_name\"</span>, fileDTO.get<span class=\"hljs-constructor\">Key()</span>));\n        return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">BaseVO()</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 验证文件名称：仅包含 汉字、字母、数字、下划线和点号\n     *\n     * @param fileName 文件名称\n     * @return 返回true表示符合要求\n     */</span>\n    <span class=\"hljs-keyword\">private</span> boolean validate<span class=\"hljs-constructor\">FileName(String <span class=\"hljs-params\">fileName</span>)</span> {\n        String regex = <span class=\"hljs-string\">\"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5_\\\\.]+$\"</span>;\n        return fileName.matches(regex);\n    }\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"5nb4f\">UploadRecordController</h1></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.controller;\n\n<span class=\"hljs-keyword\">import</span> com.yoostar.service.UploadRecordService;\n<span class=\"hljs-keyword\">import</span> com.yoostar.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.Api;\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiOperation;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.<span class=\"hljs-keyword\">annotation</span>.*;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-keyword\">import</span> javax.<span class=\"hljs-keyword\">annotation</span>.Resource;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/11/13 9:05\n */</span>\n<span class=\"hljs-meta\">@Api(tags = <span class=\"hljs-meta-string\">\"文件集合\"</span>)</span>\n<span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/file\"</span>)</span>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadRecordController</span> </span>{\n    <span class=\"hljs-meta\">@Resource</span>\n    <span class=\"hljs-keyword\">private</span> UploadRecordService uploadRecordService;\n\n    <span class=\"hljs-meta\">@ApiOperation(value = <span class=\"hljs-meta-string\">\"上传文件接口\"</span>)</span>\n    <span class=\"hljs-meta\">@PostMapping(value = <span class=\"hljs-meta-string\">\"/upload\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> BaseVO upload(MultipartFile file) {\n        <span class=\"hljs-keyword\">return</span> uploadRecordService.upload(file);\n    }\n\n    <span class=\"hljs-meta\">@ApiOperation(value = <span class=\"hljs-meta-string\">\"删除文件接口\"</span>)</span>\n    <span class=\"hljs-meta\">@DeleteMapping(<span class=\"hljs-meta-string\">\"/delete/{key}\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> BaseVO delete(<span class=\"hljs-meta\">@PathVariable(<span class=\"hljs-meta-string\">\"key\"</span>)</span> String key) {\n        <span class=\"hljs-keyword\">return</span> uploadRecordService.delete(key);\n    }\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"w6q8a\">4.测试</h1><div><img src=\"https://img-blog.csdnimg.cn/20201126102808226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><div><img src=\"https://img-blog.csdnimg.cn/20201126102823455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201126102912561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><br></div><h1 id=\"aa4hm\">删除文件</h1><div><img src=\"https://img-blog.csdnimg.cn/20201126103006533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"bps8e\"><font color=\"#c24f4a\">踩坑记得把这些地址设置不然会出现权限问题和访问不到的问题</font></h1><div><img src=\"https://img-blog.csdnimg.cn/20201126190133466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"!](https://img-blog.csdnimg.cn/20201126190108193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center)\"><img src=\"https://img-blog.csdnimg.cn/2020112619020397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><font color=\"#c24f4a\"><br></font></div><h1 id=\"vgrdi\">注意上传大文件nginx需要做如下配置</h1><div></div></p><pre type=\"JSON\"><code><span class=\"hljs-attr\">找到自己主机的nginx.conf配置文件，打开</span>\n<span class=\"hljs-attr\">在http{}中加入</span>\n<span class=\"hljs-comment\">    #客户端文件上传的大小</span>\n    <span class=\"hljs-attr\">client_max_body_size</span> <span class=\"hljs-string\">500m;</span>\n<span class=\"hljs-comment\">    #用于tomcat反向代理,解决nginx 504错误 </span>\n    <span class=\"hljs-attr\">proxy_connect_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_send_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_read_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_buffer_size</span> <span class=\"hljs-string\">16k; </span>\n    <span class=\"hljs-attr\">proxy_buffers</span> <span class=\"hljs-string\">4 64k; </span>\n    <span class=\"hljs-attr\">proxy_busy_buffers_size</span> <span class=\"hljs-string\">128k; </span>\n    <span class=\"hljs-attr\">proxy_temp_file_write_size</span> <span class=\"hljs-string\">128k;</span>\n<span class=\"hljs-comment\">    # ps:以timeout结尾配置项时间要配置大点</span>\n<span class=\"hljs-attr\">然后重启nginx</span>\n</code></pre>',' <p><h1 id=\"qljkp\">1.maven依赖</h1></p><pre type=\"XML\"><code><span class=\"hljs-comment\">&lt;!-- s3 文件上传 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.amazonaws<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aws-java-sdk-s3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.11.901<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre><p><br></p><p><h1 id=\"neil5\">2.yml配置</h1></p><pre type=\"Shell Session\"><code><span class=\"hljs-meta\"># S3配置</span>\n<span class=\"hljs-symbol\">s3:</span>\n  <span class=\"hljs-meta\"># s3上已经存在该存储桶</span>\n<span class=\"hljs-symbol\">  file_bucket:</span> ppm-pics-resource\n  <span class=\"hljs-meta\"># AWS 访问密钥</span>\n<span class=\"hljs-symbol\">  access_key:</span> AKIAJdfS3784UINUSEUA\n  <span class=\"hljs-meta\"># AWS SECRET_KEY</span>\n<span class=\"hljs-symbol\">  secret_key:</span> PmYSYx1YN/gyZbQBRqdfghj/edvb2qROmgxi+xyq\n  <span class=\"hljs-meta\"># AWS 云平台地址</span>\n<span class=\"hljs-symbol\">  url:</span> https:<span class=\"hljs-comment\">//bank-logo-78458784254.s3-accesspoint.us-east-1.amazonaws.com/</span></code></pre><p><h1 id=\"5c09g\">3.S3Config</h1><div></div></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.config;\n\n<span class=\"hljs-keyword\">import</span> com.amazonaws.ClientConfiguration;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.Protocol;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.AWSCredentials;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.AWSCredentialsProvider;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.AWSStaticCredentialsProvider;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.auth.BasicAWSCredentials;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.client.builder.AwsClientBuilder;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.regions.Region;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.regions.Regions;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.AmazonS3;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.AmazonS3Client;\n<span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.<span class=\"hljs-keyword\">annotation</span>.Value;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.context.config.<span class=\"hljs-keyword\">annotation</span>.RefreshScope;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.Configuration;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/11/19 9:49\n */</span>\n<span class=\"hljs-meta\">@Slf4j</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@RefreshScope</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">S3Config</span></span>{\n\n    <span class=\"hljs-comment\">/**\n     * AWS 访问密钥\n     */</span>\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${s3.access_key}</span>\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String accessKey;\n\n    <span class=\"hljs-comment\">/**\n     * AWS SECRET_KEY\n     */</span>\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${s3.secret_key}</span>\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String secretKey;\n\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${s3.url}</span>\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String url;\n\n    <span class=\"hljs-comment\">/**\n     * 初始化生成AmazonS3 客户端配置\n     *\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> AmazonS3 amazonS3() {\n        log.info(<span class=\"hljs-string\">\"start create s3Client\"</span>);\n        AwsClientBuilder.EndpointConfiguration endpointConfig =\n                new AwsClientBuilder.EndpointConfiguration(url, Region.getRegion(Regions.US_EAST_1).getName());\n\n        AWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);\n        AWSCredentialsProvider awsCredentialsProvider = new AWSStaticCredentialsProvider(awsCredentials);\n        ClientConfiguration clientConfig = new ClientConfiguration();\n        clientConfig.setProtocol(Protocol.HTTPS);\n\n        AmazonS3 S3client = AmazonS3Client.builder()\n                .withEndpointConfiguration(endpointConfig)\n                .withClientConfiguration(clientConfig)\n                .withCredentials(awsCredentialsProvider)\n                .disableChunkedEncoding()\n                .withPathStyleAccessEnabled(<span class=\"hljs-literal\">true</span>)\n                .withForceGlobalBucketAccessEnabled(<span class=\"hljs-literal\">true</span>)\n                .build();\n        log.info(<span class=\"hljs-string\">\"create s3Client success\"</span>);\n        <span class=\"hljs-keyword\">return</span> S3client;\n    }\n}\n\n</code></pre><p><h1>UploadRecordService</h1></p><pre type=\"Java\"><code>package com.yoostar.service;\n\n<span class=\"hljs-keyword\">import</span> com.yoostar.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\"> * </span>Description:\n<span class=\"hljs-bullet\"> *\n </span>* @author: bright\n<span class=\"hljs-bullet\"> * </span>@date:Created in 2020/11/12 18:00\n */</span></span>\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UploadRecordService</span> </span>{\n    <span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\">     * </span>文件上传\n<span class=\"hljs-bullet\">     *\n     </span>* @param file\n<span class=\"hljs-bullet\">     * </span>@return\n<span class=\"hljs-code\">     */</span></span></span>\n    BaseVO upload(MultipartFile file);\n\n    <span class=\"hljs-comment\"><span class=\"markdown\">/**\n<span class=\"hljs-bullet\">     * </span>文件删除\n<span class=\"hljs-bullet\">     *\n     </span>* @param key\n<span class=\"hljs-bullet\">     * </span>@return\n<span class=\"hljs-code\">     */</span></span></span>\n    BaseVO delete(<span class=\"hljs-built_in\">String</span> key);\n\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"5c4ik\">UploadRecordServiceImpl</h1></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.service.impl;\n\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.AmazonS3;\n<span class=\"hljs-keyword\">import</span> com.amazonaws.services.s3.model.*;\n<span class=\"hljs-keyword\">import</span> com.yoostar.enumeration.ErrorCodeEnum;\n<span class=\"hljs-keyword\">import</span> com.yoostar.mapper.UploadRecordMapper;\n<span class=\"hljs-keyword\">import</span> com.yoostar.service.UploadRecordService;\n<span class=\"hljs-keyword\">import</span> com.yoostar.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-keyword\">import</span> javax.annotation.Resource;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/11/16 13:50\n */</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Slf</span>4j\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadRecordServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UploadRecordService</span> </span>{\n\n    <span class=\"hljs-meta\">@Resource</span>\n    <span class=\"hljs-keyword\">private</span> UploadRecordMapper uploadRecordMapper;\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${s3.file_bucket}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String fileBucket;\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${s3.url}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String url;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> AmazonS3 amazonS3;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">upload</span><span class=\"hljs-params\">(MultipartFile file)</span> </span>{\n        String fileName = file.getOriginalFilename();\n        <span class=\"hljs-keyword\">if</span> (fileName == <span class=\"hljs-keyword\">null</span>) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"传入的文件名不能为空\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0804.getKey(), ErrorCodeEnum.E0804.getValue());\n        }\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.validateFileName(fileName)) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"文件名应仅包含汉字、字母、数字、下划线和点号\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO(<span class=\"hljs-keyword\">false</span>, ErrorCodeEnum.E0805.getKey(), ErrorCodeEnum.E0805.getValue());\n        }\n\n        ObjectMetadata objectMetadata = <span class=\"hljs-keyword\">new</span> ObjectMetadata();\n        objectMetadata.setContentType(file.getContentType());\n        objectMetadata.setContentLength(file.getSize());\n\n        String key = System.currentTimeMillis() + fileName;\n        <span class=\"hljs-keyword\">try</span> {\n            PutObjectResult result = amazonS3.putObject(<span class=\"hljs-keyword\">new</span> PutObjectRequest(fileBucket, key, file.getInputStream(), objectMetadata)\n                    .withCannedAcl(CannedAccessControlList.BucketOwnerFullControl));   <span class=\"hljs-comment\">//配置文件访问权限</span>\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-comment\">//文件访问路径</span>\n        String address = url + fileBucket + <span class=\"hljs-string\">\"/\"</span> + key;\n        log.info(address);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">BaseVO <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(String key)</span> </span>{\n        amazonS3.deleteObject(<span class=\"hljs-keyword\">new</span> DeleteObjectRequest(fileBucket, key));\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BaseVO();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 验证文件名称：仅包含 汉字、字母、数字、下划线和点号\n     *\n     * <span class=\"hljs-doctag\">@param</span> fileName 文件名称\n     * <span class=\"hljs-doctag\">@return</span> 返回true表示符合要求\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">validateFileName</span><span class=\"hljs-params\">(String fileName)</span> </span>{\n        String regex = <span class=\"hljs-string\">\"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5_\\\\.]+$\"</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> fileName.<span class=\"hljs-title\">matches</span><span class=\"hljs-params\">(regex)</span></span>;\n    }\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"r5069\">分段上传可以改为</h1></p><pre type=\"Java\"><code>package com.yoostar.service.impl;\n\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.model.CannedAccessControlList;\nimport com.amazonaws.services.s3.model.DeleteObjectRequest;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.PutObjectRequest;\nimport com.amazonaws.services.s3.transfer.TransferManager;\nimport com.amazonaws.services.s3.transfer.TransferManagerBuilder;\nimport com.amazonaws.services.s3.transfer.Upload;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.yoostar.constants.Constant;\nimport com.yoostar.domain.UploadRecordDO;\nimport com.yoostar.dto.FileDTO;\nimport com.yoostar.enumeration.ErrorCodeEnum;\nimport com.yoostar.mapper.UploadRecordMapper;\nimport com.yoostar.service.UploadRecordService;\nimport com.yoostar.vo.BaseVO;\nimport com.yoostar.vo.FileVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * @author: bright\n * @date:Created in 2020/11/16 13:50\n */</span>\n@Service\n@Slf4j\npublic <span class=\"hljs-keyword\">class</span> UploadRecordServiceImpl implements UploadRecordService {\n\n    @Resource\n    <span class=\"hljs-keyword\">private</span> UploadRecordMapper uploadRecordMapper;\n\n    @<span class=\"hljs-constructor\">Value(<span class=\"hljs-string\">\"${s3.url}\"</span>)</span>\n    <span class=\"hljs-keyword\">private</span> String url;\n\n    @Autowired\n    <span class=\"hljs-keyword\">private</span> AmazonS3 amazonS3;\n\n    @Override\n    public BaseVO upload(MultipartFile file) {\n        String fileName = file.get<span class=\"hljs-constructor\">OriginalFilename()</span>;\n        <span class=\"hljs-keyword\">if</span> (fileName<span class=\"hljs-operator\"> == </span>null) {\n            log.error(<span class=\"hljs-string\">\"传入的文件名不能为空\"</span>);\n            return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">BaseVO(<span class=\"hljs-params\">false</span>, ErrorCodeEnum.E0804.<span class=\"hljs-params\">getKey</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorCodeEnum</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">E0804</span>.</span></span>get<span class=\"hljs-constructor\">Value()</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (!this.validate<span class=\"hljs-constructor\">FileName(<span class=\"hljs-params\">fileName</span>)</span>) {\n            log.error(<span class=\"hljs-string\">\"文件名应仅包含汉字、字母、数字、下划线和点号\"</span>);\n            return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">BaseVO(<span class=\"hljs-params\">false</span>, ErrorCodeEnum.E0805.<span class=\"hljs-params\">getKey</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorCodeEnum</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">E0805</span>.</span></span>get<span class=\"hljs-constructor\">Value()</span>);\n        }\n        <span class=\"hljs-comment\">//上传 s3 服务器</span>\n        ObjectMetadata objectMetadata = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ObjectMetadata()</span>;\n        objectMetadata.set<span class=\"hljs-constructor\">ContentType(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getContentType</span>()</span>);\n        objectMetadata.set<span class=\"hljs-constructor\">ContentLength(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getSize</span>()</span>);\n        String key = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>current<span class=\"hljs-constructor\">TimeMillis()</span> + fileName;\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">//分段上传</span>\n            TransferManager tm = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">TransferManagerBuilder</span>.</span></span>standard<span class=\"hljs-literal\">()</span>.<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">S3Client(<span class=\"hljs-params\">amazonS3</span>)</span>.build<span class=\"hljs-literal\">()</span>;\n            Upload upload = tm.upload(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">PutObjectRequest(Constant.<span class=\"hljs-params\">fileBucket</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getInputStream</span>()</span>, objectMetadata)\n                    <span class=\"hljs-comment\">//配置文件访问权限</span>\n                    .<span class=\"hljs-keyword\">with</span><span class=\"hljs-constructor\">CannedAcl(CannedAccessControlList.PublicReadWrite)</span>);\n            upload.wait<span class=\"hljs-constructor\">ForCompletion()</span>;\n        } catch (Exception e) {\n            e.print<span class=\"hljs-constructor\">StackTrace()</span>;\n        }\n        <span class=\"hljs-comment\">//文件访问路径</span>\n        String address = url + <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Constant</span>.</span></span>fileBucket + <span class=\"hljs-string\">\"/\"</span> + key;\n\n        FileVO fileVO = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FileVO()</span>;\n        <span class=\"hljs-comment\">//添加上传记录</span>\n        UploadRecordDO uploadRecord = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">UploadRecordDO()</span>;\n        uploadRecord.set<span class=\"hljs-constructor\">InnerName(<span class=\"hljs-params\">key</span>)</span>;\n        uploadRecord.set<span class=\"hljs-constructor\">CreateTime(<span class=\"hljs-params\">new</span> Date()</span>);\n        uploadRecordMapper.insert(uploadRecord);\n        fileVO.set<span class=\"hljs-constructor\">DownloadUrl(<span class=\"hljs-params\">address</span>)</span>;\n        return fileVO;\n    }\n\n    @Override\n    public BaseVO delete(FileDTO fileDTO) {\n        amazonS3.delete<span class=\"hljs-constructor\">Object(<span class=\"hljs-params\">new</span> DeleteObjectRequest(Constant.<span class=\"hljs-params\">fileBucket</span>, <span class=\"hljs-params\">fileDTO</span>.<span class=\"hljs-params\">getKey</span>()</span>));\n        uploadRecordMapper.delete(<span class=\"hljs-keyword\">new</span> QueryWrapper&lt;UploadRecordDO&gt;<span class=\"hljs-literal\">()</span>.eq(<span class=\"hljs-string\">\"inner_name\"</span>, fileDTO.get<span class=\"hljs-constructor\">Key()</span>));\n        return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">BaseVO()</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 验证文件名称：仅包含 汉字、字母、数字、下划线和点号\n     *\n     * @param fileName 文件名称\n     * @return 返回true表示符合要求\n     */</span>\n    <span class=\"hljs-keyword\">private</span> boolean validate<span class=\"hljs-constructor\">FileName(String <span class=\"hljs-params\">fileName</span>)</span> {\n        String regex = <span class=\"hljs-string\">\"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5_\\\\.]+$\"</span>;\n        return fileName.matches(regex);\n    }\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"5nb4f\">UploadRecordController</h1></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.controller;\n\n<span class=\"hljs-keyword\">import</span> com.yoostar.service.UploadRecordService;\n<span class=\"hljs-keyword\">import</span> com.yoostar.vo.BaseVO;\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.Api;\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiOperation;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.<span class=\"hljs-keyword\">annotation</span>.*;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n\n<span class=\"hljs-keyword\">import</span> javax.<span class=\"hljs-keyword\">annotation</span>.Resource;\n\n<span class=\"hljs-comment\">/**\n * Description:\n *\n * <span class=\"hljs-doctag\">@author</span>: bright\n * <span class=\"hljs-doctag\">@date</span>:Created in 2020/11/13 9:05\n */</span>\n<span class=\"hljs-meta\">@Api(tags = <span class=\"hljs-meta-string\">\"文件集合\"</span>)</span>\n<span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/file\"</span>)</span>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadRecordController</span> </span>{\n    <span class=\"hljs-meta\">@Resource</span>\n    <span class=\"hljs-keyword\">private</span> UploadRecordService uploadRecordService;\n\n    <span class=\"hljs-meta\">@ApiOperation(value = <span class=\"hljs-meta-string\">\"上传文件接口\"</span>)</span>\n    <span class=\"hljs-meta\">@PostMapping(value = <span class=\"hljs-meta-string\">\"/upload\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> BaseVO upload(MultipartFile file) {\n        <span class=\"hljs-keyword\">return</span> uploadRecordService.upload(file);\n    }\n\n    <span class=\"hljs-meta\">@ApiOperation(value = <span class=\"hljs-meta-string\">\"删除文件接口\"</span>)</span>\n    <span class=\"hljs-meta\">@DeleteMapping(<span class=\"hljs-meta-string\">\"/delete/{key}\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> BaseVO delete(<span class=\"hljs-meta\">@PathVariable(<span class=\"hljs-meta-string\">\"key\"</span>)</span> String key) {\n        <span class=\"hljs-keyword\">return</span> uploadRecordService.delete(key);\n    }\n}\n\n</code></pre><p><br></p><div></div><p><h1 id=\"w6q8a\">4.测试</h1><div><img src=\"https://img-blog.csdnimg.cn/20201126102808226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><div><img src=\"https://img-blog.csdnimg.cn/20201126102823455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201126102912561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><br></div><h1 id=\"aa4hm\">删除文件</h1><div><img src=\"https://img-blog.csdnimg.cn/20201126103006533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"bps8e\"><font color=\"#c24f4a\">踩坑记得把这些地址设置不然会出现权限问题和访问不到的问题</font></h1><div><img src=\"https://img-blog.csdnimg.cn/20201126190133466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"!](https://img-blog.csdnimg.cn/20201126190108193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center)\"><img src=\"https://img-blog.csdnimg.cn/2020112619020397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><font color=\"#c24f4a\"><br></font></div><h1 id=\"vgrdi\">注意上传大文件nginx需要做如下配置</h1><div></div></p><pre type=\"JSON\"><code><span class=\"hljs-attr\">找到自己主机的nginx.conf配置文件，打开</span>\n<span class=\"hljs-attr\">在http{}中加入</span>\n<span class=\"hljs-comment\">    #客户端文件上传的大小</span>\n    <span class=\"hljs-attr\">client_max_body_size</span> <span class=\"hljs-string\">500m;</span>\n<span class=\"hljs-comment\">    #用于tomcat反向代理,解决nginx 504错误 </span>\n    <span class=\"hljs-attr\">proxy_connect_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_send_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_read_timeout</span> <span class=\"hljs-string\">300; #单位秒 </span>\n    <span class=\"hljs-attr\">proxy_buffer_size</span> <span class=\"hljs-string\">16k; </span>\n    <span class=\"hljs-attr\">proxy_buffers</span> <span class=\"hljs-string\">4 64k; </span>\n    <span class=\"hljs-attr\">proxy_busy_buffers_size</span> <span class=\"hljs-string\">128k; </span>\n    <span class=\"hljs-attr\">proxy_temp_file_write_size</span> <span class=\"hljs-string\">128k;</span>\n<span class=\"hljs-comment\">    # ps:以timeout结尾配置项时间要配置大点</span>\n<span class=\"hljs-attr\">然后重启nginx</span>\n</code></pre>','1','0','1','1','1','2021-01-04 14:55:30','2021-01-04 14:55:30'),(23,'http://qiniu-picture.xiyanit.cn/Fn3i1lDyuqTiQ7hWFL0_v0SsiUaT','Docker搭建MySQL8主从复制','Mysql,Docker,Linux,','Docker搭建MySQL8主从复制',5,0,0,'1',1,'<h1 id=\"bhp0f\">使用Docker搭建主从</h1><h1 id=\"0ea3n\">使用Docker拉取MySQL镜像，使用8.0.19版本</h1><h1 id=\"ei6su\">1.下载8.0.19版本：</h1><pre type=\"Bash\"><code>docker pull mysql:<span class=\"hljs-number\">8.0</span><span class=\"hljs-number\">.19</span></code></pre><p><br></p><h1 id=\"sjpoq\">2.下载完成后，可以使用如下命令查看mysql镜像：</h1><pre type=\"Shell Session\"><code><span class=\"hljs-attribute\">docker images</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201019121020751.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"ixb9a\">3.使用下载好的镜像搭建MySQL主从</h1><font size=\"4\">Master：</font><pre type=\"Shell Session\"><code>docker run -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> --name mysql-master -e MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">12345678</span> -d mysql:<span class=\"hljs-number\">8.0</span><span class=\"hljs-number\">.19</span></code></pre><p><br></p><p><font size=\"4\">Slave：</font><br></p><pre type=\"Bash\"><code>docker run -p <span class=\"hljs-number\">3307</span>:<span class=\"hljs-number\">3306</span> --name mysql-slave -e MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">12345678</span> -d mysql:<span class=\"hljs-number\">8.0</span><span class=\"hljs-number\">.19</span></code></pre><p><font size=\"5\">Master对外映射的端口号是3306，Slave对外映射的端口号是3306，大家可以自己随意设置。因为docker容器是相互隔离的，每个容器有其独立的IP地址，所以不同容器使用相同的端口并不会冲突。如果是在生产环境，肯定是在不同的机器上安装MySQL，相对来说会简单一些。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019121240859.png#pic_center\" alt=\"在这里插入图片描述\"></p><h1 id=\"up2qd\">4.容器启动完成后，可以通过MySQL连接工具进行连接测试，看是否能成功</h1><p><img src=\"https://img-blog.csdnimg.cn/20201019121328844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/2020101912134421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"d8uwv\">5.配置Master</h1><font size=\"4\">使用如下命令进入到Master容器内部，使用容器ID或者名称均可：</font><br><pre type=\"Bash\"><code><span class=\"hljs-symbol\">docker</span> exec -<span class=\"hljs-keyword\">it </span><span class=\"hljs-number\">8</span>b71301f25ed /<span class=\"hljs-keyword\">bin/bash	</span>//<span class=\"hljs-number\">8</span>b71301f25ed为容器ID\n<span class=\"hljs-symbol\">docker</span> exec -<span class=\"hljs-keyword\">it </span>mysql-master /<span class=\"hljs-keyword\">bin/bash	</span>//mysql-master为容器名称</code></pre><p><font size=\"4\">切换到 /etc/mysql 目录下</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019121538847.png#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"5\">docker内部安装vim</font><br><font size=\"4\">很简单，依次输入如下命令即可安装，时间和网速有关，耐心等待。</font><br></p><pre type=\"Bash\"><code>apt-<span class=\"hljs-builtin-name\">get</span> update\n\napt-<span class=\"hljs-builtin-name\">get</span> install vim</code></pre><p><font size=\"4\">安装成功后，编辑my.cnf文件</font><br></p><pre type=\"XML\"><code><span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-comment\">## 同一局域网内注意要唯一</span>\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">100</span> \n<span class=\"hljs-comment\">## 开启二进制日志功能，可以随便取（关键）</span>\n<span class=\"hljs-attr\">log-bin</span>=master-bin\n<span class=\"hljs-attr\">binlog-format</span>=ROW // 二级制日志格式，有三种 row，statement，mixed\n<span class=\"hljs-attr\">binlog-do-db</span>=数据库名 //同步的数据库名称,如果不配置，表示同步所有的库</code></pre><p><font size=\"4\">配置完成后，退出docker容器，重启mysql服务使其修改的配置文件生效，使用如下命令使mysql进行重启</font><br></p><pre type=\"Bash\"><code>docker restart mysql-<span class=\"hljs-literal\">master</span></code></pre><h1 id=\"xz7aq\">6.配置Slave</h1><font size=\"4\">类似于Master，使用docker命令docker exec -it mysql-slave /bin/bash 进入到slave容器中，进入到etc/mysql路径，使用vim命令编辑my.cnf文件：</font><br><pre type=\"JSON\"><code><span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-comment\">## 设置server_id,注意要唯一</span>\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">101</span> \n<span class=\"hljs-comment\">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span>\n<span class=\"hljs-attr\">log-bin</span>=mysql-slave-bin \n<span class=\"hljs-comment\">## relay_log配置中继日志</span>\n<span class=\"hljs-attr\">relay_log</span>=mysql-relay-bin \n<span class=\"hljs-attr\">read_only</span>=<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">## 设置为只读,该项如果不设置，表示slave可读可写</span></code></pre><p><font size=\"4\">配置完成后，退出docker容器，重启mysql服务使其修改的配置文件生效，使用如下命令使mysql进行重启</font><br></p><pre type=\"Shell Session\"><code>docker restart mysql-<span class=\"hljs-literal\">slave</span></code></pre><h1 id=\"6brbi\">7.开启Master-Slave主从复制</h1><h1 id=\"rq3z6\">7.1 进入Master库mysql客户端：输入show master status查看Master状态：</h1><div><img src=\"https://img-blog.csdnimg.cn/20201019122130253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><div></div><h1 id=\"tfku8\">7.2 记住File和Position，后面需要用到。此时一定不要操作Master库，否则将会引起Master状态的变化，File和Position字段也将会进行变化。</h1><font size=\"4\">master_host ：Master库的地址，指的是容器的独立ip,可以通过<br>docker inspect --format=\'{{.NetworkSettings.IPAddress}}\' 容器名称 | 容器id查询容器的IP进行查询：</font><br><pre type=\"Bash\"><code><span class=\"hljs-attribute\">docker inspect --format</span>=<span class=\"hljs-string\">\'{{.NetworkSettings.IPAddress}}\'</span> mysql-master</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201019122625279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"5mjbw\">7.3 进入到Slave库myslq客户端，执行如下命令：</h1><pre type=\"Bash\"><code>change master <span class=\"hljs-keyword\">to</span> <span class=\"hljs-attribute\">master_host</span>=<span class=\"hljs-string\">\'172.17.0.2\'</span>, <span class=\"hljs-attribute\">master_user</span>=<span class=\"hljs-string\">\'root\'</span>, <span class=\"hljs-attribute\">master_password</span>=<span class=\"hljs-string\">\'12345678\'</span>, <span class=\"hljs-attribute\">master_port</span>=3306, <span class=\"hljs-attribute\">master_log_file</span>=<span class=\"hljs-string\">\'master-bin.000001\'</span>, <span class=\"hljs-attribute\">master_log_pos</span>=3552, <span class=\"hljs-attribute\">master_connect_retry</span>=30;\n</code></pre><p><font size=\"4\">master_host ：Master库的地址，指的是容器的独立ip,可以通过<br><font color=\"#c24f4a\">docker inspect --format=\'{{.NetworkSettings.IPAddress}}\' 容器名称 | 容器id查询容器的IP进行查询：</font><br>master_port：Master的端口号，指的是容器的端口号<br>master_user：用于数据同步的用户<br>master_password：用于同步的用户的密码<br>master_log_file：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值<br>master_log_pos：从哪个 Position 开始读，即上文中提到的 Position 字段的值<br>master_connect_retry：如果连接失败，重试的时间间隔，单位是秒，默认是60秒<br><br>启动slave</font></p><pre type=\"Bash\"><code><span class=\"hljs-literal\">start</span> <span class=\"hljs-literal\">slave</span>\n</code></pre><p><font size=\"4\">查询slave</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">slave</span> <span class=\"hljs-keyword\">status</span> \\G;</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201019122927432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">使用start slave开启主从复制过程后，如果SlaveIORunning一直是Connecting，则说明主从复制一直处于连接状态，这种情况一般是下面几种原因造成的，我们可以根据 Last_IO_Error提示予以排除。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019122941767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">1、网络不通：检查ip,端口<br>2、密码不对：检查是否创建用于同步的用户和用户密码是否正确<br>3、pos不对：检查Master的 Position<br><br><font color=\"#c24f4a\">正常启动后如下必须二个都位YES：</font></font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019122954679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\"><font color=\"#c24f4a\">Slave_IO_Running 和 Slave_SQL_Running 都是Yes</font>，说明主从复制已经开启。此时可以测试数据同步是否成功。</font></p><h1 id=\"bsqo6\">8.主从复制测试</h1><p><img src=\"https://img-blog.csdnimg.cn/20201019123330368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201019123428688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p><p><img src=\"https://img-blog.csdnimg.cn/20201019123444403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"wf6bt\">补充： show slave status\\G 的完成配置信息</h1><font size=\"4\">如何停止从服务复制功能<br>使用<font color=\"#c24f4a\">stop slave;</font>命令<br><br>如何重新配置主从<br>使用这两个命令<font color=\"#c24f4a\"> stop slave; reset master;</font></font>','<h1 id=\"bhp0f\">使用Docker搭建主从</h1><h1 id=\"0ea3n\">使用Docker拉取MySQL镜像，使用8.0.19版本</h1><h1 id=\"ei6su\">1.下载8.0.19版本：</h1><pre type=\"Bash\"><code>docker pull mysql:<span class=\"hljs-number\">8.0</span><span class=\"hljs-number\">.19</span></code></pre><p><br></p><h1 id=\"sjpoq\">2.下载完成后，可以使用如下命令查看mysql镜像：</h1><pre type=\"Shell Session\"><code><span class=\"hljs-attribute\">docker images</span></code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201019121020751.png#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"ixb9a\">3.使用下载好的镜像搭建MySQL主从</h1><font size=\"4\">Master：</font><pre type=\"Shell Session\"><code>docker run -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> --name mysql-master -e MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">12345678</span> -d mysql:<span class=\"hljs-number\">8.0</span><span class=\"hljs-number\">.19</span></code></pre><p><br></p><p><font size=\"4\">Slave：</font><br></p><pre type=\"Bash\"><code>docker run -p <span class=\"hljs-number\">3307</span>:<span class=\"hljs-number\">3306</span> --name mysql-slave -e MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">12345678</span> -d mysql:<span class=\"hljs-number\">8.0</span><span class=\"hljs-number\">.19</span></code></pre><p><font size=\"5\">Master对外映射的端口号是3306，Slave对外映射的端口号是3306，大家可以自己随意设置。因为docker容器是相互隔离的，每个容器有其独立的IP地址，所以不同容器使用相同的端口并不会冲突。如果是在生产环境，肯定是在不同的机器上安装MySQL，相对来说会简单一些。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019121240859.png#pic_center\" alt=\"在这里插入图片描述\"></p><h1 id=\"up2qd\">4.容器启动完成后，可以通过MySQL连接工具进行连接测试，看是否能成功</h1><p><img src=\"https://img-blog.csdnimg.cn/20201019121328844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/2020101912134421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"d8uwv\">5.配置Master</h1><font size=\"4\">使用如下命令进入到Master容器内部，使用容器ID或者名称均可：</font><br><pre type=\"Bash\"><code><span class=\"hljs-symbol\">docker</span> exec -<span class=\"hljs-keyword\">it </span><span class=\"hljs-number\">8</span>b71301f25ed /<span class=\"hljs-keyword\">bin/bash	</span>//<span class=\"hljs-number\">8</span>b71301f25ed为容器ID\n<span class=\"hljs-symbol\">docker</span> exec -<span class=\"hljs-keyword\">it </span>mysql-master /<span class=\"hljs-keyword\">bin/bash	</span>//mysql-master为容器名称</code></pre><p><font size=\"4\">切换到 /etc/mysql 目录下</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019121538847.png#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"5\">docker内部安装vim</font><br><font size=\"4\">很简单，依次输入如下命令即可安装，时间和网速有关，耐心等待。</font><br></p><pre type=\"Bash\"><code>apt-<span class=\"hljs-builtin-name\">get</span> update\n\napt-<span class=\"hljs-builtin-name\">get</span> install vim</code></pre><p><font size=\"4\">安装成功后，编辑my.cnf文件</font><br></p><pre type=\"XML\"><code><span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-comment\">## 同一局域网内注意要唯一</span>\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">100</span> \n<span class=\"hljs-comment\">## 开启二进制日志功能，可以随便取（关键）</span>\n<span class=\"hljs-attr\">log-bin</span>=master-bin\n<span class=\"hljs-attr\">binlog-format</span>=ROW // 二级制日志格式，有三种 row，statement，mixed\n<span class=\"hljs-attr\">binlog-do-db</span>=数据库名 //同步的数据库名称,如果不配置，表示同步所有的库</code></pre><p><font size=\"4\">配置完成后，退出docker容器，重启mysql服务使其修改的配置文件生效，使用如下命令使mysql进行重启</font><br></p><pre type=\"Bash\"><code>docker restart mysql-<span class=\"hljs-literal\">master</span></code></pre><h1 id=\"xz7aq\">6.配置Slave</h1><font size=\"4\">类似于Master，使用docker命令docker exec -it mysql-slave /bin/bash 进入到slave容器中，进入到etc/mysql路径，使用vim命令编辑my.cnf文件：</font><br><pre type=\"JSON\"><code><span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-comment\">## 设置server_id,注意要唯一</span>\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">101</span> \n<span class=\"hljs-comment\">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span>\n<span class=\"hljs-attr\">log-bin</span>=mysql-slave-bin \n<span class=\"hljs-comment\">## relay_log配置中继日志</span>\n<span class=\"hljs-attr\">relay_log</span>=mysql-relay-bin \n<span class=\"hljs-attr\">read_only</span>=<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">## 设置为只读,该项如果不设置，表示slave可读可写</span></code></pre><p><font size=\"4\">配置完成后，退出docker容器，重启mysql服务使其修改的配置文件生效，使用如下命令使mysql进行重启</font><br></p><pre type=\"Shell Session\"><code>docker restart mysql-<span class=\"hljs-literal\">slave</span></code></pre><h1 id=\"6brbi\">7.开启Master-Slave主从复制</h1><h1 id=\"rq3z6\">7.1 进入Master库mysql客户端：输入show master status查看Master状态：</h1><div><img src=\"https://img-blog.csdnimg.cn/20201019122130253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><div></div><h1 id=\"tfku8\">7.2 记住File和Position，后面需要用到。此时一定不要操作Master库，否则将会引起Master状态的变化，File和Position字段也将会进行变化。</h1><font size=\"4\">master_host ：Master库的地址，指的是容器的独立ip,可以通过<br>docker inspect --format=\'{{.NetworkSettings.IPAddress}}\' 容器名称 | 容器id查询容器的IP进行查询：</font><br><pre type=\"Bash\"><code><span class=\"hljs-attribute\">docker inspect --format</span>=<span class=\"hljs-string\">\'{{.NetworkSettings.IPAddress}}\'</span> mysql-master</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201019122625279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"5mjbw\">7.3 进入到Slave库myslq客户端，执行如下命令：</h1><pre type=\"Bash\"><code>change master <span class=\"hljs-keyword\">to</span> <span class=\"hljs-attribute\">master_host</span>=<span class=\"hljs-string\">\'172.17.0.2\'</span>, <span class=\"hljs-attribute\">master_user</span>=<span class=\"hljs-string\">\'root\'</span>, <span class=\"hljs-attribute\">master_password</span>=<span class=\"hljs-string\">\'12345678\'</span>, <span class=\"hljs-attribute\">master_port</span>=3306, <span class=\"hljs-attribute\">master_log_file</span>=<span class=\"hljs-string\">\'master-bin.000001\'</span>, <span class=\"hljs-attribute\">master_log_pos</span>=3552, <span class=\"hljs-attribute\">master_connect_retry</span>=30;\n</code></pre><p><font size=\"4\">master_host ：Master库的地址，指的是容器的独立ip,可以通过<br><font color=\"#c24f4a\">docker inspect --format=\'{{.NetworkSettings.IPAddress}}\' 容器名称 | 容器id查询容器的IP进行查询：</font><br>master_port：Master的端口号，指的是容器的端口号<br>master_user：用于数据同步的用户<br>master_password：用于同步的用户的密码<br>master_log_file：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值<br>master_log_pos：从哪个 Position 开始读，即上文中提到的 Position 字段的值<br>master_connect_retry：如果连接失败，重试的时间间隔，单位是秒，默认是60秒<br><br>启动slave</font></p><pre type=\"Bash\"><code><span class=\"hljs-literal\">start</span> <span class=\"hljs-literal\">slave</span>\n</code></pre><p><font size=\"4\">查询slave</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">slave</span> <span class=\"hljs-keyword\">status</span> \\G;</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20201019122927432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">使用start slave开启主从复制过程后，如果SlaveIORunning一直是Connecting，则说明主从复制一直处于连接状态，这种情况一般是下面几种原因造成的，我们可以根据 Last_IO_Error提示予以排除。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019122941767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">1、网络不通：检查ip,端口<br>2、密码不对：检查是否创建用于同步的用户和用户密码是否正确<br>3、pos不对：检查Master的 Position<br><br><font color=\"#c24f4a\">正常启动后如下必须二个都位YES：</font></font></p><p><img src=\"https://img-blog.csdnimg.cn/20201019122954679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\"><font color=\"#c24f4a\">Slave_IO_Running 和 Slave_SQL_Running 都是Yes</font>，说明主从复制已经开启。此时可以测试数据同步是否成功。</font></p><h1 id=\"bsqo6\">8.主从复制测试</h1><p><img src=\"https://img-blog.csdnimg.cn/20201019123330368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201019123428688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p><p><img src=\"https://img-blog.csdnimg.cn/20201019123444403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"wf6bt\">补充： show slave status\\G 的完成配置信息</h1><font size=\"4\">如何停止从服务复制功能<br>使用<font color=\"#c24f4a\">stop slave;</font>命令<br><br>如何重新配置主从<br>使用这两个命令<font color=\"#c24f4a\"> stop slave; reset master;</font></font>','1','8','1','1','1','2021-01-04 15:39:01','2021-01-04 15:40:15'),(24,'http://qiniu-picture.xiyanit.cn/FoQ649kOjA_gCHo93tsCYVfSBVdP','vue去掉url中的#','Vue,','vue去掉url中的#',0,0,0,'1',1,' <p><h1 id=\"5gvjg\">1.前端修改router下的js文件</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016155856442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"74dtw\">2.修改config下的index.js</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016155936386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"icizp\">3.项目打包上传到服务器</h1></p><pre type=\"Bash\"><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span></code></pre><div></div><p><h1 id=\"y7pcc\"><img src=\"https://img-blog.csdnimg.cn/20201016160054578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></h1><h1 id=\"y7pcc\">4.配置nginx</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016160152243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"ikwls\">5.重启nginx并访问你的项目</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016160234683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div></p>',' <p><h1 id=\"5gvjg\">1.前端修改router下的js文件</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016155856442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"74dtw\">2.修改config下的index.js</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016155936386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"icizp\">3.项目打包上传到服务器</h1></p><pre type=\"Bash\"><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span></code></pre><div></div><p><h1 id=\"y7pcc\"><img src=\"https://img-blog.csdnimg.cn/20201016160054578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></h1><h1 id=\"y7pcc\">4.配置nginx</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016160152243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"ikwls\">5.重启nginx并访问你的项目</h1><div><img src=\"https://img-blog.csdnimg.cn/20201016160234683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div></p>','1','4','1','1','1','2021-01-04 15:44:29','2021-01-04 15:44:29'),(25,'http://qiniu-picture.xiyanit.cn/Fgs1_SaXiTMOMO1l974GNhCKsTkw','vue整合vue-i18n最新版本实现国际化兼容elemen','Vue,ElementUI,','vue整合vue-i18n最新版本实现国际化兼容elementui',0,0,0,'1',1,' <p><h1 id=\"qwjqw\">1安装vue-i18n</h1></p><pre type=\"Bash\"><code>npm install vue-i18n --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span></code></pre><p><br></p><p><h1 id=\"oi44f\">2.语言包文件</h1><font size=\"5\">en.js</font></p><pre type=\"JavaScript\"><code><span class=\"hljs-attr\">//英语</span>\n<span class=\"hljs-attr\">const</span> <span class=\"hljs-string\">en = {</span>\n    <span class=\"hljs-attr\">//切换语言</span>\n    <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">ar</span>: <span class=\"hljs-string\">\'Arabic\',</span>\n        <span class=\"hljs-attr\">en</span>: <span class=\"hljs-string\">\'English\',</span>\n        <span class=\"hljs-attr\">es</span>: <span class=\"hljs-string\">\'Spain\',</span>\n        <span class=\"hljs-attr\">pt</span>: <span class=\"hljs-string\">\'Arabic\',</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//路由</span>\n    <span class=\"hljs-attr\">router</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">dashboard</span>: <span class=\"hljs-string\">\'Account\',</span>\n            <span class=\"hljs-attr\">product</span>: <span class=\"hljs-string\">\'Product\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'Order\',</span>\n            <span class=\"hljs-attr\">setting</span>: <span class=\"hljs-string\">\'Setting\',</span>\n            <span class=\"hljs-attr\">logout</span>: <span class=\"hljs-string\">\'Logout\'</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//所有卡片标题</span>\n    <span class=\"hljs-attr\">card</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">\'Account\',</span>\n            <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">\'Pending Events\',</span>\n            <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">\'Devices\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'Order\',</span>\n            <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\'Set password\',</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\'Set Automatic renewal\',</span>\n            <span class=\"hljs-attr\">information</span>: <span class=\"hljs-string\">\'Order Information\',</span>\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'Payment Method\',</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//用户界面</span>\n    <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">info</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Name\",</span>\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"Email\",</span>\n            <span class=\"hljs-attr\">service</span>: <span class=\"hljs-string\">\"Service\",</span>\n            <span class=\"hljs-attr\">remaining</span>: <span class=\"hljs-string\">\"Remaining days\",</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\"Continue renewal status\",</span>\n            <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-string\">\"Create Time\",</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">remark1</span>: <span class=\"hljs-string\">\"You have\",</span>\n            <span class=\"hljs-attr\">remark2</span>: <span class=\"hljs-string\">\"To be paid Order\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">\"Browser\",</span>\n            <span class=\"hljs-attr\">system</span>: <span class=\"hljs-string\">\"System\",</span>\n            <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">\"Language\",</span>\n            <span class=\"hljs-attr\">loginTime</span>: <span class=\"hljs-string\">\"Login Time\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">buttom</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">\"PayNow\"</span>\n        <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">export</span> <span class=\"hljs-string\">default en;</span>\n</code></pre><p><font size=\"5\">ar.js</font></p><pre type=\"JavaScript\"><code><span class=\"hljs-meta\">//</span> <span class=\"hljs-string\">阿拉伯语</span>\n<span class=\"hljs-attr\">const</span> <span class=\"hljs-string\">ar = {</span>\n    <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">ar</span>: <span class=\"hljs-string\">\' عربي ، \',</span>\n        <span class=\"hljs-attr\">en</span>: <span class=\"hljs-string\">\'الإنجليزية ،\',</span>\n        <span class=\"hljs-attr\">es</span>: <span class=\"hljs-string\">\'أسبانيا\',</span>\n        <span class=\"hljs-attr\">pt</span>: <span class=\"hljs-string\">\' عربي ،\',</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">router</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">dashboard</span>: <span class=\"hljs-string\">\'حساب\',</span>\n            <span class=\"hljs-attr\">product</span>: <span class=\"hljs-string\">\'برودكشن\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'أمر\',</span>\n            <span class=\"hljs-attr\">setting</span>: <span class=\"hljs-string\">\'إعداد\',</span>\n            <span class=\"hljs-attr\">logout</span>: <span class=\"hljs-string\">\'شطب\'</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">card</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">\'حساب\',</span>\n            <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">\'حدث غير محدد\',</span>\n            <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">\'معدّات\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'أمر\',</span>\n            <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\'تعيين كلمة المرور\',</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\'مجموعة التجديد التلقائي\',</span>\n            <span class=\"hljs-attr\">information</span>: <span class=\"hljs-string\">\'معلومات النظام\',</span>\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'شروط الدفع\',</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//用户界面</span>\n    <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">info</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"الاسم الكامل\",</span>\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"الايميل\",</span>\n            <span class=\"hljs-attr\">service</span>: <span class=\"hljs-string\">\"الايميل\",</span>\n            <span class=\"hljs-attr\">remaining</span>: <span class=\"hljs-string\">\"الأيام المتبقية\",</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\"استمرار حالة الاشتراك\",</span>\n            <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-string\">\"خلق الوقت\",</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">remark1</span>: <span class=\"hljs-string\">\"لديك\",</span>\n            <span class=\"hljs-attr\">remark2</span>: <span class=\"hljs-string\">\"أمر الدفع\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">\"براوزر\",</span>\n            <span class=\"hljs-attr\">system</span>: <span class=\"hljs-string\">\"نظم\",</span>\n            <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">\"لغوي\",</span>\n            <span class=\"hljs-attr\">loginTime</span>: <span class=\"hljs-string\">\"وقت الدخول\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">buttom</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">\"نقد\"</span>\n        <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">export</span> <span class=\"hljs-string\">default ar;</span>\n</code></pre><h1>3.main.js详细配置文件</h1><div><pre type=\"JavaScript\"><code><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue\'</span>\n\n<span class=\"hljs-comment\">// 移动端适配</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'lib-flexible/flexible\'</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'normalize.css/normalize.css\'</span> <span class=\"hljs-comment\">// A modern alternative to CSS resets</span>\n<span class=\"hljs-comment\">//引入i180</span>\n<span class=\"hljs-keyword\">import</span> VueI18n <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-i18n\'</span>\n\n<span class=\"hljs-comment\">//引入cookie</span>\n<span class=\"hljs-keyword\">import</span> Cookies <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'js-cookie\'</span>\n\n<span class=\"hljs-comment\">//引入各个语言的配置</span>\n<span class=\"hljs-keyword\">import</span> en <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/en\'</span>;\n<span class=\"hljs-keyword\">import</span> es <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/es\'</span>;\n<span class=\"hljs-keyword\">import</span> ar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/ar\'</span>;\n<span class=\"hljs-keyword\">import</span> pt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/pt\'</span>;\n\n<span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/display.css\'</span>;\n<span class=\"hljs-comment\">//引入各个elementui的语言包</span>\n<span class=\"hljs-keyword\">import</span> arLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/ar\'</span> <span class=\"hljs-comment\">//阿拉伯语 </span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/en\'</span> <span class=\"hljs-comment\">//英语</span>\n<span class=\"hljs-keyword\">import</span> esLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/es\'</span> <span class=\"hljs-comment\">//西班牙 </span>\n<span class=\"hljs-keyword\">import</span> ptLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/pt\'</span> <span class=\"hljs-comment\">//葡萄牙 </span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale\'</span>\n\n\n<span class=\"hljs-comment\">//引入jquery的爱心js</span>\n<span class=\"hljs-comment\">// import love from \"@/api/love\";</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'@/styles/index.scss\'</span> <span class=\"hljs-comment\">// global css</span>\n\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'./assets/icon/iconfont.css\'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./App\'</span>\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./router\'</span>\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./store\'</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'@/icons\'</span> <span class=\"hljs-comment\">// icon</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'@/permission\'</span> <span class=\"hljs-comment\">// permission control</span>\n\n<span class=\"hljs-comment\">//挂载</span>\nVue.use(VueI18n)\n\n<span class=\"hljs-comment\">//挂载elementui语言包</span>\nVue.use(ElementUI, {\n    locale\n})\n\n<span class=\"hljs-comment\">//设置默认语言标识并写入到Cookies中</span>\n<span class=\"hljs-keyword\">const</span> initLocale = Cookies.get(<span class=\"hljs-string\">\'locale\'</span>) || <span class=\"hljs-string\">\'en\'</span>;\n<span class=\"hljs-keyword\">let</span> lang = <span class=\"hljs-string\">\'\'</span>\n<span class=\"hljs-keyword\">if</span> (initLocale == <span class=\"hljs-string\">\"en\"</span>) {\n    lang = <span class=\"hljs-string\">\'en\'</span>\n    Cookies.set(<span class=\"hljs-string\">\'locale\'</span>, lang);\n}\n\n<span class=\"hljs-comment\">//实例化对象</span>\n<span class=\"hljs-keyword\">const</span> i18n = <span class=\"hljs-keyword\">new</span> VueI18n({\n        <span class=\"hljs-attr\">locale</span>: Cookies.get(<span class=\"hljs-string\">\'locale\'</span>) || lang, <span class=\"hljs-comment\">// 语言标识</span>\n        <span class=\"hljs-attr\">messages</span>: {\n            <span class=\"hljs-attr\">en</span>: <span class=\"hljs-built_in\">Object</span>.assign(en, enLocale), <span class=\"hljs-comment\">//英语</span>\n            <span class=\"hljs-attr\">es</span>: <span class=\"hljs-built_in\">Object</span>.assign(es, esLocale), <span class=\"hljs-comment\">//西班牙 </span>\n            <span class=\"hljs-attr\">ar</span>: <span class=\"hljs-built_in\">Object</span>.assign(ar, arLocale), <span class=\"hljs-comment\">// 阿拉伯语 </span>\n            <span class=\"hljs-attr\">pt</span>: <span class=\"hljs-built_in\">Object</span>.assign(pt, ptLocale) <span class=\"hljs-comment\">//葡萄牙 </span>\n        }\n    })\n    <span class=\"hljs-comment\">//ui组件的语言自动切换</span>\nlocale.i18n(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, value</span>) =&gt;</span> i18n.t(key, value))\n\nVue.config.productionTip = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">new</span> Vue({\n    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n    i18n,\n    router,\n    store,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\'&lt;App/&gt;\'</span>,\n    <span class=\"hljs-attr\">components</span>: {\n        App\n    }\n})\n</code></pre></div><p><h1>4.语法</h1></p><pre type=\"Html\"><code><span class=\"hljs-comment\">//vue组件模板的使用</span>\n&lt;<span class=\"hljs-built-in\">div</span>&gt;{{<span class=\"hljs-symbol\">$</span>t(<span class=\"hljs-string\">\'language.en\'</span>)}}&lt;/<span class=\"hljs-built-in\">div</span>&gt;\n\n<span class=\"hljs-comment\">//vue组件模板数据绑定的使用</span>\n&lt;input :placeholder=<span class=\"hljs-string\">\"$t(\'language.en\')\"</span>&gt;&lt;/input&gt;\n\n<span class=\"hljs-comment\">//vue组件data中赋值的使用</span>\ndata:{\nmsg:this.<span class=\"hljs-symbol\">$</span>t(<span class=\"hljs-string\">\'language.en\'</span>);\n}</code></pre><p><br></p><p><h1 id=\"j2r9h\">5.效果</h1></p><div><img src=\"https://img-blog.csdnimg.cn/20201001181724976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201001181823446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>',' <p><h1 id=\"qwjqw\">1安装vue-i18n</h1></p><pre type=\"Bash\"><code>npm install vue-i18n --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span></code></pre><p><br></p><p><h1 id=\"oi44f\">2.语言包文件</h1><font size=\"5\">en.js</font></p><pre type=\"JavaScript\"><code><span class=\"hljs-attr\">//英语</span>\n<span class=\"hljs-attr\">const</span> <span class=\"hljs-string\">en = {</span>\n    <span class=\"hljs-attr\">//切换语言</span>\n    <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">ar</span>: <span class=\"hljs-string\">\'Arabic\',</span>\n        <span class=\"hljs-attr\">en</span>: <span class=\"hljs-string\">\'English\',</span>\n        <span class=\"hljs-attr\">es</span>: <span class=\"hljs-string\">\'Spain\',</span>\n        <span class=\"hljs-attr\">pt</span>: <span class=\"hljs-string\">\'Arabic\',</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//路由</span>\n    <span class=\"hljs-attr\">router</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">dashboard</span>: <span class=\"hljs-string\">\'Account\',</span>\n            <span class=\"hljs-attr\">product</span>: <span class=\"hljs-string\">\'Product\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'Order\',</span>\n            <span class=\"hljs-attr\">setting</span>: <span class=\"hljs-string\">\'Setting\',</span>\n            <span class=\"hljs-attr\">logout</span>: <span class=\"hljs-string\">\'Logout\'</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//所有卡片标题</span>\n    <span class=\"hljs-attr\">card</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">\'Account\',</span>\n            <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">\'Pending Events\',</span>\n            <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">\'Devices\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'Order\',</span>\n            <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\'Set password\',</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\'Set Automatic renewal\',</span>\n            <span class=\"hljs-attr\">information</span>: <span class=\"hljs-string\">\'Order Information\',</span>\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'Payment Method\',</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//用户界面</span>\n    <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">info</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Name\",</span>\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"Email\",</span>\n            <span class=\"hljs-attr\">service</span>: <span class=\"hljs-string\">\"Service\",</span>\n            <span class=\"hljs-attr\">remaining</span>: <span class=\"hljs-string\">\"Remaining days\",</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\"Continue renewal status\",</span>\n            <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-string\">\"Create Time\",</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">remark1</span>: <span class=\"hljs-string\">\"You have\",</span>\n            <span class=\"hljs-attr\">remark2</span>: <span class=\"hljs-string\">\"To be paid Order\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">\"Browser\",</span>\n            <span class=\"hljs-attr\">system</span>: <span class=\"hljs-string\">\"System\",</span>\n            <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">\"Language\",</span>\n            <span class=\"hljs-attr\">loginTime</span>: <span class=\"hljs-string\">\"Login Time\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">buttom</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">\"PayNow\"</span>\n        <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">export</span> <span class=\"hljs-string\">default en;</span>\n</code></pre><p><font size=\"5\">ar.js</font></p><pre type=\"JavaScript\"><code><span class=\"hljs-meta\">//</span> <span class=\"hljs-string\">阿拉伯语</span>\n<span class=\"hljs-attr\">const</span> <span class=\"hljs-string\">ar = {</span>\n    <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">ar</span>: <span class=\"hljs-string\">\' عربي ، \',</span>\n        <span class=\"hljs-attr\">en</span>: <span class=\"hljs-string\">\'الإنجليزية ،\',</span>\n        <span class=\"hljs-attr\">es</span>: <span class=\"hljs-string\">\'أسبانيا\',</span>\n        <span class=\"hljs-attr\">pt</span>: <span class=\"hljs-string\">\' عربي ،\',</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">router</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">dashboard</span>: <span class=\"hljs-string\">\'حساب\',</span>\n            <span class=\"hljs-attr\">product</span>: <span class=\"hljs-string\">\'برودكشن\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'أمر\',</span>\n            <span class=\"hljs-attr\">setting</span>: <span class=\"hljs-string\">\'إعداد\',</span>\n            <span class=\"hljs-attr\">logout</span>: <span class=\"hljs-string\">\'شطب\'</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">card</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">\'حساب\',</span>\n            <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">\'حدث غير محدد\',</span>\n            <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">\'معدّات\',</span>\n            <span class=\"hljs-attr\">order</span>: <span class=\"hljs-string\">\'أمر\',</span>\n            <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\'تعيين كلمة المرور\',</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\'مجموعة التجديد التلقائي\',</span>\n            <span class=\"hljs-attr\">information</span>: <span class=\"hljs-string\">\'معلومات النظام\',</span>\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\'شروط الدفع\',</span>\n        <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">},</span>\n    <span class=\"hljs-attr\">//用户界面</span>\n    <span class=\"hljs-attr\">account</span>: <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">info</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"الاسم الكامل\",</span>\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"الايميل\",</span>\n            <span class=\"hljs-attr\">service</span>: <span class=\"hljs-string\">\"الايميل\",</span>\n            <span class=\"hljs-attr\">remaining</span>: <span class=\"hljs-string\">\"الأيام المتبقية\",</span>\n            <span class=\"hljs-attr\">renewal</span>: <span class=\"hljs-string\">\"استمرار حالة الاشتراك\",</span>\n            <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-string\">\"خلق الوقت\",</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">events</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">remark1</span>: <span class=\"hljs-string\">\"لديك\",</span>\n            <span class=\"hljs-attr\">remark2</span>: <span class=\"hljs-string\">\"أمر الدفع\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">\"براوزر\",</span>\n            <span class=\"hljs-attr\">system</span>: <span class=\"hljs-string\">\"نظم\",</span>\n            <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">\"لغوي\",</span>\n            <span class=\"hljs-attr\">loginTime</span>: <span class=\"hljs-string\">\"وقت الدخول\"</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">buttom</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">\"نقد\"</span>\n        <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">export</span> <span class=\"hljs-string\">default ar;</span>\n</code></pre><h1>3.main.js详细配置文件</h1><div><pre type=\"JavaScript\"><code><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue\'</span>\n\n<span class=\"hljs-comment\">// 移动端适配</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'lib-flexible/flexible\'</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'normalize.css/normalize.css\'</span> <span class=\"hljs-comment\">// A modern alternative to CSS resets</span>\n<span class=\"hljs-comment\">//引入i180</span>\n<span class=\"hljs-keyword\">import</span> VueI18n <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-i18n\'</span>\n\n<span class=\"hljs-comment\">//引入cookie</span>\n<span class=\"hljs-keyword\">import</span> Cookies <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'js-cookie\'</span>\n\n<span class=\"hljs-comment\">//引入各个语言的配置</span>\n<span class=\"hljs-keyword\">import</span> en <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/en\'</span>;\n<span class=\"hljs-keyword\">import</span> es <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/es\'</span>;\n<span class=\"hljs-keyword\">import</span> ar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/ar\'</span>;\n<span class=\"hljs-keyword\">import</span> pt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./i18n/config/pt\'</span>;\n\n<span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/display.css\'</span>;\n<span class=\"hljs-comment\">//引入各个elementui的语言包</span>\n<span class=\"hljs-keyword\">import</span> arLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/ar\'</span> <span class=\"hljs-comment\">//阿拉伯语 </span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/en\'</span> <span class=\"hljs-comment\">//英语</span>\n<span class=\"hljs-keyword\">import</span> esLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/es\'</span> <span class=\"hljs-comment\">//西班牙 </span>\n<span class=\"hljs-keyword\">import</span> ptLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale/lang/pt\'</span> <span class=\"hljs-comment\">//葡萄牙 </span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui/lib/locale\'</span>\n\n\n<span class=\"hljs-comment\">//引入jquery的爱心js</span>\n<span class=\"hljs-comment\">// import love from \"@/api/love\";</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'@/styles/index.scss\'</span> <span class=\"hljs-comment\">// global css</span>\n\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'./assets/icon/iconfont.css\'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./App\'</span>\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./router\'</span>\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./store\'</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'@/icons\'</span> <span class=\"hljs-comment\">// icon</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'@/permission\'</span> <span class=\"hljs-comment\">// permission control</span>\n\n<span class=\"hljs-comment\">//挂载</span>\nVue.use(VueI18n)\n\n<span class=\"hljs-comment\">//挂载elementui语言包</span>\nVue.use(ElementUI, {\n    locale\n})\n\n<span class=\"hljs-comment\">//设置默认语言标识并写入到Cookies中</span>\n<span class=\"hljs-keyword\">const</span> initLocale = Cookies.get(<span class=\"hljs-string\">\'locale\'</span>) || <span class=\"hljs-string\">\'en\'</span>;\n<span class=\"hljs-keyword\">let</span> lang = <span class=\"hljs-string\">\'\'</span>\n<span class=\"hljs-keyword\">if</span> (initLocale == <span class=\"hljs-string\">\"en\"</span>) {\n    lang = <span class=\"hljs-string\">\'en\'</span>\n    Cookies.set(<span class=\"hljs-string\">\'locale\'</span>, lang);\n}\n\n<span class=\"hljs-comment\">//实例化对象</span>\n<span class=\"hljs-keyword\">const</span> i18n = <span class=\"hljs-keyword\">new</span> VueI18n({\n        <span class=\"hljs-attr\">locale</span>: Cookies.get(<span class=\"hljs-string\">\'locale\'</span>) || lang, <span class=\"hljs-comment\">// 语言标识</span>\n        <span class=\"hljs-attr\">messages</span>: {\n            <span class=\"hljs-attr\">en</span>: <span class=\"hljs-built_in\">Object</span>.assign(en, enLocale), <span class=\"hljs-comment\">//英语</span>\n            <span class=\"hljs-attr\">es</span>: <span class=\"hljs-built_in\">Object</span>.assign(es, esLocale), <span class=\"hljs-comment\">//西班牙 </span>\n            <span class=\"hljs-attr\">ar</span>: <span class=\"hljs-built_in\">Object</span>.assign(ar, arLocale), <span class=\"hljs-comment\">// 阿拉伯语 </span>\n            <span class=\"hljs-attr\">pt</span>: <span class=\"hljs-built_in\">Object</span>.assign(pt, ptLocale) <span class=\"hljs-comment\">//葡萄牙 </span>\n        }\n    })\n    <span class=\"hljs-comment\">//ui组件的语言自动切换</span>\nlocale.i18n(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, value</span>) =&gt;</span> i18n.t(key, value))\n\nVue.config.productionTip = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">new</span> Vue({\n    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n    i18n,\n    router,\n    store,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\'&lt;App/&gt;\'</span>,\n    <span class=\"hljs-attr\">components</span>: {\n        App\n    }\n})\n</code></pre></div><p><h1>4.语法</h1></p><pre type=\"Html\"><code><span class=\"hljs-comment\">//vue组件模板的使用</span>\n&lt;<span class=\"hljs-built-in\">div</span>&gt;{{<span class=\"hljs-symbol\">$</span>t(<span class=\"hljs-string\">\'language.en\'</span>)}}&lt;/<span class=\"hljs-built-in\">div</span>&gt;\n\n<span class=\"hljs-comment\">//vue组件模板数据绑定的使用</span>\n&lt;input :placeholder=<span class=\"hljs-string\">\"$t(\'language.en\')\"</span>&gt;&lt;/input&gt;\n\n<span class=\"hljs-comment\">//vue组件data中赋值的使用</span>\ndata:{\nmsg:this.<span class=\"hljs-symbol\">$</span>t(<span class=\"hljs-string\">\'language.en\'</span>);\n}</code></pre><p><br></p><p><h1 id=\"j2r9h\">5.效果</h1></p><div><img src=\"https://img-blog.csdnimg.cn/20201001181724976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20201001181823446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>','1','4','1','1','1','2021-01-04 15:51:14','2021-01-04 15:51:14'),(26,'http://qiniu-picture.xiyanit.cn/FgBW6JBmNlKetu8gLg2bEFfJMuTM','Sentinel实现Gateway网关限流规则持久化','Java,Gateway,Sentinel,','Sentinel实现Gateway网关限流规则持久化',9,0,0,'1',1,'<h1 id=\"k553b\">1.网关限流持久化</h1><h1 id=\"7jo75\">1.1maven依赖</h1><pre type=\"XML\"><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;&lt;!<span class=\"hljs-attr\">--sentinel</span>限流熔断 <span class=\"hljs-attr\">--</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--sentinel限流规则持久化 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</span></code></pre><p><br></p><h1 id=\"xfmld\">1.2配置类</h1><div></div><pre type=\"Java\"><code>package com.yoostar.gateway.config;\n\n\nimport com.alibaba.cloud.sentinel.SentinelProperties;\nimport com.alibaba.cloud.sentinel.datasource.config.NacosDataSourceProperties;\nimport com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;\nimport com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;\nimport com.alibaba.csp.sentinel.datasource.ReadableDataSource;\nimport com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.TypeReference;\nimport org.springframework.beans.factory.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Autowired</span>;\nimport org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Bean</span>;\nimport org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Configuration</span>;\nimport org.springframework.core.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Order</span>;\n\nimport java.util.Set;\n\n<span class=\"hljs-regexp\">/**\n * @Description: 限流规则持久化\n * @author: bright\n * @Date: 2020/</span><span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">46</span>\n *<span class=\"hljs-regexp\">/\n@Configuration\n@Order(2)\npublic class SentinelPersistenceConfig {\n\n    @Autowired\n    private SentinelProperties sentinelProperties;\n\n    @Bean\n    public SentinelPersistenceConfig init() throws Exception {\n        loadGWFlowRule();\n        return new SentinelPersistenceConfig();\n    }\n\n    private void loadGWFlowRule() {\n        sentinelProperties.getDatasource().entrySet().stream().filter(map -&gt; {\n            return map.getValue().getNacos() != null;\n        }).forEach(map -&gt; {\n            NacosDataSourceProperties nacos = map.getValue().getNacos();\n            ReadableDataSource&lt;String, Set&lt;GatewayFlowRule&gt;&gt; gwFlowRuleDataSource = new NacosDataSource&lt;&gt;(\n                    nacos.getServerAddr(), nacos.getGroupId(), nacos.getDataId(),\n                    source -&gt; JSON.parseObject(source, new TypeReference&lt;Set&lt;GatewayFlowRule&gt;&gt;() {\n                    }));\n            GatewayRuleManager.register2Property(gwFlowRuleDataSource.getProperty());\n        });\n    }\n}\n</span></code></pre><h1 id=\"060eb\">1.3yml配置</h1><pre type=\"JSON\"><code><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">cloud:</span>        \n    <span class=\"hljs-attr\">sentinel:</span>\n      <span class=\"hljs-attr\">transport:</span>\n        <span class=\"hljs-attr\">dashboard:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8888</span>  \n      <span class=\"hljs-attr\">datasource:</span>\n        <span class=\"hljs-attr\">gate-way-flow:</span> \n          <span class=\"hljs-attr\">nacos:</span>\n            <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">ecc786d0-1555-4517-a5df-a65b9ac02590</span>\n            <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n            <span class=\"hljs-attr\">data-id:</span> <span class=\"hljs-string\">${spring.application.name}-rules</span>\n            <span class=\"hljs-attr\">group-id:</span> <span class=\"hljs-string\">DEFAULT_GROUP</span>\n            <span class=\"hljs-attr\">rule-type:</span> <span class=\"hljs-string\">gw_flow</span>\n      <span class=\"hljs-comment\"># 限流返回的响应</span>\n      <span class=\"hljs-attr\">scg:</span>\n        <span class=\"hljs-attr\">fallback:</span>\n          <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">response</span>\n          <span class=\"hljs-attr\">response-status:</span> <span class=\"hljs-number\">455</span>\n          <span class=\"hljs-attr\">response-body:</span> <span class=\"hljs-string\">error!</span>  \n    <span class=\"hljs-attr\">nacos:</span>\n      <span class=\"hljs-attr\">discovery:</span>\n        <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n        <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">ecc786d0-1555-4517-a5df-a65b9ac02590</span>\n</code></pre><p><br></p><div></div><h1 id=\"gok3r\">1.4编写限流配置</h1><div><img src=\"https://img-blog.csdnimg.cn/20200930112345934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20200930112411130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><br></div><pre type=\"JSON\"><code>[\n   {\n        <span class=\"hljs-attr\">\"resource\"</span>: <span class=\"hljs-string\">\"service-1\"</span>,\n        <span class=\"hljs-attr\">\"grade\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">\"count\"</span>: <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-attr\">\"intervalSec\"</span>: <span class=\"hljs-number\">1</span>\n    }\n]\n</code></pre><p><br></p><div></div><h1 id=\"2sh64\">1.5启动服务后查询sentinel控制台</h1><p><img src=\"https://img-blog.csdnimg.cn/20200930112501240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"8oyfv\">注意事项</h1><font size=\"4\"><b>注：如果你的Nacos配置了不同的隔离环境 namespace，则需要指定具体哪一个namespace，否则会加载不到规则配置，报错如下：<br><br>[c.a.c.s.datasource.converter.SentinelConverter ] line 80 : converter can not convert rules because source is empty<br><br>naocs 如下：</b></font><p><img src=\"https://img-blog.csdnimg.cn/20200930112249826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"ofejm\">二、Nacos与Sentinel互相同步限流规则</h1><h2 id=\"gf5a5\">1、流控推送规则</h2><font size=\"4\">要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：<br><br>https://github.com/alibaba/Sentinel/wiki/Sentinel-控制台（集群流控管理）#规则配置<br><br>其控制台推送规则：<br><br>将规则推送到Nacos或其他远程配置中心<br>Sentinel客户端链接Nacos，获取规则配置；并监听Nacos配置变化，如发生变化，就更新本地缓存。<br>控制台监听Nacos配置变化，如发生变化就更新本地缓存。从而让控制台本地缓存总是和Nacos一致。</font><br><br><h2 id=\"pe8wv\">2、改造sentinel-dashboard</h2><h2 id=\"ya3cj\">2.1 通关git官网下载Sentinel 源代码，如下：</h2><pre type=\"Bash\"><code>https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/alibaba/</span>Sentinel<span class=\"hljs-regexp\">/archive/</span><span class=\"hljs-number\">1.7</span>.<span class=\"hljs-number\">2</span>.zip</code></pre><p>下载后解压，使用IDEA打开如下：</p><p><img src=\"https://img-blog.csdnimg.cn/20200930113432829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><br></p><h2 id=\"62eo7\">2.2 修改sentinel-dashboard 控制台模块的pom.xml，将test注释掉</h2><pre type=\"XML\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p><br></p><h2 id=\"s1n36\">2.3 修改sidebar.html页面（sentinel控制台左边菜单栏）</h2><pre type=\"Bash\"><code>sentinel-dashboard<span class=\"hljs-regexp\">/src/m</span>ain<span class=\"hljs-regexp\">/webapp/</span>resources<span class=\"hljs-regexp\">/app/</span>scripts<span class=\"hljs-regexp\">/directives/</span>sidebar.html</code></pre><p><font size=\"4\">并找到如下代码段后，并把注释打开，名称也稍作修改。<br><br>修改前：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113553397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">修改后：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113559211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h2 id=\"7372a\">2.4 修改nacos相关java代码</h2><font size=\"4\">找到如下目录（位于test目录）<br><br>sentinel-dashboard/src/test/java/com/alibaba/csp/sentinel/dashboard/rule/nacos<br><br>将整个目录拷贝到<br><br>sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/rule/nacos<br><br>修改com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2.java<br><br>修改如下：</font><p><img src=\"https://img-blog.csdnimg.cn/2020093011363927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"4\">其中，注入的两个bean：<br><br>flowRuleNacosProvider，就是实现Nacos的限流规则配置拉取。<br>flowRuleNacosPublisher，实现Nacos的配置推送。<br>FlowRuleNacosProvider.java 如下，无需修改</font></p><p><img src=\"https://img-blog.csdnimg.cn/202009301137209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">getRules方法中的appName参数是Sentinel中的服务名称。<br>configService.getConfig方法是从Nacos中获取配置信息的具体操作。其中，DataId和GroupId分别对应客户端使用时候的对应配置。如下：</font><br></p><pre type=\"Bash\"><code>spring<span class=\"hljs-selector-class\">.cloud</span><span class=\"hljs-selector-class\">.sentinel</span><span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.ds1</span><span class=\"hljs-selector-class\">.nacos</span>.server-addr=<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">100.80</span>:<span class=\"hljs-number\">8848</span>\nspring<span class=\"hljs-selector-class\">.cloud</span><span class=\"hljs-selector-class\">.sentinel</span><span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.ds1</span><span class=\"hljs-selector-class\">.nacos</span>.dataId=${spring<span class=\"hljs-selector-class\">.application</span>.name}-flow-rules\n</code></pre><p><font size=\"4\">FlowRuleNacosPublisher.java如下，无需修改：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113751453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">打开 NacosConfigUtil.java ，如下两个地方，需要和上面使用nacos存储时的配置一致。注意：两边的DataId和GroupId必须对应上。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113800101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br>打开 NacosConfig.java，修改如下，主要是nacos配置中心的地址与namespace隔离环境的配置修改，如果没有设置namespace，就可以不设置 PropertyKeyConst.NAMESPACE 。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113807913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br>经过以上步骤就已经把流控规则改造成推模式持久化了。</font><br><br></p><h2 id=\"bmhz8\">2.5 编译生成jar包</h2><font size=\"4\">执行命令</font><br><pre type=\"Bash\"><code>mvn clean <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">-DskipTests</span></code></pre><p><font size=\"4\">编译成功后，在项目的 target 目录可以找到sentinel-dashboard.jar ，执行以下命令可以启动控制台：</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">java </span>-<span class=\"hljs-keyword\">jar </span>sentinel-dashboard.<span class=\"hljs-keyword\">jar</span></code></pre><p><font size=\"4\">打开Sentinel控制台，可以看到上面通过nacos新建的限流规则</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113852449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">我们可以尝试在Sentinel控制台修改该规则，看是否能同步推送到Nacos，这里我们修改阈值为15，打开Nacos配置中心，可以看到已经更新过来了。</font></p><p><img src=\"https://img-blog.csdnimg.cn/202009301347132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">通过测试发现，在Sentinel控制台修改规则可以同步到Nacos，或者在Nacos上修改规则也可以同步到Sentinel控制台。</font><br></p><h2 id=\"39t78\">踩坑 （注意）</h2><font size=\"4\">这个springcloud版本如果是2.2.2就会启动报数据源找不到，注意<br>更换其它版本启动没有任何问题</font><pre type=\"XML\"><code><span class=\"xml\"> 	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">relativePath</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring-cloud-alibaba.version</span>&gt;</span>2.2.3.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring-cloud-alibaba.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring-cloud.version</span>&gt;</span>Hoxton.SR8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring-cloud.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swagger.version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swagger.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">logstash.version</span>&gt;</span>6.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">logstash.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fastjson.version</span>&gt;</span>1.2.73<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fastjson.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{spring-cloud.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{spring-cloud-alibaba.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span></span></code></pre>','<h1 id=\"k553b\">1.网关限流持久化</h1><h1 id=\"7jo75\">1.1maven依赖</h1><pre type=\"XML\"><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;&lt;!<span class=\"hljs-attr\">--sentinel</span>限流熔断 <span class=\"hljs-attr\">--</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--sentinel限流规则持久化 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</span></code></pre><p><br></p><h1 id=\"xfmld\">1.2配置类</h1><div></div><pre type=\"Java\"><code>package com.yoostar.gateway.config;\n\n\nimport com.alibaba.cloud.sentinel.SentinelProperties;\nimport com.alibaba.cloud.sentinel.datasource.config.NacosDataSourceProperties;\nimport com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;\nimport com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;\nimport com.alibaba.csp.sentinel.datasource.ReadableDataSource;\nimport com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.TypeReference;\nimport org.springframework.beans.factory.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Autowired</span>;\nimport org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Bean</span>;\nimport org.springframework.context.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Configuration</span>;\nimport org.springframework.core.<span class=\"hljs-keyword\">annotation</span>.<span class=\"hljs-title\">Order</span>;\n\nimport java.util.Set;\n\n<span class=\"hljs-regexp\">/**\n * @Description: 限流规则持久化\n * @author: bright\n * @Date: 2020/</span><span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">46</span>\n *<span class=\"hljs-regexp\">/\n@Configuration\n@Order(2)\npublic class SentinelPersistenceConfig {\n\n    @Autowired\n    private SentinelProperties sentinelProperties;\n\n    @Bean\n    public SentinelPersistenceConfig init() throws Exception {\n        loadGWFlowRule();\n        return new SentinelPersistenceConfig();\n    }\n\n    private void loadGWFlowRule() {\n        sentinelProperties.getDatasource().entrySet().stream().filter(map -&gt; {\n            return map.getValue().getNacos() != null;\n        }).forEach(map -&gt; {\n            NacosDataSourceProperties nacos = map.getValue().getNacos();\n            ReadableDataSource&lt;String, Set&lt;GatewayFlowRule&gt;&gt; gwFlowRuleDataSource = new NacosDataSource&lt;&gt;(\n                    nacos.getServerAddr(), nacos.getGroupId(), nacos.getDataId(),\n                    source -&gt; JSON.parseObject(source, new TypeReference&lt;Set&lt;GatewayFlowRule&gt;&gt;() {\n                    }));\n            GatewayRuleManager.register2Property(gwFlowRuleDataSource.getProperty());\n        });\n    }\n}\n</span></code></pre><h1 id=\"060eb\">1.3yml配置</h1><pre type=\"JSON\"><code><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">cloud:</span>        \n    <span class=\"hljs-attr\">sentinel:</span>\n      <span class=\"hljs-attr\">transport:</span>\n        <span class=\"hljs-attr\">dashboard:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8888</span>  \n      <span class=\"hljs-attr\">datasource:</span>\n        <span class=\"hljs-attr\">gate-way-flow:</span> \n          <span class=\"hljs-attr\">nacos:</span>\n            <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">ecc786d0-1555-4517-a5df-a65b9ac02590</span>\n            <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n            <span class=\"hljs-attr\">data-id:</span> <span class=\"hljs-string\">${spring.application.name}-rules</span>\n            <span class=\"hljs-attr\">group-id:</span> <span class=\"hljs-string\">DEFAULT_GROUP</span>\n            <span class=\"hljs-attr\">rule-type:</span> <span class=\"hljs-string\">gw_flow</span>\n      <span class=\"hljs-comment\"># 限流返回的响应</span>\n      <span class=\"hljs-attr\">scg:</span>\n        <span class=\"hljs-attr\">fallback:</span>\n          <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">response</span>\n          <span class=\"hljs-attr\">response-status:</span> <span class=\"hljs-number\">455</span>\n          <span class=\"hljs-attr\">response-body:</span> <span class=\"hljs-string\">error!</span>  \n    <span class=\"hljs-attr\">nacos:</span>\n      <span class=\"hljs-attr\">discovery:</span>\n        <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n        <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">ecc786d0-1555-4517-a5df-a65b9ac02590</span>\n</code></pre><p><br></p><div></div><h1 id=\"gok3r\">1.4编写限流配置</h1><div><img src=\"https://img-blog.csdnimg.cn/20200930112345934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20200930112411130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><br></div><pre type=\"JSON\"><code>[\n   {\n        <span class=\"hljs-attr\">\"resource\"</span>: <span class=\"hljs-string\">\"service-1\"</span>,\n        <span class=\"hljs-attr\">\"grade\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">\"count\"</span>: <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-attr\">\"intervalSec\"</span>: <span class=\"hljs-number\">1</span>\n    }\n]\n</code></pre><p><br></p><div></div><h1 id=\"2sh64\">1.5启动服务后查询sentinel控制台</h1><p><img src=\"https://img-blog.csdnimg.cn/20200930112501240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"8oyfv\">注意事项</h1><font size=\"4\"><b>注：如果你的Nacos配置了不同的隔离环境 namespace，则需要指定具体哪一个namespace，否则会加载不到规则配置，报错如下：<br><br>[c.a.c.s.datasource.converter.SentinelConverter ] line 80 : converter can not convert rules because source is empty<br><br>naocs 如下：</b></font><p><img src=\"https://img-blog.csdnimg.cn/20200930112249826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"ofejm\">二、Nacos与Sentinel互相同步限流规则</h1><h2 id=\"gf5a5\">1、流控推送规则</h2><font size=\"4\">要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：<br><br>https://github.com/alibaba/Sentinel/wiki/Sentinel-控制台（集群流控管理）#规则配置<br><br>其控制台推送规则：<br><br>将规则推送到Nacos或其他远程配置中心<br>Sentinel客户端链接Nacos，获取规则配置；并监听Nacos配置变化，如发生变化，就更新本地缓存。<br>控制台监听Nacos配置变化，如发生变化就更新本地缓存。从而让控制台本地缓存总是和Nacos一致。</font><br><br><h2 id=\"pe8wv\">2、改造sentinel-dashboard</h2><h2 id=\"ya3cj\">2.1 通关git官网下载Sentinel 源代码，如下：</h2><pre type=\"Bash\"><code>https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/alibaba/</span>Sentinel<span class=\"hljs-regexp\">/archive/</span><span class=\"hljs-number\">1.7</span>.<span class=\"hljs-number\">2</span>.zip</code></pre><p>下载后解压，使用IDEA打开如下：</p><p><img src=\"https://img-blog.csdnimg.cn/20200930113432829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><br></p><h2 id=\"62eo7\">2.2 修改sentinel-dashboard 控制台模块的pom.xml，将test注释掉</h2><pre type=\"XML\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p><br></p><h2 id=\"s1n36\">2.3 修改sidebar.html页面（sentinel控制台左边菜单栏）</h2><pre type=\"Bash\"><code>sentinel-dashboard<span class=\"hljs-regexp\">/src/m</span>ain<span class=\"hljs-regexp\">/webapp/</span>resources<span class=\"hljs-regexp\">/app/</span>scripts<span class=\"hljs-regexp\">/directives/</span>sidebar.html</code></pre><p><font size=\"4\">并找到如下代码段后，并把注释打开，名称也稍作修改。<br><br>修改前：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113553397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">修改后：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113559211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><h2 id=\"7372a\">2.4 修改nacos相关java代码</h2><font size=\"4\">找到如下目录（位于test目录）<br><br>sentinel-dashboard/src/test/java/com/alibaba/csp/sentinel/dashboard/rule/nacos<br><br>将整个目录拷贝到<br><br>sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/rule/nacos<br><br>修改com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2.java<br><br>修改如下：</font><p><img src=\"https://img-blog.csdnimg.cn/2020093011363927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"4\">其中，注入的两个bean：<br><br>flowRuleNacosProvider，就是实现Nacos的限流规则配置拉取。<br>flowRuleNacosPublisher，实现Nacos的配置推送。<br>FlowRuleNacosProvider.java 如下，无需修改</font></p><p><img src=\"https://img-blog.csdnimg.cn/202009301137209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">getRules方法中的appName参数是Sentinel中的服务名称。<br>configService.getConfig方法是从Nacos中获取配置信息的具体操作。其中，DataId和GroupId分别对应客户端使用时候的对应配置。如下：</font><br></p><pre type=\"Bash\"><code>spring<span class=\"hljs-selector-class\">.cloud</span><span class=\"hljs-selector-class\">.sentinel</span><span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.ds1</span><span class=\"hljs-selector-class\">.nacos</span>.server-addr=<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">100.80</span>:<span class=\"hljs-number\">8848</span>\nspring<span class=\"hljs-selector-class\">.cloud</span><span class=\"hljs-selector-class\">.sentinel</span><span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.ds1</span><span class=\"hljs-selector-class\">.nacos</span>.dataId=${spring<span class=\"hljs-selector-class\">.application</span>.name}-flow-rules\n</code></pre><p><font size=\"4\">FlowRuleNacosPublisher.java如下，无需修改：</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113751453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">打开 NacosConfigUtil.java ，如下两个地方，需要和上面使用nacos存储时的配置一致。注意：两边的DataId和GroupId必须对应上。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113800101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br>打开 NacosConfig.java，修改如下，主要是nacos配置中心的地址与namespace隔离环境的配置修改，如果没有设置namespace，就可以不设置 PropertyKeyConst.NAMESPACE 。</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113807913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><font size=\"4\"><br>经过以上步骤就已经把流控规则改造成推模式持久化了。</font><br><br></p><h2 id=\"bmhz8\">2.5 编译生成jar包</h2><font size=\"4\">执行命令</font><br><pre type=\"Bash\"><code>mvn clean <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">-DskipTests</span></code></pre><p><font size=\"4\">编译成功后，在项目的 target 目录可以找到sentinel-dashboard.jar ，执行以下命令可以启动控制台：</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">java </span>-<span class=\"hljs-keyword\">jar </span>sentinel-dashboard.<span class=\"hljs-keyword\">jar</span></code></pre><p><font size=\"4\">打开Sentinel控制台，可以看到上面通过nacos新建的限流规则</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200930113852449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">我们可以尝试在Sentinel控制台修改该规则，看是否能同步推送到Nacos，这里我们修改阈值为15，打开Nacos配置中心，可以看到已经更新过来了。</font></p><p><img src=\"https://img-blog.csdnimg.cn/202009301347132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">通过测试发现，在Sentinel控制台修改规则可以同步到Nacos，或者在Nacos上修改规则也可以同步到Sentinel控制台。</font><br></p><h2 id=\"39t78\">踩坑 （注意）</h2><font size=\"4\">这个springcloud版本如果是2.2.2就会启动报数据源找不到，注意<br>更换其它版本启动没有任何问题</font><pre type=\"XML\"><code><span class=\"xml\"> 	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">relativePath</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring-cloud-alibaba.version</span>&gt;</span>2.2.3.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring-cloud-alibaba.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring-cloud.version</span>&gt;</span>Hoxton.SR8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring-cloud.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swagger.version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swagger.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">logstash.version</span>&gt;</span>6.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">logstash.version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fastjson.version</span>&gt;</span>1.2.73<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fastjson.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{spring-cloud.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{spring-cloud-alibaba.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span></span></code></pre>','1','0','1','1','1','2021-01-04 16:11:53','2021-01-04 16:12:36'),(27,'http://qiniu-picture.xiyanit.cn/Fu6SfGc-clw6ptswnMGHoyXM23Ov','SpringCloudGateway实现网关限流 二种方式','Java,Gateway,','SpringCloudGateway实现网关限流 二种方式',13,0,0,'1',1,' <h1 id=\"75f8b\">第一种方式代码限流</h1><p id=\"oooee\"><h1 id=\"fljml\">1.Maven依赖</h1></p><pre type=\"XML\"><code><span class=\"hljs-tag\">        &lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p><br></p><div></div><p><h1 id=\"d28ki\">2.GatewayConfiguration</h1></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.gateway.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.ObjectProvider;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.Ordered;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.annotation.Order;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.codec.ServerCodecConfigurer;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.reactive.result.view.ViewResolver;\n\n<span class=\"hljs-keyword\">import</span> javax.annotation.PostConstruct;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Set;\n\n<span class=\"hljs-comment\">/**\n * 网关限流\n *\n * <span class=\"hljs-doctag\">@author</span> bright\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GatewayConfiguration</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;ViewResolver&gt; viewResolvers;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerCodecConfigurer serverCodecConfigurer;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">GatewayConfiguration</span><span class=\"hljs-params\">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,\n                                ServerCodecConfigurer serverCodecConfigurer)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);\n        <span class=\"hljs-keyword\">this</span>.serverCodecConfigurer = serverCodecConfigurer;\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@Order</span>(Ordered.HIGHEST_PRECEDENCE)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SentinelGatewayBlockExceptionHandler <span class=\"hljs-title\">sentinelGatewayBlockExceptionHandler</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@Order</span>(-<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> GlobalFilter <span class=\"hljs-title\">sentinelGatewayFilter</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SentinelGatewayFilter();\n    }\n\n    <span class=\"hljs-meta\">@PostConstruct</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doInit</span><span class=\"hljs-params\">()</span> </span>{\n        initGatewayRules();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 1秒只能只运行5个QPS\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initGatewayRules</span><span class=\"hljs-params\">()</span> </span>{\n        Set&lt;GatewayFlowRule&gt; rules = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">13</span>; i++) {\n            rules.add(<span class=\"hljs-keyword\">new</span> GatewayFlowRule(<span class=\"hljs-string\">\"service-\"</span> + i)\n                    .setCount(<span class=\"hljs-number\">1</span>)\n                    .setIntervalSec(<span class=\"hljs-number\">5</span>)\n                    .setBurst(<span class=\"hljs-number\">2</span>)\n            );\n        }\n        GatewayRuleManager.loadRules(rules);\n    }\n}\n</code></pre><p><br></p><div></div><p><h1 id=\"uwp7b\">注意</h1><div><img src=\"https://img-blog.csdnimg.cn/20200928174900104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"3ycim\">3.测试</h1><div><img src=\"https://img-blog.csdnimg.cn/20200928174927589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20200928174939550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><img src=\"https://img-blog.csdnimg.cn/20200928174952525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><br></div><h1 id=\"t7aib\">第二种方式第三方组件限流</h1><h1>maven 依赖</h1><div></div></p><pre type=\"XML\"><code> 	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20200929145826136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p>',' <h1 id=\"75f8b\">第一种方式代码限流</h1><p id=\"oooee\"><h1 id=\"fljml\">1.Maven依赖</h1></p><pre type=\"XML\"><code><span class=\"hljs-tag\">        &lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p><br></p><div></div><p><h1 id=\"d28ki\">2.GatewayConfiguration</h1></p><pre type=\"Java\"><code><span class=\"hljs-keyword\">package</span> com.yoostar.gateway.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;\n<span class=\"hljs-keyword\">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.ObjectProvider;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.Ordered;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.annotation.Order;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.codec.ServerCodecConfigurer;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.reactive.result.view.ViewResolver;\n\n<span class=\"hljs-keyword\">import</span> javax.annotation.PostConstruct;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Set;\n\n<span class=\"hljs-comment\">/**\n * 网关限流\n *\n * <span class=\"hljs-doctag\">@author</span> bright\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GatewayConfiguration</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;ViewResolver&gt; viewResolvers;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerCodecConfigurer serverCodecConfigurer;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">GatewayConfiguration</span><span class=\"hljs-params\">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,\n                                ServerCodecConfigurer serverCodecConfigurer)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);\n        <span class=\"hljs-keyword\">this</span>.serverCodecConfigurer = serverCodecConfigurer;\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@Order</span>(Ordered.HIGHEST_PRECEDENCE)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SentinelGatewayBlockExceptionHandler <span class=\"hljs-title\">sentinelGatewayBlockExceptionHandler</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@Order</span>(-<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> GlobalFilter <span class=\"hljs-title\">sentinelGatewayFilter</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SentinelGatewayFilter();\n    }\n\n    <span class=\"hljs-meta\">@PostConstruct</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doInit</span><span class=\"hljs-params\">()</span> </span>{\n        initGatewayRules();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 1秒只能只运行5个QPS\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initGatewayRules</span><span class=\"hljs-params\">()</span> </span>{\n        Set&lt;GatewayFlowRule&gt; rules = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">13</span>; i++) {\n            rules.add(<span class=\"hljs-keyword\">new</span> GatewayFlowRule(<span class=\"hljs-string\">\"service-\"</span> + i)\n                    .setCount(<span class=\"hljs-number\">1</span>)\n                    .setIntervalSec(<span class=\"hljs-number\">5</span>)\n                    .setBurst(<span class=\"hljs-number\">2</span>)\n            );\n        }\n        GatewayRuleManager.loadRules(rules);\n    }\n}\n</code></pre><p><br></p><div></div><p><h1 id=\"uwp7b\">注意</h1><div><img src=\"https://img-blog.csdnimg.cn/20200928174900104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></div><h1 id=\"3ycim\">3.测试</h1><div><img src=\"https://img-blog.csdnimg.cn/20200928174927589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20200928174939550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><img src=\"https://img-blog.csdnimg.cn/20200928174952525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"font-size: 1em;\"><br></div><h1 id=\"t7aib\">第二种方式第三方组件限流</h1><h1>maven 依赖</h1><div></div></p><pre type=\"XML\"><code> 	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p><img src=\"https://img-blog.csdnimg.cn/20200929145826136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br></p>','1','0','1','1','1','2021-01-04 16:19:09','2021-01-04 16:19:09'),(28,'http://qiniu-picture.xiyanit.cn/Fh4Y5NeyJweO-lGoFA2cvhe0PTrD','Docker构建自己的SpringBoot镜像','Docker,','Docker构建自己的SpringBoot镜像',12,0,0,'1',1,' <p><h1 id=\"mv0ga\"><font face=\"楷体\">1、将jar包上传linux服务器/usr/local/dockerapp目录(尽量jar包的名字为小写)</font></h1></p><pre type=\"Bash\"><code><font face=\"楷体\"><span class=\"hljs-built_in\">mkdir</span> -p /usr/<span class=\"hljs-built_in\">local</span>/dockerapp</font></code></pre><p><font face=\"楷体\"><br></font></p><p><h1 id=\"fsoh4\"><font face=\"楷体\">2、在jar包所在目录创建名为Dockerfile的文件,在Dockerfile中添加以下内容</font></h1></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\"><font face=\"楷体\">vim Dockerfile</font></span></code></pre><pre type=\"Bash\"><code><font face=\"楷体\">###指定java8环境镜像\nFROM java:<span class=\"hljs-number\">8</span>\n###复制文件到容器app-springboot\nADD docker-springboot<span class=\"hljs-number\">-0.0</span><span class=\"hljs-number\">.1</span>.jar /test.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\">8080</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/test.jar\"</span>]</font></code></pre><p><h1 id=\"07zf4\"><font face=\"楷体\">3.使用docker build命令构建镜像(意思是把docker-springboot-0.0.1这个复制打成镜像文件,后面的点是这个文件的位置.是为当前位置)</font></h1></p><pre type=\"Bash\"><code><font face=\"楷体\">docker build -t test .</font></code></pre><p><font face=\"楷体\"><font size=\"4\"># 格式： docker build -t 镜像名称:这个点Dockerfile文件的相对位置</font><br><font size=\"4\">查看是否打成镜像文件<br>docker images</font><br><br></font><h1><font face=\"楷体\" id=\"3kfd9\">4.启动容器</font></h1></p><pre type=\"Bash\"><code>docker <span class=\"hljs-keyword\">run</span><span class=\"bash\"> -p 8080:8080 <span class=\"hljs-built_in\">test</span></span></code></pre><p>自己可以访问下接口</p>',' <p><h1 id=\"mv0ga\"><font face=\"楷体\">1、将jar包上传linux服务器/usr/local/dockerapp目录(尽量jar包的名字为小写)</font></h1></p><pre type=\"Bash\"><code><font face=\"楷体\"><span class=\"hljs-built_in\">mkdir</span> -p /usr/<span class=\"hljs-built_in\">local</span>/dockerapp</font></code></pre><p><font face=\"楷体\"><br></font></p><p><h1 id=\"fsoh4\"><font face=\"楷体\">2、在jar包所在目录创建名为Dockerfile的文件,在Dockerfile中添加以下内容</font></h1></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\"><font face=\"楷体\">vim Dockerfile</font></span></code></pre><pre type=\"Bash\"><code><font face=\"楷体\">###指定java8环境镜像\nFROM java:<span class=\"hljs-number\">8</span>\n###复制文件到容器app-springboot\nADD docker-springboot<span class=\"hljs-number\">-0.0</span><span class=\"hljs-number\">.1</span>.jar /test.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\">8080</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/test.jar\"</span>]</font></code></pre><p><h1 id=\"07zf4\"><font face=\"楷体\">3.使用docker build命令构建镜像(意思是把docker-springboot-0.0.1这个复制打成镜像文件,后面的点是这个文件的位置.是为当前位置)</font></h1></p><pre type=\"Bash\"><code><font face=\"楷体\">docker build -t test .</font></code></pre><p><font face=\"楷体\"><font size=\"4\"># 格式： docker build -t 镜像名称:这个点Dockerfile文件的相对位置</font><br><font size=\"4\">查看是否打成镜像文件<br>docker images</font><br><br></font><h1><font face=\"楷体\" id=\"3kfd9\">4.启动容器</font></h1></p><pre type=\"Bash\"><code>docker <span class=\"hljs-keyword\">run</span><span class=\"bash\"> -p 8080:8080 <span class=\"hljs-built_in\">test</span></span></code></pre><p>自己可以访问下接口</p>','1','8','1','1','1','2021-01-06 14:18:52','2021-01-06 14:18:52'),(29,'http://qiniu-picture.xiyanit.cn/FtFPu32QfBPlpE2yPNlKwknuu76b','docker-compose的三种安装方式','docker-compose,','docker-compose的三种安装方式',16,0,0,'1',1,'<h1 id=\"ywvj8\"><font face=\"楷体\">1、按官网的方式去安装</font></h1><font face=\"楷体\"><font size=\"4\">访问官网docker.com，Resources–&gt;Docs</font></font><p><img src=\"https://img-blog.csdnimg.cn/20200104120451217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br>进入Docs页面，点Product manuals<br></font></font><img src=\"https://img-blog.csdnimg.cn/20200104122155246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br>在https://docs.docker.com/install/页面，如下图，左边选Docker Compose–&gt;install Compose,右边选择Linux(说明一下，Max、Windows系统中Docker安装后，Docker Compose自带的，不需要另外安装的),然后安装文档的的说明，执行四步操作就可以了<br></font></font></p><pre type=\"Shell Session\"><code><span class=\"hljs-meta\"># 下载docker compose</span>\ncurl -L \"https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/sbin/docker-compose &amp;&amp; chmod +x /usr/sbin/docker-compose\n<span class=\"hljs-meta\"># 查看版本</span>\ndocker-compose --version</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20200104122450799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br><br></font></font></p><h1><font face=\"楷体\"><font size=\"4\" id=\"akbrb\">2、通过pip进行安装</font></font></h1><font face=\"楷体\"><font size=\"4\">安装pip<br></font></font><pre type=\"Bash\"><code>yum -y <span class=\"hljs-keyword\">install</span> epel-<span class=\"hljs-keyword\">release</span>\nyum -y <span class=\"hljs-keyword\">install</span> python-pip</code></pre><p><br></p><p><font face=\"楷体\"><font size=\"4\">查看版本<br></font></font></p><pre type=\"Bash\"><code>pip <span class=\"hljs-comment\">--version</span></code></pre><p><br></p><p><font face=\"楷体\"><font size=\"4\">更新pip<br></font></font></p><pre type=\"Shell Session\"><code>pip <span class=\"hljs-keyword\">install</span> <span class=\"hljs-comment\">--upgrade pip</span></code></pre><p><br></p><p><font face=\"楷体\"><font size=\"4\">安装docker-compose<br></font></font></p><pre type=\"Bash\"><code>pip <span class=\"hljs-keyword\">install</span> docker-compose </code></pre><p><font face=\"楷体\"><font size=\"4\">查看docker compose的版本<br></font></font></p><pre type=\"Bash\"><code>docker-compose <span class=\"hljs-built_in\">version</span></code></pre><h1><font face=\"楷体\"><font size=\"4\" id=\"jpocn\">3、离线安装</font></font></h1><font face=\"楷体\"><font size=\"4\">访问https://github.com/docker/compose/releases，下载 docker-compose-Linux-x86_64，我是复制链接地址，在迅雷中下载的，下载后，将docker-compose-Linux-x86_64重命名为docker-compose<br></font></font><img src=\"https://img-blog.csdnimg.cn/20200104121440853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br><br></font></font><p><font face=\"楷体\"><font size=\"4\">通过ssh工具MobaXterm，将刚才下载的docker-compose文件上传到centos7的/usr/local/bin/目录下<br></font></font><img src=\"https://img-blog.csdnimg.cn/20200104121805207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br>如上图，输入以下命令 添加可执行权限和查看docker compose版本<br><br></font></font></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 添加可执行权限</span>\nsudo chmod +x <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>docker-compose\n<span class=\"hljs-comment\"># 查看docker-compose版本</span>\ndocker-compose -v</code></pre>','<h1 id=\"ywvj8\"><font face=\"楷体\">1、按官网的方式去安装</font></h1><font face=\"楷体\"><font size=\"4\">访问官网docker.com，Resources–&gt;Docs</font></font><p><img src=\"https://img-blog.csdnimg.cn/20200104120451217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br>进入Docs页面，点Product manuals<br></font></font><img src=\"https://img-blog.csdnimg.cn/20200104122155246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br>在https://docs.docker.com/install/页面，如下图，左边选Docker Compose–&gt;install Compose,右边选择Linux(说明一下，Max、Windows系统中Docker安装后，Docker Compose自带的，不需要另外安装的),然后安装文档的的说明，执行四步操作就可以了<br></font></font></p><pre type=\"Shell Session\"><code><span class=\"hljs-meta\"># 下载docker compose</span>\ncurl -L \"https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/sbin/docker-compose &amp;&amp; chmod +x /usr/sbin/docker-compose\n<span class=\"hljs-meta\"># 查看版本</span>\ndocker-compose --version</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20200104122450799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br><br></font></font></p><h1><font face=\"楷体\"><font size=\"4\" id=\"akbrb\">2、通过pip进行安装</font></font></h1><font face=\"楷体\"><font size=\"4\">安装pip<br></font></font><pre type=\"Bash\"><code>yum -y <span class=\"hljs-keyword\">install</span> epel-<span class=\"hljs-keyword\">release</span>\nyum -y <span class=\"hljs-keyword\">install</span> python-pip</code></pre><p><br></p><p><font face=\"楷体\"><font size=\"4\">查看版本<br></font></font></p><pre type=\"Bash\"><code>pip <span class=\"hljs-comment\">--version</span></code></pre><p><br></p><p><font face=\"楷体\"><font size=\"4\">更新pip<br></font></font></p><pre type=\"Shell Session\"><code>pip <span class=\"hljs-keyword\">install</span> <span class=\"hljs-comment\">--upgrade pip</span></code></pre><p><br></p><p><font face=\"楷体\"><font size=\"4\">安装docker-compose<br></font></font></p><pre type=\"Bash\"><code>pip <span class=\"hljs-keyword\">install</span> docker-compose </code></pre><p><font face=\"楷体\"><font size=\"4\">查看docker compose的版本<br></font></font></p><pre type=\"Bash\"><code>docker-compose <span class=\"hljs-built_in\">version</span></code></pre><h1><font face=\"楷体\"><font size=\"4\" id=\"jpocn\">3、离线安装</font></font></h1><font face=\"楷体\"><font size=\"4\">访问https://github.com/docker/compose/releases，下载 docker-compose-Linux-x86_64，我是复制链接地址，在迅雷中下载的，下载后，将docker-compose-Linux-x86_64重命名为docker-compose<br></font></font><img src=\"https://img-blog.csdnimg.cn/20200104121440853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br><br></font></font><p><font face=\"楷体\"><font size=\"4\">通过ssh工具MobaXterm，将刚才下载的docker-compose文件上传到centos7的/usr/local/bin/目录下<br></font></font><img src=\"https://img-blog.csdnimg.cn/20200104121805207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0YW5nZGlnbA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><font face=\"楷体\"><font size=\"4\"><br>如上图，输入以下命令 添加可执行权限和查看docker compose版本<br><br></font></font></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 添加可执行权限</span>\nsudo chmod +x <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>docker-compose\n<span class=\"hljs-comment\"># 查看docker-compose版本</span>\ndocker-compose -v</code></pre>','1','8','1','1','1','2021-01-06 15:47:22','2021-02-12 14:12:34'),(30,'http://qiniu-picture.xiyanit.cn/FkoxoAUh-lLLfA8q3KKYElB_Ju-K','Centos7下Docker安装','Docker,','Centos7下Docker安装',12,0,0,'1',1,'<p><font face=\"楷体\"><font size=\"5\">Docker 要求 CentOS 系统的内核版本在 3.10以上 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</font><br></font></p><h1><font face=\"楷体\" id=\"kjjl6\">1、通过 uname -r 命令查看你当前的内核版本</font></h1><pre type=\"Bash\"><code><span class=\"hljs-attribute\">uname -r</span></code></pre><h1><font face=\"楷体\" id=\"4ez8a\">2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</font></h1><pre type=\"Bash\"><code><span class=\"hljs-attribute\">yum -y update</span></code></pre><h1><font face=\"楷体\" id=\"1rbrn\">3、卸载旧版本(如果安装过旧版本的话)</font></h1><pre type=\"Bash\"><code><span class=\"hljs-symbol\">yum</span> remove docker docker-<span class=\"hljs-meta\">common</span> docker-<span class=\"hljs-keyword\">selinux </span>docker-engine</code></pre><h1><font face=\"楷体\" id=\"awkya\">4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</font></h1><pre type=\"Bash\"><code>yum install -<span class=\"hljs-symbol\">y</span> yum-utils device-mapper-<span class=\"hljs-symbol\">persistent</span>-data lvm2</code></pre><h1><font face=\"楷体\" id=\"feynf\">5、设置yum源</font></h1><pre type=\"Bash\"><code>yum-config-manager --<span class=\"hljs-built_in\">add</span>-repo http<span class=\"hljs-variable\">s:</span>//download.docker.<span class=\"hljs-keyword\">com</span>/linux/centos/docker-<span class=\"hljs-keyword\">ce</span>.repo</code></pre><h1><font face=\"楷体\" id=\"i0905\">6、可以查看所有仓库中所有docker版本，并选择特定版本安装</font></h1><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">list</span> docker-<span class=\"hljs-keyword\">ce</span> --showduplicates | <span class=\"hljs-keyword\">sort</span> -r</code></pre><h1><font face=\"楷体\" id=\"rwvt6\">7、安装docker</font></h1><pre type=\"Bash\"><code>sudo yum install -y docker-ce #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版<span class=\"hljs-number\">18.03</span><span class=\"hljs-number\">.1</span></code></pre><h1><font face=\"楷体\" id=\"40srf\">8、启动并加入开机启动</font></h1><pre type=\"Bash\"><code>systemctl <span class=\"hljs-keyword\">start</span> docker\nsystemctl <span class=\"hljs-keyword\">enable</span> docker</code></pre><div></div><h1><font face=\"楷体\" id=\"fo1qp\">9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</font></h1><div><pre type=\"Bash\"><code>docker <span class=\"hljs-built_in\">version</span></code></pre></div><h1 id=\"ddove\">10、配置阿里云镜像加速</h1><p><font size=\"5\">详细参考: https://cr.console.aliyun.com/cn-hangzhou/mirrors</font></p><pre type=\"Bash\"><code>sudo mkdir -p <span class=\"hljs-regexp\">/etc/</span>docker\nsudo tee <span class=\"hljs-regexp\">/etc/</span>docker/daemon.json &lt;&lt;-<span class=\"hljs-string\">\'EOF\'</span>\n{\n  <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://goieqwi4.mirror.aliyuncs.com\"</span>]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FlByTsl664ezZYH4MEHYvniAL_9L\" style=\"max-width:100%;\"><br></p>','<p><font face=\"楷体\"><font size=\"5\">Docker 要求 CentOS 系统的内核版本在 3.10以上 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</font><br></font></p><h1><font face=\"楷体\" id=\"kjjl6\">1、通过 uname -r 命令查看你当前的内核版本</font></h1><pre type=\"Bash\"><code><span class=\"hljs-attribute\">uname -r</span></code></pre><h1><font face=\"楷体\" id=\"4ez8a\">2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</font></h1><pre type=\"Bash\"><code><span class=\"hljs-attribute\">yum -y update</span></code></pre><h1><font face=\"楷体\" id=\"1rbrn\">3、卸载旧版本(如果安装过旧版本的话)</font></h1><pre type=\"Bash\"><code><span class=\"hljs-symbol\">yum</span> remove docker docker-<span class=\"hljs-meta\">common</span> docker-<span class=\"hljs-keyword\">selinux </span>docker-engine</code></pre><h1><font face=\"楷体\" id=\"awkya\">4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</font></h1><pre type=\"Bash\"><code>yum install -<span class=\"hljs-symbol\">y</span> yum-utils device-mapper-<span class=\"hljs-symbol\">persistent</span>-data lvm2</code></pre><h1><font face=\"楷体\" id=\"feynf\">5、设置yum源</font></h1><pre type=\"Bash\"><code>yum-config-manager --<span class=\"hljs-built_in\">add</span>-repo http<span class=\"hljs-variable\">s:</span>//download.docker.<span class=\"hljs-keyword\">com</span>/linux/centos/docker-<span class=\"hljs-keyword\">ce</span>.repo</code></pre><h1><font face=\"楷体\" id=\"i0905\">6、可以查看所有仓库中所有docker版本，并选择特定版本安装</font></h1><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">list</span> docker-<span class=\"hljs-keyword\">ce</span> --showduplicates | <span class=\"hljs-keyword\">sort</span> -r</code></pre><h1><font face=\"楷体\" id=\"rwvt6\">7、安装docker</font></h1><pre type=\"Bash\"><code>sudo yum install -y docker-ce #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版<span class=\"hljs-number\">18.03</span><span class=\"hljs-number\">.1</span></code></pre><h1><font face=\"楷体\" id=\"40srf\">8、启动并加入开机启动</font></h1><pre type=\"Bash\"><code>systemctl <span class=\"hljs-keyword\">start</span> docker\nsystemctl <span class=\"hljs-keyword\">enable</span> docker</code></pre><div></div><h1><font face=\"楷体\" id=\"fo1qp\">9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</font></h1><div><pre type=\"Bash\"><code>docker <span class=\"hljs-built_in\">version</span></code></pre></div><h1 id=\"ddove\">10、配置阿里云镜像加速</h1><p><font size=\"5\">详细参考: https://cr.console.aliyun.com/cn-hangzhou/mirrors</font></p><pre type=\"Bash\"><code>sudo mkdir -p <span class=\"hljs-regexp\">/etc/</span>docker\nsudo tee <span class=\"hljs-regexp\">/etc/</span>docker/daemon.json &lt;&lt;-<span class=\"hljs-string\">\'EOF\'</span>\n{\n  <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://goieqwi4.mirror.aliyuncs.com\"</span>]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FlByTsl664ezZYH4MEHYvniAL_9L\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-01-06 17:40:33','2021-01-07 11:24:12'),(31,'http://qiniu-picture.xiyanit.cn/Fjrtm31DQQ50n5TnCUuZxvhdjgJx','IntelliJ IDEA快速实现Docker镜像部署运行','JAVA,Docker,','IntelliJ IDEA快速实现Docker镜像部署运行',14,0,0,'1',1,'<h1 id=\"tw32y\">1.开启Docker的远程连接</h1><br><font size=\"3\">网上的方法找不到对应的docker.service文件，可能版本或者安装方式不同。<br>通过 <font color=\"#c24f4a\"><b>systemctl status docker</b></font> 查找docker.service文件位置：</font><p><img src=\"http://qiniu-picture.xiyanit.cn/FvWFj-JSM1xom-M06H0PV44yYMFf\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><br></p><h1 id=\"gkhbh\">2.修改/etc/systemd/system/docker.service文件：</h1><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#ExecStart=/usr/bin/dockerd</span>\nExecStart=<span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/dockerd -H tcp:/</span><span class=\"hljs-regexp\">/0.0.0.0:2375 -H unix:/</span><span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock</span></code></pre><p><br></p><h1 id=\"lfroa\">3.重启Docker服务：</h1><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload </span>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">restart docker.service</span></code></pre><p><br></p><p><font size=\"4\">2375端口开放 ：</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">firewall</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">cmd</span> --<span class=\"hljs-comment\">zone=public</span> --<span class=\"hljs-comment\">add</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">port=2375/tcp</span> --<span class=\"hljs-comment\">permanent</span>\n<span class=\"hljs-comment\">firewall</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">cmd</span> --<span class=\"hljs-comment\">reload</span></code></pre><p><br></p><h1 id=\"csqgt\">4.重启后，验证下2375端口是否是通的：</h1><font size=\"5\">http://ip:2375/info</font><p><img src=\"http://qiniu-picture.xiyanit.cn/Fg1Vm4Cul23twtwEucq_KDVYZMMR\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">注：这个就表示成功了。<br><br>idea docker插件配置<br><br>idea 2020 2.4 版已经集成docker，未集成的请自行安装。</font></p><p><img src=\"https://img.jbzj.com/file_images/article/202009/20200928144918123.png\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"5\">idea连接docker，熟悉相关界面可用操作：</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkVeL97z4zMJPnpIDf6E98ikcmY_\" style=\"max-width:100%;\"><br></p><h1 id=\"supv5\">5.<strong>springboot应用中加入dockerfile</strong></h1><div><img src=\"http://qiniu-picture.xiyanit.cn/FusoZdFLB3r6auQypLvDtI4FAr96\" style=\"max-width:100%;\"><strong><br></strong></div><div><pre type=\"Bash\"><code>###指定java8环境镜像\nFROM java:<span class=\"hljs-number\">8</span>\n###复制文件到容器app-springboot\nADD target/demo<span class=\"hljs-number\">-0.0</span><span class=\"hljs-number\">.1</span>-SNAPSHOT.jar /demo.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\">8080</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/demo.jar\"</span>]</code></pre></div><h1 id=\"vc53s\">6.<strong>添加docker 运行配置</strong></h1><div><img src=\"http://qiniu-picture.xiyanit.cn/Fi9Da-KQtxBTFuQkJqO70kcmo3kh\" style=\"max-width:100%;\"><strong><br></strong></div><div><img src=\"http://qiniu-picture.xiyanit.cn/FrokTYRI9paCN-x8ncBYz34LECKi\" style=\"max-width:100%;\"><strong><br></strong></div><div><img src=\"http://qiniu-picture.xiyanit.cn/Fm-UzyUUgmH2iUruWUT0qZK5XJz5\" style=\"max-width:100%;\"><strong><br></strong></div><p><font size=\"4\">注：1、右键“edit configuration”<br>2、点击“+”，选择docker<br>3、选择前面定义的docker连接<br>4、dockerfile的名称<br>5、dockerfile的目录位置<br>6、项目镜像及版本定义<br>7、run build image 打勾，并命名容器名称，这样可以在创建镜像的后创建容器并运行。<br>8、配置宿主机与容器的端口映射<br></font></p><h1><font size=\"4\" id=\"jjhxf\">7.运行</font></h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FgqbqeswlddFK5MzMAJEP-AyncGo\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FuDfWOEMdUqc4fYgPdJoa4LOp0o8\" style=\"max-width:100%;\"><strong><br></strong></div><h1 id=\"b6pdq\">注意</h1><p><font size=\"5\">每次修改完打完包需要删除以前的镜像文件</font></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FsINQBKBdJJOX7GGs96SuQ9WSS2u\" style=\"max-width:100%;\"></div>','<h1 id=\"tw32y\">1.开启Docker的远程连接</h1><br><font size=\"3\">网上的方法找不到对应的docker.service文件，可能版本或者安装方式不同。<br>通过 <font color=\"#c24f4a\"><b>systemctl status docker</b></font> 查找docker.service文件位置：</font><p><img src=\"http://qiniu-picture.xiyanit.cn/FvWFj-JSM1xom-M06H0PV44yYMFf\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><br></p><h1 id=\"gkhbh\">2.修改/etc/systemd/system/docker.service文件：</h1><pre type=\"Shell Session\"><code><span class=\"hljs-comment\">#ExecStart=/usr/bin/dockerd</span>\nExecStart=<span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/dockerd -H tcp:/</span><span class=\"hljs-regexp\">/0.0.0.0:2375 -H unix:/</span><span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock</span></code></pre><p><br></p><h1 id=\"lfroa\">3.重启Docker服务：</h1><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload </span>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">restart docker.service</span></code></pre><p><br></p><p><font size=\"4\">2375端口开放 ：</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">firewall</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">cmd</span> --<span class=\"hljs-comment\">zone=public</span> --<span class=\"hljs-comment\">add</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">port=2375/tcp</span> --<span class=\"hljs-comment\">permanent</span>\n<span class=\"hljs-comment\">firewall</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">cmd</span> --<span class=\"hljs-comment\">reload</span></code></pre><p><br></p><h1 id=\"csqgt\">4.重启后，验证下2375端口是否是通的：</h1><font size=\"5\">http://ip:2375/info</font><p><img src=\"http://qiniu-picture.xiyanit.cn/Fg1Vm4Cul23twtwEucq_KDVYZMMR\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">注：这个就表示成功了。<br><br>idea docker插件配置<br><br>idea 2020 2.4 版已经集成docker，未集成的请自行安装。</font></p><p><img src=\"https://img.jbzj.com/file_images/article/202009/20200928144918123.png\" alt=\"在这里插入图片描述\"><font size=\"4\"><br></font></p><p><font size=\"5\">idea连接docker，熟悉相关界面可用操作：</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkVeL97z4zMJPnpIDf6E98ikcmY_\" style=\"max-width:100%;\"><br></p><h1 id=\"supv5\">5.<strong>springboot应用中加入dockerfile</strong></h1><div><img src=\"http://qiniu-picture.xiyanit.cn/FusoZdFLB3r6auQypLvDtI4FAr96\" style=\"max-width:100%;\"><strong><br></strong></div><div><pre type=\"Bash\"><code>###指定java8环境镜像\nFROM java:<span class=\"hljs-number\">8</span>\n###复制文件到容器app-springboot\nADD target/demo<span class=\"hljs-number\">-0.0</span><span class=\"hljs-number\">.1</span>-SNAPSHOT.jar /demo.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\">8080</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/demo.jar\"</span>]</code></pre></div><h1 id=\"vc53s\">6.<strong>添加docker 运行配置</strong></h1><div><img src=\"http://qiniu-picture.xiyanit.cn/Fi9Da-KQtxBTFuQkJqO70kcmo3kh\" style=\"max-width:100%;\"><strong><br></strong></div><div><img src=\"http://qiniu-picture.xiyanit.cn/FrokTYRI9paCN-x8ncBYz34LECKi\" style=\"max-width:100%;\"><strong><br></strong></div><div><img src=\"http://qiniu-picture.xiyanit.cn/Fm-UzyUUgmH2iUruWUT0qZK5XJz5\" style=\"max-width:100%;\"><strong><br></strong></div><p><font size=\"4\">注：1、右键“edit configuration”<br>2、点击“+”，选择docker<br>3、选择前面定义的docker连接<br>4、dockerfile的名称<br>5、dockerfile的目录位置<br>6、项目镜像及版本定义<br>7、run build image 打勾，并命名容器名称，这样可以在创建镜像的后创建容器并运行。<br>8、配置宿主机与容器的端口映射<br></font></p><h1><font size=\"4\" id=\"jjhxf\">7.运行</font></h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FgqbqeswlddFK5MzMAJEP-AyncGo\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FuDfWOEMdUqc4fYgPdJoa4LOp0o8\" style=\"max-width:100%;\"><strong><br></strong></div><h1 id=\"b6pdq\">注意</h1><p><font size=\"5\">每次修改完打完包需要删除以前的镜像文件</font></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FsINQBKBdJJOX7GGs96SuQ9WSS2u\" style=\"max-width:100%;\"></div>','1','0','1','1','1','2021-01-06 18:15:18','2021-01-06 18:19:11'),(32,'http://qiniu-picture.xiyanit.cn/FlGuB3aQqAnfjkr-rb2xr4eBBz68','Docker构建GitLab（至少内存2G以上建议4G）','Docker,GitLab,','Docker构建GitLab（至少内存2G以上建议4G）',5,0,0,'1',1,' <p><h1 id=\"514r7\">1.下载镜像并启动</h1></p><pre type=\"Bash\"><code>docker run --name=<span class=\"hljs-string\">\'gitlab-ce\'</span> -d -p <span class=\"hljs-number\">10022</span>:<span class=\"hljs-number\">22</span> -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> --restart always --volume <span class=\"hljs-regexp\">/opt/</span>gitlab<span class=\"hljs-regexp\">/config:/</span>etc<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">logs:</span><span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">data:</span><span class=\"hljs-regexp\">/var/</span>opt<span class=\"hljs-regexp\">/gitlab/</span> gitlab/gitlab-ce</code></pre><p><h1 id=\"mqs5g\"><br></h1><h1 id=\"mqs5g\">2.编辑gitlab.rb文件# 配置http协议所使用的访问地址external_url \'http://172.16.81.81\' 这个ip地址改成你自己的</h1></p><pre type=\"Bash\"><code>vi <span class=\"hljs-regexp\">/opt/gi</span>tlab<span class=\"hljs-regexp\">/config/gi</span>tlab.rb</code></pre><p><h1 id=\"y2uth\"><img src=\"http://qiniu-picture.xiyanit.cn/FrrgqCiEzHPt3ol91cPLFPTODvFK\" style=\"max-width:100%;\"><br></h1><h1 id=\"y2uth\">3.编辑gitlab.yml</h1></p><pre type=\"Bash\"><code>vi <span class=\"hljs-regexp\">/opt/gi</span>tlab<span class=\"hljs-regexp\">/data/gi</span>tlab-rails<span class=\"hljs-regexp\">/etc/gi</span>tlab.yml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvNEP3E5Bab5Te720IgVyKSUG8Jg\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code>docker ps 查询容器id \n\ndocker stop容器id 停止容器\n\ndocker rm 容器id 删除容器\n重启docker服务  \nsudo<span class=\"hljs-built_in\"> service </span>docker restart</code></pre><p><br></p><p><h1 id=\"8jcg1\">4.在启动</h1></p><pre type=\"Bash\"><code>docker run --name=<span class=\"hljs-string\">\'gitlab-ce\'</span> -d -p <span class=\"hljs-number\">10022</span>:<span class=\"hljs-number\">22</span> -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> --restart always --volume <span class=\"hljs-regexp\">/opt/</span>gitlab<span class=\"hljs-regexp\">/config:/</span>etc<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">logs:</span><span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">data:</span><span class=\"hljs-regexp\">/var/</span>opt<span class=\"hljs-regexp\">/gitlab/</span> gitlab/gitlab-ce</code></pre><p><font size=\"4\">#查看执行日志  docker logs -f gitlab-ce</font><br><br><br><h1 id=\"ey3s6\">5.（等待一分钟左右）在浏览器中运行    192.168.8.5:80  设置新的密码在登陆下就可以了默认的用户名是root</h1><img src=\"http://qiniu-picture.xiyanit.cn/FonVTMs-xIgw0Xyx0NWoVWR0vk2T\" style=\"max-width:100%;\"><br><h1 id=\"fv80o\">6.创建一个空的项目用来测试</h1><img src=\"http://qiniu-picture.xiyanit.cn/Flrp6a2wRx3ay0m3M-bYSa2eeETk\" style=\"max-width:100%;\"><br>GitLab分配账号权限管理 <br><font size=\"5\">1.创建一个新的用户<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Fuj-jFJdqBhhNVeFQ6dGzU5xGwKz\" style=\"max-width:100%;\"><font size=\"5\"><br>2.在打开一个浏览器登陆root用户在root用户下进行授权<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Fk2dFRBBKD6nZjZ4HtU4jFlxGQE-\" style=\"max-width:100%;\"></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqwnQR9jBIgTkmW4zS1d-y2NiBoO\" style=\"max-width:100%;\"></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpT_KvW-VLzuJq29xbjgbMB9hDkO\" style=\"max-width:100%;\"><font size=\"5\"><br></font></p>',' <p><h1 id=\"514r7\">1.下载镜像并启动</h1></p><pre type=\"Bash\"><code>docker run --name=<span class=\"hljs-string\">\'gitlab-ce\'</span> -d -p <span class=\"hljs-number\">10022</span>:<span class=\"hljs-number\">22</span> -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> --restart always --volume <span class=\"hljs-regexp\">/opt/</span>gitlab<span class=\"hljs-regexp\">/config:/</span>etc<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">logs:</span><span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">data:</span><span class=\"hljs-regexp\">/var/</span>opt<span class=\"hljs-regexp\">/gitlab/</span> gitlab/gitlab-ce</code></pre><p><h1 id=\"mqs5g\"><br></h1><h1 id=\"mqs5g\">2.编辑gitlab.rb文件# 配置http协议所使用的访问地址external_url \'http://172.16.81.81\' 这个ip地址改成你自己的</h1></p><pre type=\"Bash\"><code>vi <span class=\"hljs-regexp\">/opt/gi</span>tlab<span class=\"hljs-regexp\">/config/gi</span>tlab.rb</code></pre><p><h1 id=\"y2uth\"><img src=\"http://qiniu-picture.xiyanit.cn/FrrgqCiEzHPt3ol91cPLFPTODvFK\" style=\"max-width:100%;\"><br></h1><h1 id=\"y2uth\">3.编辑gitlab.yml</h1></p><pre type=\"Bash\"><code>vi <span class=\"hljs-regexp\">/opt/gi</span>tlab<span class=\"hljs-regexp\">/data/gi</span>tlab-rails<span class=\"hljs-regexp\">/etc/gi</span>tlab.yml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvNEP3E5Bab5Te720IgVyKSUG8Jg\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code>docker ps 查询容器id \n\ndocker stop容器id 停止容器\n\ndocker rm 容器id 删除容器\n重启docker服务  \nsudo<span class=\"hljs-built_in\"> service </span>docker restart</code></pre><p><br></p><p><h1 id=\"8jcg1\">4.在启动</h1></p><pre type=\"Bash\"><code>docker run --name=<span class=\"hljs-string\">\'gitlab-ce\'</span> -d -p <span class=\"hljs-number\">10022</span>:<span class=\"hljs-number\">22</span> -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> --restart always --volume <span class=\"hljs-regexp\">/opt/</span>gitlab<span class=\"hljs-regexp\">/config:/</span>etc<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">logs:</span><span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/gitlab --volume /</span>opt<span class=\"hljs-regexp\">/gitlab/</span><span class=\"hljs-string\">data:</span><span class=\"hljs-regexp\">/var/</span>opt<span class=\"hljs-regexp\">/gitlab/</span> gitlab/gitlab-ce</code></pre><p><font size=\"4\">#查看执行日志  docker logs -f gitlab-ce</font><br><br><br><h1 id=\"ey3s6\">5.（等待一分钟左右）在浏览器中运行    192.168.8.5:80  设置新的密码在登陆下就可以了默认的用户名是root</h1><img src=\"http://qiniu-picture.xiyanit.cn/FonVTMs-xIgw0Xyx0NWoVWR0vk2T\" style=\"max-width:100%;\"><br><h1 id=\"fv80o\">6.创建一个空的项目用来测试</h1><img src=\"http://qiniu-picture.xiyanit.cn/Flrp6a2wRx3ay0m3M-bYSa2eeETk\" style=\"max-width:100%;\"><br>GitLab分配账号权限管理 <br><font size=\"5\">1.创建一个新的用户<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Fuj-jFJdqBhhNVeFQ6dGzU5xGwKz\" style=\"max-width:100%;\"><font size=\"5\"><br>2.在打开一个浏览器登陆root用户在root用户下进行授权<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Fk2dFRBBKD6nZjZ4HtU4jFlxGQE-\" style=\"max-width:100%;\"></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqwnQR9jBIgTkmW4zS1d-y2NiBoO\" style=\"max-width:100%;\"></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpT_KvW-VLzuJq29xbjgbMB9hDkO\" style=\"max-width:100%;\"><font size=\"5\"><br></font></p>','1','8','1','1','1','2021-01-06 18:26:48','2021-01-06 18:26:48'),(33,'http://qiniu-picture.xiyanit.cn/FufBWVvfhDdM8vEfT4H8A6WJL8OD','Docker构建Maven私服','Docker,GitLab,','Docker构建Maven私服',10,0,0,'1',1,'<h1 id=\"6150j\"><span style=\"font-weight: 200; font-size: 2em;\" id=\"ttlvg\">1.</span><font size=\"5\" style=\"\">下载一个nexus3的镜像</font><br></h1><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-title\">docker</span> pull sona<span class=\"hljs-keyword\">type</span>/nexus3</code></pre><p><br></p><h1 id=\"hi5cm\">2.将容器内部/var/nexus-data挂载到/root/nexus-data目录</h1><pre type=\"Bash\"><code>docker run -d -p 8081<span class=\"hljs-function\">:8081</span> <span class=\"hljs-params\">--name</span> nexus -v <span class=\"hljs-string\">/root/nexus-data</span>:<span class=\"hljs-string\">/var/nexus-data</span> <span class=\"hljs-params\">--restart=always</span> sonatype/nexus3</code></pre><p><br></p><h1 id=\"8nds4\">3.#查看执行日志  docker logs -f nexus</h1>如果一切成功的话，会显示如下日志信息。&nbsp;<br><img src=\"http://qiniu-picture.xiyanit.cn/FrO5mH4pJNpN0hvhTSSjhZ8MmkqW\" style=\"max-width:100%;\"><br><font size=\"4\">(大概需要等待1分钟左右)在访问http://你的ip地址:8081（默认密码是admin/admin123）<br></font><img src=\"http://qiniu-picture.xiyanit.cn/FiaorWRhmsxc1vi_l_yjRiM3d9rC\" style=\"max-width:100%;\"><font size=\"4\"><br>上传本地jar包到maven私服<br>1.创建库<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Ft3RAp4qPTiO3XZeEZ_Cl0rp_MaJ\" style=\"max-width:100%;\"><p><img src=\"http://qiniu-picture.xiyanit.cn/Fn8o9A0GOC4IYoFze1ppPplJNwRl\" style=\"max-width:100%;\"></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FomfO7X12AK-iPVckVqgIr30Cg_F\" style=\"max-width:100%;\"><br><font size=\"4\">2.创建用户</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fv5P7X74YjBvUxsfQ_PA6b34uTgs\" style=\"max-width:100%;\"><font size=\"4\"><br>3.配置C:\\Users\\Administrator\\.m2下的settings.xml文件</font><br></p><pre type=\"Bash\"><code> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>root<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>root<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span></code></pre><p><h1 id=\"3925e\"><img src=\"http://qiniu-picture.xiyanit.cn/Fl_4eZttKoB_p9hhKKSWvP6cfw1A\" style=\"max-width:100%;\"><br></h1><h1 id=\"3925e\">4.查看库的url</h1><img src=\"http://qiniu-picture.xiyanit.cn/FlmRHliVy0PYUr2qep7u6k0BtFCN\" style=\"max-width:100%;\"><br><h1 id=\"9fmer\">5.配置pom.xml文件</h1></p><pre type=\"Bash\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- id要跟settings里面配置的server的id一致 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- maven私服仓库的url地址 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://192.168.8.5:8081/repository/bdqn-proxy/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span>\n\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n		<span class=\"hljs-comment\">&lt;!-- 发布代码jar插件 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- 发布源码插件 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre><p><h1 id=\"m9f7p\">6.注意问题版本不要有非法内容不然上传会失败</h1><img src=\"http://qiniu-picture.xiyanit.cn/FmSYMkVehEolsiGLkSzYv7pW9DWR\" style=\"max-width:100%;\"><br><font size=\"5\">把杠改成.修改成这样或者&lt;version&gt;2.0&lt;/version&gt;二个都试一下</font><br><br><h1 id=\"zpgij\">7.打开项目的所在路径</h1><img src=\"http://qiniu-picture.xiyanit.cn/FskcyQQAOgQCtgtD9kgSX0bUx_9P\" style=\"max-width:100%;\"><br><h1 id=\"5qmxx\">8.在项目下执行cmd运行     mvn deploy</h1><img src=\"http://qiniu-picture.xiyanit.cn/FmqQZgYK4eVOWpuLuCBHh9JR1pjc\" style=\"max-width:100%;\"><br><br><font size=\"4\">运行成功</font><br><img src=\"http://qiniu-picture.xiyanit.cn/Fm7H4gVURKpVtl-BcxthFU0Fw7oB\" style=\"max-width:100%;\"><br><font size=\"4\">查看私服是否上传成功</font><br><img src=\"http://qiniu-picture.xiyanit.cn/Fmx4FZMLOq5lKuasUaqgaY9ekhmU\" style=\"max-width:100%;\"><br><font size=\"4\">导入maven私服jar包到maven项目中<br>查看坐标<br></font><img src=\"http://qiniu-picture.xiyanit.cn/FhwVp9FojZZUSC55gt5Q7ffRppaC\" style=\"max-width:100%;\"><br><font size=\"4\">2.把刚刚上传jar的项目删除，不然等下导入私服jar包的时候的时候会报错，一定要删除<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Fs5CpwBFHw8QzJnXs_A0CY3bT9OH\" style=\"max-width:100%;\"><font size=\"4\"><br>3.在pom.xml引入jar包</font><br><img src=\"http://qiniu-picture.xiyanit.cn/FiUoaHsqJx1G1X1dTeqwKhYhzYPo\" style=\"max-width:100%;\"><br><br><font size=\"4\">如果有多个项目需要导入jar包可以在settings.xml配置</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">profile</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>bbsnexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repositories</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span>\n						<span class=\"hljs-comment\">&lt;!-- Maven 私有库 --&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://192.168.8.5:8081/repository/bdqn-nexus/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releases</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releases</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshots</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshots</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repositories</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">profile</span>&gt;</span>\n\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activeProfiles</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activeProfile</span>&gt;</span>bbsnexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activeProfile</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activeProfiles</span>&gt;</span></code></pre><p><br><font size=\"4\">效果图<br></font><img src=\"http://qiniu-picture.xiyanit.cn/FtS_8-bbl3kjvbb-1axt2mccvLlX\" style=\"max-width:100%;\"><font size=\"4\"><br>4.Pom.xml引入       把刚刚上传jar的项目删除，不然等下导入私服jar包的时候的时候会报错，一定要删除</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FnjRHlWzfYkYk-0eemlK2tj8G-DK\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p>','<h1 id=\"6150j\"><span style=\"font-weight: 200; font-size: 2em;\" id=\"ttlvg\">1.</span><font size=\"5\" style=\"\">下载一个nexus3的镜像</font><br></h1><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-title\">docker</span> pull sona<span class=\"hljs-keyword\">type</span>/nexus3</code></pre><p><br></p><h1 id=\"hi5cm\">2.将容器内部/var/nexus-data挂载到/root/nexus-data目录</h1><pre type=\"Bash\"><code>docker run -d -p 8081<span class=\"hljs-function\">:8081</span> <span class=\"hljs-params\">--name</span> nexus -v <span class=\"hljs-string\">/root/nexus-data</span>:<span class=\"hljs-string\">/var/nexus-data</span> <span class=\"hljs-params\">--restart=always</span> sonatype/nexus3</code></pre><p><br></p><h1 id=\"8nds4\">3.#查看执行日志  docker logs -f nexus</h1>如果一切成功的话，会显示如下日志信息。&nbsp;<br><img src=\"http://qiniu-picture.xiyanit.cn/FrO5mH4pJNpN0hvhTSSjhZ8MmkqW\" style=\"max-width:100%;\"><br><font size=\"4\">(大概需要等待1分钟左右)在访问http://你的ip地址:8081（默认密码是admin/admin123）<br></font><img src=\"http://qiniu-picture.xiyanit.cn/FiaorWRhmsxc1vi_l_yjRiM3d9rC\" style=\"max-width:100%;\"><font size=\"4\"><br>上传本地jar包到maven私服<br>1.创建库<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Ft3RAp4qPTiO3XZeEZ_Cl0rp_MaJ\" style=\"max-width:100%;\"><p><img src=\"http://qiniu-picture.xiyanit.cn/Fn8o9A0GOC4IYoFze1ppPplJNwRl\" style=\"max-width:100%;\"></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FomfO7X12AK-iPVckVqgIr30Cg_F\" style=\"max-width:100%;\"><br><font size=\"4\">2.创建用户</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fv5P7X74YjBvUxsfQ_PA6b34uTgs\" style=\"max-width:100%;\"><font size=\"4\"><br>3.配置C:\\Users\\Administrator\\.m2下的settings.xml文件</font><br></p><pre type=\"Bash\"><code> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>root<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>root<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span></code></pre><p><h1 id=\"3925e\"><img src=\"http://qiniu-picture.xiyanit.cn/Fl_4eZttKoB_p9hhKKSWvP6cfw1A\" style=\"max-width:100%;\"><br></h1><h1 id=\"3925e\">4.查看库的url</h1><img src=\"http://qiniu-picture.xiyanit.cn/FlmRHliVy0PYUr2qep7u6k0BtFCN\" style=\"max-width:100%;\"><br><h1 id=\"9fmer\">5.配置pom.xml文件</h1></p><pre type=\"Bash\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- id要跟settings里面配置的server的id一致 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- maven私服仓库的url地址 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://192.168.8.5:8081/repository/bdqn-proxy/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span>\n\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n		<span class=\"hljs-comment\">&lt;!-- 发布代码jar插件 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- 发布源码插件 --&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre><p><h1 id=\"m9f7p\">6.注意问题版本不要有非法内容不然上传会失败</h1><img src=\"http://qiniu-picture.xiyanit.cn/FmSYMkVehEolsiGLkSzYv7pW9DWR\" style=\"max-width:100%;\"><br><font size=\"5\">把杠改成.修改成这样或者&lt;version&gt;2.0&lt;/version&gt;二个都试一下</font><br><br><h1 id=\"zpgij\">7.打开项目的所在路径</h1><img src=\"http://qiniu-picture.xiyanit.cn/FskcyQQAOgQCtgtD9kgSX0bUx_9P\" style=\"max-width:100%;\"><br><h1 id=\"5qmxx\">8.在项目下执行cmd运行     mvn deploy</h1><img src=\"http://qiniu-picture.xiyanit.cn/FmqQZgYK4eVOWpuLuCBHh9JR1pjc\" style=\"max-width:100%;\"><br><br><font size=\"4\">运行成功</font><br><img src=\"http://qiniu-picture.xiyanit.cn/Fm7H4gVURKpVtl-BcxthFU0Fw7oB\" style=\"max-width:100%;\"><br><font size=\"4\">查看私服是否上传成功</font><br><img src=\"http://qiniu-picture.xiyanit.cn/Fmx4FZMLOq5lKuasUaqgaY9ekhmU\" style=\"max-width:100%;\"><br><font size=\"4\">导入maven私服jar包到maven项目中<br>查看坐标<br></font><img src=\"http://qiniu-picture.xiyanit.cn/FhwVp9FojZZUSC55gt5Q7ffRppaC\" style=\"max-width:100%;\"><br><font size=\"4\">2.把刚刚上传jar的项目删除，不然等下导入私服jar包的时候的时候会报错，一定要删除<br></font><img src=\"http://qiniu-picture.xiyanit.cn/Fs5CpwBFHw8QzJnXs_A0CY3bT9OH\" style=\"max-width:100%;\"><font size=\"4\"><br>3.在pom.xml引入jar包</font><br><img src=\"http://qiniu-picture.xiyanit.cn/FiUoaHsqJx1G1X1dTeqwKhYhzYPo\" style=\"max-width:100%;\"><br><br><font size=\"4\">如果有多个项目需要导入jar包可以在settings.xml配置</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">profile</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>bbsnexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repositories</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span>\n						<span class=\"hljs-comment\">&lt;!-- Maven 私有库 --&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://192.168.8.5:8081/repository/bdqn-nexus/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releases</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releases</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshots</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshots</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repositories</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">profile</span>&gt;</span>\n\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activeProfiles</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activeProfile</span>&gt;</span>bbsnexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activeProfile</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activeProfiles</span>&gt;</span></code></pre><p><br><font size=\"4\">效果图<br></font><img src=\"http://qiniu-picture.xiyanit.cn/FtS_8-bbl3kjvbb-1axt2mccvLlX\" style=\"max-width:100%;\"><font size=\"4\"><br>4.Pom.xml引入       把刚刚上传jar的项目删除，不然等下导入私服jar包的时候的时候会报错，一定要删除</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FnjRHlWzfYkYk-0eemlK2tj8G-DK\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p>','1','8','1','1','1','2021-01-06 18:44:06','2021-01-06 18:49:23'),(34,'http://qiniu-picture.xiyanit.cn/Fvy3VnzqbLtI37VcOvOU2gyiNnzp','Docker推送镜像到阿里云镜像容器','Docker,阿里云,','Docker推送镜像到阿里云镜像容器',4,0,0,'1',1,'<h1><font size=\"5\" id=\"6bw45\">1.首先我们需要开通 阿里云容器镜像服务 ，然后创建命名空间</font></h1><p><font size=\"5\"><a href=\"https://cr.console.aliyun.com/cn-shenzhen/instances\" target=\"_blank\">https://cr.console.aliyun.com/cn-shenzhen/instances</a></font><br></p><h1 id=\"904oo\">2.设置发布的密码</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FlNLO0YK_LFFU8MXe2XrI8_kM5VY\" style=\"max-width:100%;\"><br></p><h1 id=\"qkxbk\">3.使用如下命令在docker上操作镜像</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FjSxiL8PcAGmzFeogGOr94Z_nfMq\" style=\"max-width:100%;\"><br></p>','<h1><font size=\"5\" id=\"6bw45\">1.首先我们需要开通 阿里云容器镜像服务 ，然后创建命名空间</font></h1><p><font size=\"5\"><a href=\"https://cr.console.aliyun.com/cn-shenzhen/instances\" target=\"_blank\">https://cr.console.aliyun.com/cn-shenzhen/instances</a></font><br></p><h1 id=\"904oo\">2.设置发布的密码</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FlNLO0YK_LFFU8MXe2XrI8_kM5VY\" style=\"max-width:100%;\"><br></p><h1 id=\"qkxbk\">3.使用如下命令在docker上操作镜像</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FjSxiL8PcAGmzFeogGOr94Z_nfMq\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-01-07 11:44:35','2021-01-07 13:38:42'),(35,'http://qiniu-picture.xiyanit.cn/Fh3jXFnS3D0Uwg0yY8h8tHx28Y5r','百度云加速提升网站访问速度','百度云加速,','百度云加速提升网站访问速度',3,0,0,'1',1,' <p><font size=\"4\">今天偶然的情况，看到了百度云加速能进行网站访问速度提升，因为现在我是用学生价买的阿里云服务器，1核2G 1M带宽的，所以第一次加载资源的时候，是非常慢的，所以就打算尝试一下。</font></p><p>&nbsp;</p><h1 id=\"00qbf\">1）下面进入正题，打开百度云加速的官网&nbsp;&nbsp;<a href=\"https://su.baidu.com/\">https://su.baidu.com/</a></h1><p>&nbsp;<img src=\"http://qiniu-picture.xiyanit.cn/FhqTzIe6Hp15-vZ6K28QmjQE6MRB\" style=\"max-width: 100%;\"></p><h1 id=\"cd1pp\">2）选择免费开启，在这里可能会提示用户无效操作，或者什么的，这是因为没有实名认证，那么我们就需要登录后，进行实名认证才能使用该产品。</h1><p>&nbsp;</p><h1 id=\"17jb4\">3）实名认证完成后，我们首先需要添加网站，比如买的域名是&nbsp; xiyanit.cn 所以直接填写上去就行了。</h1><p>&nbsp;<img src=\"http://qiniu-picture.xiyanit.cn/Fk_xpq6VW36LFUc-wvtTFPBQuo6L\" style=\"max-width: 100%;\"></p><p><br></p><p>&nbsp;</p><h1 id=\"6z2fd\">4）下面是添加子域名记录。</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fgi5i2MaV1UdN6h4aWxwnRafXSw7\" style=\"max-width:100%;\"><br></p><p>注意，这里的子域名，只需要填写域名的前缀，不需要填全，比如&nbsp;<a href=\"www.xiyanyuanma.cn\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">www.xiyanyuanma.cn</a><span style=\"font-size: 1em;\">&nbsp;这是错误的。&nbsp; 只需要填写 www 即可</span></p><p>&nbsp;</p><h1 id=\"2ogwr\">5）下面就是修改域名的DNS，因为我用的是阿里云，所以需要需要进入阿里云域名管理</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo7Lw9vh3-zfrNv3_sLcNQFneG8b\" style=\"max-width:100%;\"><br></p><p>&nbsp;</p><p><font size=\"4\">然后选中DNS修改，点击确定就完成了</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FrU1VmERo7FWqZyNPGJ7y08Dr18F\" style=\"max-width:100%;\"><br></p><p>&nbsp;</p><h1 id=\"6hxi8\">6）最后选择免费版套餐，等待片刻后，就完成了，下面就可以体验一下加速效果了~！当然如果有能力的话，可以尝试一下使用CDN加速，效果估计更佳</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FkrBYeYZEVpTMB5_BCcE2_LCTjt-\" style=\"max-width:100%;\"><br></p>',' <p><font size=\"4\">今天偶然的情况，看到了百度云加速能进行网站访问速度提升，因为现在我是用学生价买的阿里云服务器，1核2G 1M带宽的，所以第一次加载资源的时候，是非常慢的，所以就打算尝试一下。</font></p><p>&nbsp;</p><h1 id=\"00qbf\">1）下面进入正题，打开百度云加速的官网&nbsp;&nbsp;<a href=\"https://su.baidu.com/\">https://su.baidu.com/</a></h1><p>&nbsp;<img src=\"http://qiniu-picture.xiyanit.cn/FhqTzIe6Hp15-vZ6K28QmjQE6MRB\" style=\"max-width: 100%;\"></p><h1 id=\"cd1pp\">2）选择免费开启，在这里可能会提示用户无效操作，或者什么的，这是因为没有实名认证，那么我们就需要登录后，进行实名认证才能使用该产品。</h1><p>&nbsp;</p><h1 id=\"17jb4\">3）实名认证完成后，我们首先需要添加网站，比如买的域名是&nbsp; xiyanit.cn 所以直接填写上去就行了。</h1><p>&nbsp;<img src=\"http://qiniu-picture.xiyanit.cn/Fk_xpq6VW36LFUc-wvtTFPBQuo6L\" style=\"max-width: 100%;\"></p><p><br></p><p>&nbsp;</p><h1 id=\"6z2fd\">4）下面是添加子域名记录。</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fgi5i2MaV1UdN6h4aWxwnRafXSw7\" style=\"max-width:100%;\"><br></p><p>注意，这里的子域名，只需要填写域名的前缀，不需要填全，比如&nbsp;<a href=\"www.xiyanyuanma.cn\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">www.xiyanyuanma.cn</a><span style=\"font-size: 1em;\">&nbsp;这是错误的。&nbsp; 只需要填写 www 即可</span></p><p>&nbsp;</p><h1 id=\"2ogwr\">5）下面就是修改域名的DNS，因为我用的是阿里云，所以需要需要进入阿里云域名管理</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo7Lw9vh3-zfrNv3_sLcNQFneG8b\" style=\"max-width:100%;\"><br></p><p>&nbsp;</p><p><font size=\"4\">然后选中DNS修改，点击确定就完成了</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FrU1VmERo7FWqZyNPGJ7y08Dr18F\" style=\"max-width:100%;\"><br></p><p>&nbsp;</p><h1 id=\"6hxi8\">6）最后选择免费版套餐，等待片刻后，就完成了，下面就可以体验一下加速效果了~！当然如果有能力的话，可以尝试一下使用CDN加速，效果估计更佳</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FkrBYeYZEVpTMB5_BCcE2_LCTjt-\" style=\"max-width:100%;\"><br></p>','1','9','1','1','1','2021-01-07 13:50:29','2021-01-07 13:50:29'),(36,'http://qiniu-picture.xiyanit.cn/FhfK0aNF1iSJnL2fW11fbILYiJcM','IntelliJ IDEA发布镜像到阿里云镜像仓库','阿里云,IntelliJ IDEA,','IntelliJ IDEA发布镜像到阿里云镜像仓库',12,0,0,'1',1,'<h1 id=\"0biam\">1.安装Alibaba Cloud Toolkit插件</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fj5nykM-uhlATjO8t6VytNy_9CAW\" style=\"max-width:100%;\"><br></p><h1 id=\"41bcm\">2.配置<span style=\"font-size: 1em;\">账户信息</span></h1><div><img src=\"http://qiniu-picture.xiyanit.cn/FrBdEpiPHABA0sUmP8A3mcET3Ujz\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FuIatC-4jd_BzWehQauLF7on_UM6\" style=\"max-width: 100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FsyfQ7Nqm-Oh5JaAbu72hWiRm1IH\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FgOLV_IPZ2dazaAsY1Ub4WkGCP9p\" style=\"max-width:100%;\"><br></p><h1 id=\"xmf6f\">3.发布</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fgb9uYrhUBZ-FobD05XV0kR6XdVs\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FjBTAj-UDyh8SldUJFm53py26ufJ\" style=\"max-width: 100%;\"><br></p><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>参数</td><td>描述</td></tr><tr><td>Build Image</td><td><ul><li>Context Directory：文件目录。</li><li>Dockerfile：Docker文件。</li><li>Version：镜像版本号。</li></ul></td></tr><tr><td>Image Repositories</td><td><ul><li>Alibaba Cloud Container Registry：阿里云镜像仓库，详情请参见<a href=\"https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-b7y-ddq-t3j\">部署应用到ACR</a>。</li><li>Custom Container Registry：自建镜像仓库，详情请参见<a href=\"https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-gss-0ca-5dz\">部署应用到其它镜像仓库</a>。</li></ul></td></tr></tbody></table><p><font size=\"5\">文档地址&nbsp;&nbsp;<a href=\"https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-gss-0ca-5dz\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-gss-0ca-5dz</a></font></p><p><br></p><h1 id=\"w7dya\">4.运行</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr1JQE6qAPunCddzIKyPGcpOcNfh\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FvRfijuFsOavzsxENBMtGLMb-jDN\" style=\"max-width:100%;\"><br></p>','<h1 id=\"0biam\">1.安装Alibaba Cloud Toolkit插件</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fj5nykM-uhlATjO8t6VytNy_9CAW\" style=\"max-width:100%;\"><br></p><h1 id=\"41bcm\">2.配置<span style=\"font-size: 1em;\">账户信息</span></h1><div><img src=\"http://qiniu-picture.xiyanit.cn/FrBdEpiPHABA0sUmP8A3mcET3Ujz\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FuIatC-4jd_BzWehQauLF7on_UM6\" style=\"max-width: 100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FsyfQ7Nqm-Oh5JaAbu72hWiRm1IH\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FgOLV_IPZ2dazaAsY1Ub4WkGCP9p\" style=\"max-width:100%;\"><br></p><h1 id=\"xmf6f\">3.发布</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fgb9uYrhUBZ-FobD05XV0kR6XdVs\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FjBTAj-UDyh8SldUJFm53py26ufJ\" style=\"max-width: 100%;\"><br></p><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>参数</td><td>描述</td></tr><tr><td>Build Image</td><td><ul><li>Context Directory：文件目录。</li><li>Dockerfile：Docker文件。</li><li>Version：镜像版本号。</li></ul></td></tr><tr><td>Image Repositories</td><td><ul><li>Alibaba Cloud Container Registry：阿里云镜像仓库，详情请参见<a href=\"https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-b7y-ddq-t3j\">部署应用到ACR</a>。</li><li>Custom Container Registry：自建镜像仓库，详情请参见<a href=\"https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-gss-0ca-5dz\">部署应用到其它镜像仓库</a>。</li></ul></td></tr></tbody></table><p><font size=\"5\">文档地址&nbsp;&nbsp;<a href=\"https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-gss-0ca-5dz\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">https://help.aliyun.com/document_detail/162966.html?spm=a2c4g.11186623.6.575.3381439fElfdxv#section-gss-0ca-5dz</a></font></p><p><br></p><h1 id=\"w7dya\">4.运行</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr1JQE6qAPunCddzIKyPGcpOcNfh\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FvRfijuFsOavzsxENBMtGLMb-jDN\" style=\"max-width:100%;\"><br></p>','1','9','1','1','1','2021-01-07 14:10:50','2021-01-07 14:15:28'),(37,'http://qiniu-picture.xiyanit.cn/Ftchxi--As6mouv3gAqhxXqla-as','Docker发布镜像到Docker Hub','Docker Hub,','Docker发布镜像到Docker Hub',6,0,0,'1',1,'<h1 id=\"mn7jy\">1.Docker hub注册用户</h1><font size=\"5\">到官网注册账号：</font><font size=\"5\" style=\"background-color: rgb(255, 255, 255);\"><a href=\"https://hub.docker.com/\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">https://hub.docker.com/</a></font><h1 id=\"kgrc8\">2.创建一个仓库</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FjqKjJc0gg1K8VLZuNNmLRSzybRs\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FnMwEa-3FVmHD-eeWxGl5f2wb5UH\" style=\"max-width:100%;\"><br></p><p><font size=\"5\">在本地Linux登录docker</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">docker login</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FhZ2_HKrKsT2tNOUS-U2VmMmMrQY\" style=\"max-width:100%;\"><br></p><p><font size=\"5\" color=\"#c24f4a\">如果repository&nbsp;的名不是你Docker hub账号和仓库，即Docker ID/仓库名，是上传不成功的<br><br>当然可以使用docker tag 镜像ID 用户名称/镜像源名(repository name):新的标签名(tag)来更改</font></p><p><font color=\"#c24f4a\" size=\"5\">修改容器名字</font></p><pre type=\"Bash\"><code>docker tag test:<span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">694475668</span>/test:<span class=\"hljs-number\">1.0</span></code></pre><pre type=\"Bash\"><code>#上传\ndocker push <span class=\"hljs-number\">694475668</span>/test:<span class=\"hljs-number\">1.0</span></code></pre><p><br></p><p><font size=\"4\">显示如下上传成功</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FtBERfEoNcPZ_zU3GGq3kJAGG_6n\" style=\"max-width:100%;\"><br></p><p><font size=\"5\">打开dockerhub查看是否上传成功</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fj5hZkN506Ar7-3xwgtcQdL21KvP\" style=\"max-width:100%;\"><br></p>','<h1 id=\"mn7jy\">1.Docker hub注册用户</h1><font size=\"5\">到官网注册账号：</font><font size=\"5\" style=\"background-color: rgb(255, 255, 255);\"><a href=\"https://hub.docker.com/\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">https://hub.docker.com/</a></font><h1 id=\"kgrc8\">2.创建一个仓库</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FjqKjJc0gg1K8VLZuNNmLRSzybRs\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FnMwEa-3FVmHD-eeWxGl5f2wb5UH\" style=\"max-width:100%;\"><br></p><p><font size=\"5\">在本地Linux登录docker</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">docker login</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FhZ2_HKrKsT2tNOUS-U2VmMmMrQY\" style=\"max-width:100%;\"><br></p><p><font size=\"5\" color=\"#c24f4a\">如果repository&nbsp;的名不是你Docker hub账号和仓库，即Docker ID/仓库名，是上传不成功的<br><br>当然可以使用docker tag 镜像ID 用户名称/镜像源名(repository name):新的标签名(tag)来更改</font></p><p><font color=\"#c24f4a\" size=\"5\">修改容器名字</font></p><pre type=\"Bash\"><code>docker tag test:<span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">694475668</span>/test:<span class=\"hljs-number\">1.0</span></code></pre><pre type=\"Bash\"><code>#上传\ndocker push <span class=\"hljs-number\">694475668</span>/test:<span class=\"hljs-number\">1.0</span></code></pre><p><br></p><p><font size=\"4\">显示如下上传成功</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FtBERfEoNcPZ_zU3GGq3kJAGG_6n\" style=\"max-width:100%;\"><br></p><p><font size=\"5\">打开dockerhub查看是否上传成功</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fj5hZkN506Ar7-3xwgtcQdL21KvP\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-01-07 15:14:01','2021-01-07 15:16:08'),(38,'http://qiniu-picture.xiyanit.cn/FvnNdtpHXnHIrgifYF56aj_Fe65D','Docker搭建Portainer','Portainer,Docker,','Docker搭建Portainer',7,0,0,'1',1,'<h1 id=\"cdoro\">1.安装中文版 （不需要汉化的可以<span style=\"font-size: 1em;\">绕</span><span style=\"font-size: 1em;\">过）</span></h1><div><font size=\"4\">没有安装wget</font></div><pre type=\"Bash\"><code>yum -y <span class=\"hljs-keyword\">install</span> wget</code></pre><p><br></p><pre type=\"Bash\"><code>wget <span class=\"hljs-string\">http:</span><span class=\"hljs-comment\">//qiniu-file.xiyanit.cn/Portainer-CN.zip</span></code></pre><p><font size=\"4\">默认会出现如下错误，没有可以执行下一步</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fvf4UZK4zITPsisGsUGHeKUd2oLV\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">解决方法：</font></p><pre type=\"Bash\"><code>sudo vi <span class=\"hljs-regexp\">/etc/</span>hosts</code></pre><p><font size=\"4\">添加好了在去执行就可以了</font></p><pre type=\"Bash\"><code><span class=\"hljs-number\">151.101.184.133</span>     raw.githubusercontent.com</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FiydNnxWcFtVyJ93DsneRmtqTWQQ\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code><span class=\"hljs-title\">mkdir</span> /<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>/portainer/public -p</span>\n<span class=\"hljs-meta\">#解压</span>\n<span class=\"hljs-title\">yum</span> install -y unzip zip\n<span class=\"hljs-title\">unzip</span> <span class=\"hljs-type\">Portainer</span>-<span class=\"hljs-type\">CN</span>.zip -d /<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>/portainer/public</span></code></pre><p><br></p><h1 id=\"sz77b\">2.运行</h1><pre type=\"Bash\"><code>docker run -d  --name portainer -p <span class=\"hljs-number\">9000</span>:<span class=\"hljs-number\">9000</span> -v <span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock:/</span>var<span class=\"hljs-regexp\">/run/</span>docker.sock -v <span class=\"hljs-regexp\">/data/</span>portainer<span class=\"hljs-regexp\">/data:/</span>data -v <span class=\"hljs-regexp\">/data/</span>portainer<span class=\"hljs-regexp\">/public:/</span><span class=\"hljs-keyword\">public</span> portainer/<span class=\"hljs-string\">portainer:</span>latest</code></pre><h1 id=\"l539m\">3.ip:9000访问</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr-Ara75uRvGrrA7PuL56PdqAS6r\" style=\"max-width:100%;\"><br></p>','<h1 id=\"cdoro\">1.安装中文版 （不需要汉化的可以<span style=\"font-size: 1em;\">绕</span><span style=\"font-size: 1em;\">过）</span></h1><div><font size=\"4\">没有安装wget</font></div><pre type=\"Bash\"><code>yum -y <span class=\"hljs-keyword\">install</span> wget</code></pre><p><br></p><pre type=\"Bash\"><code>wget <span class=\"hljs-string\">http:</span><span class=\"hljs-comment\">//qiniu-file.xiyanit.cn/Portainer-CN.zip</span></code></pre><p><font size=\"4\">默认会出现如下错误，没有可以执行下一步</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fvf4UZK4zITPsisGsUGHeKUd2oLV\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">解决方法：</font></p><pre type=\"Bash\"><code>sudo vi <span class=\"hljs-regexp\">/etc/</span>hosts</code></pre><p><font size=\"4\">添加好了在去执行就可以了</font></p><pre type=\"Bash\"><code><span class=\"hljs-number\">151.101.184.133</span>     raw.githubusercontent.com</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FiydNnxWcFtVyJ93DsneRmtqTWQQ\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code><span class=\"hljs-title\">mkdir</span> /<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>/portainer/public -p</span>\n<span class=\"hljs-meta\">#解压</span>\n<span class=\"hljs-title\">yum</span> install -y unzip zip\n<span class=\"hljs-title\">unzip</span> <span class=\"hljs-type\">Portainer</span>-<span class=\"hljs-type\">CN</span>.zip -d /<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>/portainer/public</span></code></pre><p><br></p><h1 id=\"sz77b\">2.运行</h1><pre type=\"Bash\"><code>docker run -d  --name portainer -p <span class=\"hljs-number\">9000</span>:<span class=\"hljs-number\">9000</span> -v <span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock:/</span>var<span class=\"hljs-regexp\">/run/</span>docker.sock -v <span class=\"hljs-regexp\">/data/</span>portainer<span class=\"hljs-regexp\">/data:/</span>data -v <span class=\"hljs-regexp\">/data/</span>portainer<span class=\"hljs-regexp\">/public:/</span><span class=\"hljs-keyword\">public</span> portainer/<span class=\"hljs-string\">portainer:</span>latest</code></pre><h1 id=\"l539m\">3.ip:9000访问</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr-Ara75uRvGrrA7PuL56PdqAS6r\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-01-07 16:14:04','2021-01-07 16:33:46'),(39,'http://qiniu-picture.xiyanit.cn/FidtTRpvONbkyt7tb191NJtCy72_','Docker compose部署Vue项目','Docker,Linux,','Docker compose部署Vue项目',8,0,1,'1',1,'<h1 id=\"axb9m\">1.将vue打包的dist放入linux服务器</h1><p><font size=\"4\"><b>打包过程就不在陈述了,网上大把&nbsp; &nbsp; （<font color=\"#c24f4a\">放入linux服务器的同级</font>）</b></font></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FlCzBBQt5wfSowY-qo9NzsWeOkEF\" style=\"font-size: 1em; max-width: 100%;\"><br></p><h1 id=\"sfcfq\">2.编写<span style=\"font-size: 1em;\">Dockerfile</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 所需基础镜像</span>\n<span class=\"hljs-keyword\">FROM</span> registry.cn-shenzhen.aliyuncs.com/xiyan-blog/nginx\n<span class=\"hljs-comment\"># 作者信息</span>\n<span class=\"hljs-keyword\">MAINTAINER</span> bright\n<span class=\"hljs-comment\"># 暴露端口指定</span>\n<span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8090</span>\n<span class=\"hljs-comment\"># 文件拷贝 将打包后的前端项目 拷贝到。。。。。</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> dist/ /usr/share/nginx/html/</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> nginx.conf /etc/nginx/nginx.conf</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> xiyan.conf /etc/nginx/conf.d/default.conf</span>\n</code></pre></div><p><br></p><h1 id=\"y7szd\"><span style=\"font-size: 1em;\">3.编写</span><span style=\"font-size: 1em;\">nginx.conf&nbsp; （这个直接复制就行，不需要改什么）</span></h1><div><pre type=\"Shell Session\"><code>\n<span class=\"hljs-comment\">#user  nobody;</span>\n<span class=\"hljs-attribute\">worker_processes</span>  <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">#error_log  logs/error.log;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"hljs-comment\">#pid        logs/nginx.pid;</span>\n\n\n<span class=\"hljs-section\">events</span> {\n    <span class=\"hljs-attribute\">worker_connections</span>  <span class=\"hljs-number\">1024</span>;\n}\n\n\n<span class=\"hljs-section\">http</span> {\n    <span class=\"hljs-attribute\">include</span>       mime.types;\n    <span class=\"hljs-attribute\">default_type</span>  application/octet-stream;\n\n    <span class=\"hljs-comment\">#log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'</span>\n    <span class=\"hljs-comment\">#                  \'$status $body_bytes_sent \"$http_referer\" \'</span>\n    <span class=\"hljs-comment\">#                  \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';</span>\n\n    <span class=\"hljs-comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"hljs-attribute\">sendfile</span>        <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-comment\">#tcp_nopush     on;</span>\n\n    <span class=\"hljs-comment\">#keepalive_timeout  0;</span>\n    <span class=\"hljs-attribute\">keepalive_timeout</span>  <span class=\"hljs-number\">65</span>;\n    <span class=\"hljs-attribute\">gzip</span> <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">gzip_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n    <span class=\"hljs-attribute\">gzip_comp_level</span> <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-attribute\">gzip_min_length</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-attribute\">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    <span class=\"hljs-attribute\">log_format</span>  main  <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] \"<span class=\"hljs-variable\">$request</span>\" \'</span>\n                          <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> \"<span class=\"hljs-variable\">$http_referer</span>\" \'</span>\n                          <span class=\"hljs-string\">\'\"<span class=\"hljs-variable\">$http_user_agent</span>\" \"<span class=\"hljs-variable\">$http_x_forwarded_for</span>\"\'</span>;\n    <span class=\"hljs-attribute\">include</span> /etc/nginx/conf.d/<span class=\"hljs-regexp\">*.conf</span>;\n    \n    <span class=\"hljs-attribute\">tcp_nopush</span>          <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">tcp_nodelay</span>         <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">types_hash_max_size</span> <span class=\"hljs-number\">2048</span>;   \n\n    <span class=\"hljs-comment\">#客户端文件上传的大小</span>\n    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">500m</span>;\n    <span class=\"hljs-attribute\">proxy_connect_timeout</span> <span class=\"hljs-number\">300</span>;  \n    <span class=\"hljs-attribute\">proxy_send_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_read_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_buffer_size</span> <span class=\"hljs-number\">16k</span>; \n    <span class=\"hljs-attribute\">proxy_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">64k</span>; \n    <span class=\"hljs-attribute\">proxy_busy_buffers_size</span> <span class=\"hljs-number\">128k</span>; \n    <span class=\"hljs-attribute\">proxy_temp_file_write_size</span> <span class=\"hljs-number\">128k</span>;\n\n    <span class=\"hljs-section\">server</span> {\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;\n        <span class=\"hljs-attribute\">server_name</span>  localhost;\n\n        <span class=\"hljs-comment\">#charset koi8-r;</span>\n\n        <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\n        <span class=\"hljs-attribute\">location</span> / {\n            <span class=\"hljs-attribute\">root</span>   html;\n            <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n        }\n\n        <span class=\"hljs-comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"hljs-comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-attribute\">error_page</span>   <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span>  /50x.html;\n        <span class=\"hljs-attribute\">location</span> = /50x.html {\n            <span class=\"hljs-attribute\">root</span>   html;\n        }\n\n        <span class=\"hljs-comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    root           html;</span>\n        <span class=\"hljs-comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"hljs-comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"hljs-comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"hljs-comment\">#    include        fastcgi_params;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># deny access to .htaccess files, if Apache\'s document root</span>\n        <span class=\"hljs-comment\"># concurs with nginx\'s one</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ /\\.ht {</span>\n        <span class=\"hljs-comment\">#    deny  all;</span>\n        <span class=\"hljs-comment\">#}</span>\n    }\n\n\n    <span class=\"hljs-comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       8000;</span>\n    <span class=\"hljs-comment\">#    listen       somename:8080;</span>\n    <span class=\"hljs-comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n\n    <span class=\"hljs-comment\"># HTTPS server</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       443 ssl;</span>\n    <span class=\"hljs-comment\">#    server_name  localhost;</span>\n\n    <span class=\"hljs-comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"hljs-comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"hljs-comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"hljs-comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"hljs-comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"hljs-comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n}\n</code></pre></div><p><br></p><h1 id=\"3w65p\"><span style=\"font-size: 1em;\">4.编写</span><span style=\"font-size: 1em;\">xiyan.conf</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> localhost;\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">root</span>   /usr/share/nginx/html;\n        <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n        <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ /index.html;\n    }\n    <span class=\"hljs-attribute\">location</span> /xiyan/ {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://xiyan-gateway:8084/;\n    }\n}\n</code></pre></div><p><br></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FgXx_IT_lEv0S9LwN-aqTBRHpZfe\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><h1 id=\"38awi\">5.构建镜像&nbsp; &nbsp;（当前目录进行执行）</h1><p><font size=\"4\">&nbsp;参数解释：docker build -t 容器名 Dockerfile目录地址</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-symbol\">docker</span> <span class=\"hljs-keyword\">build </span>-t vue-xiyan-web .</code></pre><h1 id=\"ytwvj\">6.上传至阿里云仓库，你也可以上传Docker Hub这里不做要求</h1><h2>6.1.&nbsp;登录阿里云Docker Registry</h2><pre><code>$ sudo docker login --username=a69447**** registry.cn-shenzhen.aliyuncs.com</code></pre><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><h2>6.2.&nbsp;从Registry中拉取镜像</h2><pre><code>$ sudo docker pull registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web:[镜像版本号]</code></pre><h2>6.3.&nbsp;将镜像推送到Registry</h2><pre><code>$ sudo docker login --username=a69447**** registry.cn-shenzhen.aliyuncs.com</code><code>$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web:[镜像版本号]</code><code>$ sudo docker push registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web:[镜像版本号]</code></pre><h1><span style=\"font-size: 1em;\">7.编写</span>vue-xiyan-web.yml</h1><pre type=\"Bash\"><code><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\'3\'</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">vue-xiyan-web:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web</span>\n    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">vue-xiyan-web</span>\n    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">8090</span><span class=\"hljs-string\">:80</span>\n    <span class=\"hljs-attr\">networks:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">xiyan</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">COMPOSE_PROJECT_NAME=vue-xiyan-web</span>\n<span class=\"hljs-attr\">networks:</span>\n  <span class=\"hljs-attr\">xiyan:</span>\n    <span class=\"hljs-attr\">external:</span> <span class=\"hljs-literal\">true</span></code></pre><h1><span style=\"font-size: 1em;\" id=\"h3h2n\">8.部署nginx</span></h1><div><font size=\"5\">8.1配置nginx.conf</font></div><div><pre type=\"Bash\"><code>\n<span class=\"hljs-comment\">#user  nobody;</span>\n<span class=\"hljs-attribute\">worker_processes</span>  <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">#error_log  logs/error.log;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"hljs-comment\">#pid        logs/nginx.pid;</span>\n\n\n<span class=\"hljs-section\">events</span> {\n    <span class=\"hljs-attribute\">worker_connections</span>  <span class=\"hljs-number\">1024</span>;\n}\n\n\n<span class=\"hljs-section\">http</span> {\n    <span class=\"hljs-attribute\">include</span>       mime.types;\n    <span class=\"hljs-attribute\">default_type</span>  application/octet-stream;\n\n    <span class=\"hljs-comment\">#log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'</span>\n    <span class=\"hljs-comment\">#                  \'$status $body_bytes_sent \"$http_referer\" \'</span>\n    <span class=\"hljs-comment\">#                  \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';</span>\n\n    <span class=\"hljs-comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"hljs-attribute\">sendfile</span>        <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-comment\">#tcp_nopush     on;</span>\n\n    <span class=\"hljs-comment\">#keepalive_timeout  0;</span>\n    <span class=\"hljs-attribute\">keepalive_timeout</span>  <span class=\"hljs-number\">65</span>;\n    <span class=\"hljs-attribute\">gzip</span> <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">gzip_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n    <span class=\"hljs-attribute\">gzip_comp_level</span> <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-attribute\">gzip_min_length</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-attribute\">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    <span class=\"hljs-attribute\">log_format</span>  main  <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] \"<span class=\"hljs-variable\">$request</span>\" \'</span>\n                          <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> \"<span class=\"hljs-variable\">$http_referer</span>\" \'</span>\n                          <span class=\"hljs-string\">\'\"<span class=\"hljs-variable\">$http_user_agent</span>\" \"<span class=\"hljs-variable\">$http_x_forwarded_for</span>\"\'</span>;\n    <span class=\"hljs-attribute\">include</span> /etc/nginx/conf.d/<span class=\"hljs-regexp\">*.conf</span>;\n    \n    <span class=\"hljs-attribute\">tcp_nopush</span>          <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">tcp_nodelay</span>         <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">types_hash_max_size</span> <span class=\"hljs-number\">2048</span>;   \n\n    <span class=\"hljs-comment\">#客户端文件上传的大小</span>\n    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">500m</span>;\n    <span class=\"hljs-attribute\">proxy_connect_timeout</span> <span class=\"hljs-number\">300</span>;  \n    <span class=\"hljs-attribute\">proxy_send_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_read_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_buffer_size</span> <span class=\"hljs-number\">16k</span>; \n    <span class=\"hljs-attribute\">proxy_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">64k</span>; \n    <span class=\"hljs-attribute\">proxy_busy_buffers_size</span> <span class=\"hljs-number\">128k</span>; \n    <span class=\"hljs-attribute\">proxy_temp_file_write_size</span> <span class=\"hljs-number\">128k</span>;\n\n    <span class=\"hljs-section\">server</span> {\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;\n        <span class=\"hljs-attribute\">server_name</span>  localhost;\n\n        <span class=\"hljs-comment\">#charset koi8-r;</span>\n\n        <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\n        <span class=\"hljs-attribute\">location</span> / {\n            <span class=\"hljs-attribute\">root</span>   html;\n            <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n        }\n\n        <span class=\"hljs-comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"hljs-comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-attribute\">error_page</span>   <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span>  /50x.html;\n        <span class=\"hljs-attribute\">location</span> = /50x.html {\n            <span class=\"hljs-attribute\">root</span>   html;\n        }\n\n        <span class=\"hljs-comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    root           html;</span>\n        <span class=\"hljs-comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"hljs-comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"hljs-comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"hljs-comment\">#    include        fastcgi_params;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># deny access to .htaccess files, if Apache\'s document root</span>\n        <span class=\"hljs-comment\"># concurs with nginx\'s one</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ /\\.ht {</span>\n        <span class=\"hljs-comment\">#    deny  all;</span>\n        <span class=\"hljs-comment\">#}</span>\n    }\n\n\n    <span class=\"hljs-comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       8000;</span>\n    <span class=\"hljs-comment\">#    listen       somename:8080;</span>\n    <span class=\"hljs-comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n\n    <span class=\"hljs-comment\"># HTTPS server</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       443 ssl;</span>\n    <span class=\"hljs-comment\">#    server_name  localhost;</span>\n\n    <span class=\"hljs-comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"hljs-comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"hljs-comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"hljs-comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"hljs-comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"hljs-comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n}\n</code></pre></div><p><font size=\"5\">8.2配置xiyan.conf</font></p><pre type=\"Bash\"><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span>  pay.xiyanit.cn;\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://pay:6690/;\n    }\n}\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> web.xiyanit.cn;\n\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://vue-xiyan-web/;\n    }\n}\n</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkU6rYpmYcy9C5EIemDNbeVHQLUy\" style=\"max-width:100%;\"><br></p><h1 id=\"faext\">8.3nginx.yml配置</h1><pre type=\"Bash\"><code><span class=\"hljs-symbol\">version:</span> <span class=\"hljs-string\">\'3\'</span>\n<span class=\"hljs-symbol\">services:</span>\n<span class=\"hljs-symbol\">  nginx:</span>\n<span class=\"hljs-symbol\">    image:</span> registry.cn-shenzhen.aliyuncs.com<span class=\"hljs-meta-keyword\">/xiyan-blog/</span>nginx\n<span class=\"hljs-symbol\">    container_name:</span> nginx\n<span class=\"hljs-symbol\">    restart:</span> always\n<span class=\"hljs-symbol\">    ports:</span>\n      - <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span>  \n      - <span class=\"hljs-number\">8600</span>:<span class=\"hljs-number\">8600</span>\n<span class=\"hljs-symbol\">    networks:</span>\n      - xiyan\n<span class=\"hljs-symbol\">    volumes:</span>\n      - ..<span class=\"hljs-meta-keyword\">/data/</span>nginx_data/:<span class=\"hljs-meta-keyword\">/home/</span>aisys/xiyan_data/\n      - ..<span class=\"hljs-meta-keyword\">/config/</span>nginx/nginx.conf:<span class=\"hljs-meta-keyword\">/etc/</span>nginx/nginx.conf\n      - ..<span class=\"hljs-meta-keyword\">/config/</span>nginx/xiyan.conf:<span class=\"hljs-meta-keyword\">/etc/</span>nginx/conf.d/default.conf\n<span class=\"hljs-symbol\">networks:</span>\n<span class=\"hljs-symbol\">  xiyan:</span>\n<span class=\"hljs-symbol\">    external:</span> true\n</code></pre><p><br></p><h1 id=\"faext\"><img src=\"http://qiniu-picture.xiyanit.cn/FtieaK_UMuhh4hj9utfB2e8qP1Gi\" style=\"font-size: 14px; font-weight: 200; max-width: 100%;\"></h1><h1><span style=\"font-size: 1em;\" id=\"4yqws\">9.启动</span></h1><div><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">docker-compose</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">vue-xiyan-web</span><span class=\"hljs-selector-class\">.yml</span> <span class=\"hljs-selector-tag\">up</span> <span class=\"hljs-selector-tag\">-d</span>\n\n<span class=\"hljs-selector-tag\">docker-compose</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">nginx</span><span class=\"hljs-selector-class\">.yml</span> <span class=\"hljs-selector-tag\">up</span> <span class=\"hljs-selector-tag\">-d</span></code></pre></div><h1 id=\"y4pm4\">10.访问</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FkG-ISZuMFmjG2RL549DxNh1bdMg\" style=\"max-width:100%;\"><br></p>','<h1 id=\"axb9m\">1.将vue打包的dist放入linux服务器</h1><p><font size=\"4\"><b>打包过程就不在陈述了,网上大把&nbsp; &nbsp; （<font color=\"#c24f4a\">放入linux服务器的同级</font>）</b></font></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FlCzBBQt5wfSowY-qo9NzsWeOkEF\" style=\"font-size: 1em; max-width: 100%;\"><br></p><h1 id=\"sfcfq\">2.编写<span style=\"font-size: 1em;\">Dockerfile</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 所需基础镜像</span>\n<span class=\"hljs-keyword\">FROM</span> registry.cn-shenzhen.aliyuncs.com/xiyan-blog/nginx\n<span class=\"hljs-comment\"># 作者信息</span>\n<span class=\"hljs-keyword\">MAINTAINER</span> bright\n<span class=\"hljs-comment\"># 暴露端口指定</span>\n<span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8090</span>\n<span class=\"hljs-comment\"># 文件拷贝 将打包后的前端项目 拷贝到。。。。。</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> dist/ /usr/share/nginx/html/</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> nginx.conf /etc/nginx/nginx.conf</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> xiyan.conf /etc/nginx/conf.d/default.conf</span>\n</code></pre></div><p><br></p><h1 id=\"y7szd\"><span style=\"font-size: 1em;\">3.编写</span><span style=\"font-size: 1em;\">nginx.conf&nbsp; （这个直接复制就行，不需要改什么）</span></h1><div><pre type=\"Shell Session\"><code>\n<span class=\"hljs-comment\">#user  nobody;</span>\n<span class=\"hljs-attribute\">worker_processes</span>  <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">#error_log  logs/error.log;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"hljs-comment\">#pid        logs/nginx.pid;</span>\n\n\n<span class=\"hljs-section\">events</span> {\n    <span class=\"hljs-attribute\">worker_connections</span>  <span class=\"hljs-number\">1024</span>;\n}\n\n\n<span class=\"hljs-section\">http</span> {\n    <span class=\"hljs-attribute\">include</span>       mime.types;\n    <span class=\"hljs-attribute\">default_type</span>  application/octet-stream;\n\n    <span class=\"hljs-comment\">#log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'</span>\n    <span class=\"hljs-comment\">#                  \'$status $body_bytes_sent \"$http_referer\" \'</span>\n    <span class=\"hljs-comment\">#                  \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';</span>\n\n    <span class=\"hljs-comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"hljs-attribute\">sendfile</span>        <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-comment\">#tcp_nopush     on;</span>\n\n    <span class=\"hljs-comment\">#keepalive_timeout  0;</span>\n    <span class=\"hljs-attribute\">keepalive_timeout</span>  <span class=\"hljs-number\">65</span>;\n    <span class=\"hljs-attribute\">gzip</span> <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">gzip_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n    <span class=\"hljs-attribute\">gzip_comp_level</span> <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-attribute\">gzip_min_length</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-attribute\">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    <span class=\"hljs-attribute\">log_format</span>  main  <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] \"<span class=\"hljs-variable\">$request</span>\" \'</span>\n                          <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> \"<span class=\"hljs-variable\">$http_referer</span>\" \'</span>\n                          <span class=\"hljs-string\">\'\"<span class=\"hljs-variable\">$http_user_agent</span>\" \"<span class=\"hljs-variable\">$http_x_forwarded_for</span>\"\'</span>;\n    <span class=\"hljs-attribute\">include</span> /etc/nginx/conf.d/<span class=\"hljs-regexp\">*.conf</span>;\n    \n    <span class=\"hljs-attribute\">tcp_nopush</span>          <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">tcp_nodelay</span>         <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">types_hash_max_size</span> <span class=\"hljs-number\">2048</span>;   \n\n    <span class=\"hljs-comment\">#客户端文件上传的大小</span>\n    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">500m</span>;\n    <span class=\"hljs-attribute\">proxy_connect_timeout</span> <span class=\"hljs-number\">300</span>;  \n    <span class=\"hljs-attribute\">proxy_send_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_read_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_buffer_size</span> <span class=\"hljs-number\">16k</span>; \n    <span class=\"hljs-attribute\">proxy_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">64k</span>; \n    <span class=\"hljs-attribute\">proxy_busy_buffers_size</span> <span class=\"hljs-number\">128k</span>; \n    <span class=\"hljs-attribute\">proxy_temp_file_write_size</span> <span class=\"hljs-number\">128k</span>;\n\n    <span class=\"hljs-section\">server</span> {\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;\n        <span class=\"hljs-attribute\">server_name</span>  localhost;\n\n        <span class=\"hljs-comment\">#charset koi8-r;</span>\n\n        <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\n        <span class=\"hljs-attribute\">location</span> / {\n            <span class=\"hljs-attribute\">root</span>   html;\n            <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n        }\n\n        <span class=\"hljs-comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"hljs-comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-attribute\">error_page</span>   <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span>  /50x.html;\n        <span class=\"hljs-attribute\">location</span> = /50x.html {\n            <span class=\"hljs-attribute\">root</span>   html;\n        }\n\n        <span class=\"hljs-comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    root           html;</span>\n        <span class=\"hljs-comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"hljs-comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"hljs-comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"hljs-comment\">#    include        fastcgi_params;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># deny access to .htaccess files, if Apache\'s document root</span>\n        <span class=\"hljs-comment\"># concurs with nginx\'s one</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ /\\.ht {</span>\n        <span class=\"hljs-comment\">#    deny  all;</span>\n        <span class=\"hljs-comment\">#}</span>\n    }\n\n\n    <span class=\"hljs-comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       8000;</span>\n    <span class=\"hljs-comment\">#    listen       somename:8080;</span>\n    <span class=\"hljs-comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n\n    <span class=\"hljs-comment\"># HTTPS server</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       443 ssl;</span>\n    <span class=\"hljs-comment\">#    server_name  localhost;</span>\n\n    <span class=\"hljs-comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"hljs-comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"hljs-comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"hljs-comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"hljs-comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"hljs-comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n}\n</code></pre></div><p><br></p><h1 id=\"3w65p\"><span style=\"font-size: 1em;\">4.编写</span><span style=\"font-size: 1em;\">xiyan.conf</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> localhost;\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">root</span>   /usr/share/nginx/html;\n        <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n        <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ /index.html;\n    }\n    <span class=\"hljs-attribute\">location</span> /xiyan/ {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://xiyan-gateway:8084/;\n    }\n}\n</code></pre></div><p><br></p><div><img src=\"http://qiniu-picture.xiyanit.cn/FgXx_IT_lEv0S9LwN-aqTBRHpZfe\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><h1 id=\"38awi\">5.构建镜像&nbsp; &nbsp;（当前目录进行执行）</h1><p><font size=\"4\">&nbsp;参数解释：docker build -t 容器名 Dockerfile目录地址</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-symbol\">docker</span> <span class=\"hljs-keyword\">build </span>-t vue-xiyan-web .</code></pre><h1 id=\"ytwvj\">6.上传至阿里云仓库，你也可以上传Docker Hub这里不做要求</h1><h2>6.1.&nbsp;登录阿里云Docker Registry</h2><pre><code>$ sudo docker login --username=a69447**** registry.cn-shenzhen.aliyuncs.com</code></pre><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><h2>6.2.&nbsp;从Registry中拉取镜像</h2><pre><code>$ sudo docker pull registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web:[镜像版本号]</code></pre><h2>6.3.&nbsp;将镜像推送到Registry</h2><pre><code>$ sudo docker login --username=a69447**** registry.cn-shenzhen.aliyuncs.com</code><code>$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web:[镜像版本号]</code><code>$ sudo docker push registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web:[镜像版本号]</code></pre><h1><span style=\"font-size: 1em;\">7.编写</span>vue-xiyan-web.yml</h1><pre type=\"Bash\"><code><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\'3\'</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">vue-xiyan-web:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-shenzhen.aliyuncs.com/xiyan-blog/vue-xiyan-web</span>\n    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">vue-xiyan-web</span>\n    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">8090</span><span class=\"hljs-string\">:80</span>\n    <span class=\"hljs-attr\">networks:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">xiyan</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">COMPOSE_PROJECT_NAME=vue-xiyan-web</span>\n<span class=\"hljs-attr\">networks:</span>\n  <span class=\"hljs-attr\">xiyan:</span>\n    <span class=\"hljs-attr\">external:</span> <span class=\"hljs-literal\">true</span></code></pre><h1><span style=\"font-size: 1em;\" id=\"h3h2n\">8.部署nginx</span></h1><div><font size=\"5\">8.1配置nginx.conf</font></div><div><pre type=\"Bash\"><code>\n<span class=\"hljs-comment\">#user  nobody;</span>\n<span class=\"hljs-attribute\">worker_processes</span>  <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">#error_log  logs/error.log;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"hljs-comment\">#pid        logs/nginx.pid;</span>\n\n\n<span class=\"hljs-section\">events</span> {\n    <span class=\"hljs-attribute\">worker_connections</span>  <span class=\"hljs-number\">1024</span>;\n}\n\n\n<span class=\"hljs-section\">http</span> {\n    <span class=\"hljs-attribute\">include</span>       mime.types;\n    <span class=\"hljs-attribute\">default_type</span>  application/octet-stream;\n\n    <span class=\"hljs-comment\">#log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'</span>\n    <span class=\"hljs-comment\">#                  \'$status $body_bytes_sent \"$http_referer\" \'</span>\n    <span class=\"hljs-comment\">#                  \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';</span>\n\n    <span class=\"hljs-comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"hljs-attribute\">sendfile</span>        <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-comment\">#tcp_nopush     on;</span>\n\n    <span class=\"hljs-comment\">#keepalive_timeout  0;</span>\n    <span class=\"hljs-attribute\">keepalive_timeout</span>  <span class=\"hljs-number\">65</span>;\n    <span class=\"hljs-attribute\">gzip</span> <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">gzip_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n    <span class=\"hljs-attribute\">gzip_comp_level</span> <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-attribute\">gzip_min_length</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-attribute\">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    <span class=\"hljs-attribute\">log_format</span>  main  <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] \"<span class=\"hljs-variable\">$request</span>\" \'</span>\n                          <span class=\"hljs-string\">\'<span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> \"<span class=\"hljs-variable\">$http_referer</span>\" \'</span>\n                          <span class=\"hljs-string\">\'\"<span class=\"hljs-variable\">$http_user_agent</span>\" \"<span class=\"hljs-variable\">$http_x_forwarded_for</span>\"\'</span>;\n    <span class=\"hljs-attribute\">include</span> /etc/nginx/conf.d/<span class=\"hljs-regexp\">*.conf</span>;\n    \n    <span class=\"hljs-attribute\">tcp_nopush</span>          <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">tcp_nodelay</span>         <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">types_hash_max_size</span> <span class=\"hljs-number\">2048</span>;   \n\n    <span class=\"hljs-comment\">#客户端文件上传的大小</span>\n    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">500m</span>;\n    <span class=\"hljs-attribute\">proxy_connect_timeout</span> <span class=\"hljs-number\">300</span>;  \n    <span class=\"hljs-attribute\">proxy_send_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_read_timeout</span> <span class=\"hljs-number\">300</span>; \n    <span class=\"hljs-attribute\">proxy_buffer_size</span> <span class=\"hljs-number\">16k</span>; \n    <span class=\"hljs-attribute\">proxy_buffers</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">64k</span>; \n    <span class=\"hljs-attribute\">proxy_busy_buffers_size</span> <span class=\"hljs-number\">128k</span>; \n    <span class=\"hljs-attribute\">proxy_temp_file_write_size</span> <span class=\"hljs-number\">128k</span>;\n\n    <span class=\"hljs-section\">server</span> {\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;\n        <span class=\"hljs-attribute\">server_name</span>  localhost;\n\n        <span class=\"hljs-comment\">#charset koi8-r;</span>\n\n        <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\n        <span class=\"hljs-attribute\">location</span> / {\n            <span class=\"hljs-attribute\">root</span>   html;\n            <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n        }\n\n        <span class=\"hljs-comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"hljs-comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-attribute\">error_page</span>   <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span>  /50x.html;\n        <span class=\"hljs-attribute\">location</span> = /50x.html {\n            <span class=\"hljs-attribute\">root</span>   html;\n        }\n\n        <span class=\"hljs-comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    root           html;</span>\n        <span class=\"hljs-comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"hljs-comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"hljs-comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"hljs-comment\">#    include        fastcgi_params;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># deny access to .htaccess files, if Apache\'s document root</span>\n        <span class=\"hljs-comment\"># concurs with nginx\'s one</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ /\\.ht {</span>\n        <span class=\"hljs-comment\">#    deny  all;</span>\n        <span class=\"hljs-comment\">#}</span>\n    }\n\n\n    <span class=\"hljs-comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       8000;</span>\n    <span class=\"hljs-comment\">#    listen       somename:8080;</span>\n    <span class=\"hljs-comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n\n    <span class=\"hljs-comment\"># HTTPS server</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       443 ssl;</span>\n    <span class=\"hljs-comment\">#    server_name  localhost;</span>\n\n    <span class=\"hljs-comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"hljs-comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"hljs-comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"hljs-comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"hljs-comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"hljs-comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n}\n</code></pre></div><p><font size=\"5\">8.2配置xiyan.conf</font></p><pre type=\"Bash\"><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span>  pay.xiyanit.cn;\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://pay:6690/;\n    }\n}\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> web.xiyanit.cn;\n\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://vue-xiyan-web/;\n    }\n}\n</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkU6rYpmYcy9C5EIemDNbeVHQLUy\" style=\"max-width:100%;\"><br></p><h1 id=\"faext\">8.3nginx.yml配置</h1><pre type=\"Bash\"><code><span class=\"hljs-symbol\">version:</span> <span class=\"hljs-string\">\'3\'</span>\n<span class=\"hljs-symbol\">services:</span>\n<span class=\"hljs-symbol\">  nginx:</span>\n<span class=\"hljs-symbol\">    image:</span> registry.cn-shenzhen.aliyuncs.com<span class=\"hljs-meta-keyword\">/xiyan-blog/</span>nginx\n<span class=\"hljs-symbol\">    container_name:</span> nginx\n<span class=\"hljs-symbol\">    restart:</span> always\n<span class=\"hljs-symbol\">    ports:</span>\n      - <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span>  \n      - <span class=\"hljs-number\">8600</span>:<span class=\"hljs-number\">8600</span>\n<span class=\"hljs-symbol\">    networks:</span>\n      - xiyan\n<span class=\"hljs-symbol\">    volumes:</span>\n      - ..<span class=\"hljs-meta-keyword\">/data/</span>nginx_data/:<span class=\"hljs-meta-keyword\">/home/</span>aisys/xiyan_data/\n      - ..<span class=\"hljs-meta-keyword\">/config/</span>nginx/nginx.conf:<span class=\"hljs-meta-keyword\">/etc/</span>nginx/nginx.conf\n      - ..<span class=\"hljs-meta-keyword\">/config/</span>nginx/xiyan.conf:<span class=\"hljs-meta-keyword\">/etc/</span>nginx/conf.d/default.conf\n<span class=\"hljs-symbol\">networks:</span>\n<span class=\"hljs-symbol\">  xiyan:</span>\n<span class=\"hljs-symbol\">    external:</span> true\n</code></pre><p><br></p><h1 id=\"faext\"><img src=\"http://qiniu-picture.xiyanit.cn/FtieaK_UMuhh4hj9utfB2e8qP1Gi\" style=\"font-size: 14px; font-weight: 200; max-width: 100%;\"></h1><h1><span style=\"font-size: 1em;\" id=\"4yqws\">9.启动</span></h1><div><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">docker-compose</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">vue-xiyan-web</span><span class=\"hljs-selector-class\">.yml</span> <span class=\"hljs-selector-tag\">up</span> <span class=\"hljs-selector-tag\">-d</span>\n\n<span class=\"hljs-selector-tag\">docker-compose</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">nginx</span><span class=\"hljs-selector-class\">.yml</span> <span class=\"hljs-selector-tag\">up</span> <span class=\"hljs-selector-tag\">-d</span></code></pre></div><h1 id=\"y4pm4\">10.访问</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FkG-ISZuMFmjG2RL549DxNh1bdMg\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-01-12 14:11:49','2021-01-12 14:17:35'),(40,'http://qiniu-picture.xiyanit.cn/FqABYAHgd5S6bleF0gESv9cqetMX','Linux一键部署夕颜博客系统','Linux,Docker,','Linux一键部署夕颜博客系统',57,0,0,'1',1,'<h1 id=\"2lyjb\">1.下载源码然后将里面的<span style=\"font-size: 1em;\">docker-compose</span><span style=\"font-size: 1em;\">配置文件拷贝到你的服务器</span></h1><div><a href=\"https://gitee.com/bright-boy/xiyan-blog\" target=\"_blank\"><font size=\"5\">https://gitee.com/bright-boy/xiyan-blog</font></a><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FvejY2aFvtzk_zZRl9ynFQEqchys\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqNQt3IfOwl7COBujI1hqdlJBrZG\" style=\"max-width:100%;\"><br></p><h1 id=\"qu9h1\">2.目录介绍</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FtQjCXKdxttMO8pMMQbscoYSZdso\" style=\"max-width:100%;\"><br></p><ul><li><p><font face=\"楷体\">bin：相关一键启动脚本的目录</font></p><ul><li><p><font face=\"楷体\">completeStartup.sh：完整版启动脚本</font></p></li><li><p><font face=\"楷体\">completeShutdown.sh：完整版关闭脚本</font></p></li><li><p><font face=\"楷体\">kernStartup.sh：核心版启动脚本【只包含必要的组件】</font></p></li><li><p><font face=\"楷体\">kernShutdown.sh：核心版关闭脚本</font></p></li><li><p><font face=\"楷体\">update.sh：用于更新镜像【同步最新代码时使用】</font></p></li></ul></li><li><p><font face=\"楷体\">config：存放配置文件</font></p></li><li><p><font face=\"楷体\">data：存放数据文件</font></p></li><li><p><font face=\"楷体\">log：存放日志文件</font></p></li><li><p><font face=\"楷体\">yaml：存放docker compose的yaml文件</font></p></li></ul><h1 id=\"qu9h1\">3.授权</h1><pre type=\"Bash\"><code>chmod -R <span class=\"hljs-number\">777</span> <span class=\"hljs-meta-keyword\">/usr/</span>local/docker-compose</code><code><br></code><code>\nchmod <span class=\"hljs-number\">644</span> -R <span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/docker-compose/</span>config<span class=\"hljs-meta-keyword\">/elfk/</span></code></pre><h1 id=\"mnrdx\"><br></h1><h1 id=\"mnrdx\">4.修改nginx配置改为你配置的域名</h1><pre type=\"Bash\"><code><font size=\"3\">vim <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/docker-compose/</span>config<span class=\"hljs-regexp\">/nginx/</span>xiyan.conf</font></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi03KpCL7OvztgZHxQDJlvn9R01c\" style=\"max-width:100%;\"><br></p><h1 id=\"qu9h1\">5.如果服务器是4g以下的请开启虚拟内存，4g以上请忽略</h1><p><font size=\"5\"><a href=\"http://xiyanit.cn/article?id=10\" target=\"_blank\">Linux开启虚拟内存</a></font><br></p><h1 id=\"wicos\">6.安装Docker</h1><p><font size=\"5\"><a href=\"http://xiyanit.cn/article?id=30\" target=\"_blank\">Centos7下Docker安装</a></font><br></p><h1 id=\"2dw3b\">7.安装docker compose</h1><p><font size=\"5\"><a href=\"http://xiyanit.cn/article?id=29\" target=\"_blank\">docker-compose的三种安装方式</a></font><br></p><h1 id=\"9mdse\">8.部署</h1><pre type=\"Bash\"><code><font size=\"3\">cd <span class=\"hljs-regexp\" style=\"\">/usr/</span>local<span class=\"hljs-regexp\" style=\"\">/docker-compose/</span>bin<span class=\"hljs-regexp\" style=\"\">/</span></font></code></pre><p><br></p><pre type=\"Bash\"><code><font size=\"3\"><span class=\"hljs-keyword\">sh</span> kernStartup.<span class=\"hljs-keyword\">sh</span></font></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi1VvyEg7s8G4O8A6hW6Vey7uC9k\" style=\"max-width:100%;\"><br></p><h1 id=\"yrk9j\">9.查看是否都启动成功</h1><pre type=\"Bash\"><code><font size=\"3\">docker ps -a<span class=\"hljs-comment\">;</span></font>\n</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FsL1vJyHukuqPO_Lvi7kYx9vBWGc\" style=\"max-width:100%;\"><br></p><h1 id=\"qx89m\">10.支付配置</h1><p><font size=\"5\">打开支付网页，刚刚你在nginx配置的域名&nbsp; &nbsp;<font color=\"#c24f4a\">账户密码admin</font></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FilJRHtLmG979MXjBVFBKuGxTvZj\" style=\"max-width:100%;\"><font size=\"5\"><br></font></p><h1 id=\"qx89m\"><img src=\"http://qiniu-picture.xiyanit.cn/FiFvUaUOEFlEB1CRB3NPREW2Im7E\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fut_DlKxO0QHB8XBLyFfR4mtZgYR\" style=\"font-size: 14px; font-weight: 200; max-width: 100%;\"><br></h1><h1 id=\"qx89m\">11.修改nacos配置</h1><p><font size=\"4\">打开http://ip8848/nacos&nbsp; 默认账户密码nacos</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhKwRjdYvQ9fYJkVNEcMuKDnxUKC\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiQxZXt3YWms0x4b6DEOOePEeQWe\" style=\"max-width:100%;\"><br></p><h1 id=\"qx89m\">12.重启cms服务</h1><p><font size=\"5\">打开http://ip:9000</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr-Ara75uRvGrrA7PuL56PdqAS6r\"><font size=\"5\"><br></font></p><p><font size=\"5\">选择本地docker连接</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fu3PuaC_Tnnh841dMQl-DUPwoqJM\" style=\"max-width:100%;\"><font size=\"5\"><br></font></p><p><br></p><h1 id=\"qx89m\">13.访问</h1><p><font size=\"4\">用你刚刚配置的域名进行访问</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FmwJ2TRYKwKQEaO8P88--kTxa4Vk\" style=\"max-width:100%;\"><br></p><h1 id=\"8un04\">14.如果没有运行成功，欢迎进群进行指导你</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FhAYaebNjvingujpkdXk95RaGJlp\" style=\"max-width:100%;\"><br></p>','<h1 id=\"2lyjb\">1.下载源码然后将里面的<span style=\"font-size: 1em;\">docker-compose</span><span style=\"font-size: 1em;\">配置文件拷贝到你的服务器</span></h1><div><a href=\"https://gitee.com/bright-boy/xiyan-blog\" target=\"_blank\"><font size=\"5\">https://gitee.com/bright-boy/xiyan-blog</font></a><span style=\"font-size: 1em;\"><br></span></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FvejY2aFvtzk_zZRl9ynFQEqchys\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqNQt3IfOwl7COBujI1hqdlJBrZG\" style=\"max-width:100%;\"><br></p><h1 id=\"qu9h1\">2.目录介绍</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FtQjCXKdxttMO8pMMQbscoYSZdso\" style=\"max-width:100%;\"><br></p><ul><li><p><font face=\"楷体\">bin：相关一键启动脚本的目录</font></p><ul><li><p><font face=\"楷体\">completeStartup.sh：完整版启动脚本</font></p></li><li><p><font face=\"楷体\">completeShutdown.sh：完整版关闭脚本</font></p></li><li><p><font face=\"楷体\">kernStartup.sh：核心版启动脚本【只包含必要的组件】</font></p></li><li><p><font face=\"楷体\">kernShutdown.sh：核心版关闭脚本</font></p></li><li><p><font face=\"楷体\">update.sh：用于更新镜像【同步最新代码时使用】</font></p></li></ul></li><li><p><font face=\"楷体\">config：存放配置文件</font></p></li><li><p><font face=\"楷体\">data：存放数据文件</font></p></li><li><p><font face=\"楷体\">log：存放日志文件</font></p></li><li><p><font face=\"楷体\">yaml：存放docker compose的yaml文件</font></p></li></ul><h1 id=\"qu9h1\">3.授权</h1><pre type=\"Bash\"><code>chmod -R <span class=\"hljs-number\">777</span> <span class=\"hljs-meta-keyword\">/usr/</span>local/docker-compose</code><code><br></code><code>\nchmod <span class=\"hljs-number\">644</span> -R <span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/docker-compose/</span>config<span class=\"hljs-meta-keyword\">/elfk/</span></code></pre><h1 id=\"mnrdx\"><br></h1><h1 id=\"mnrdx\">4.修改nginx配置改为你配置的域名</h1><pre type=\"Bash\"><code><font size=\"3\">vim <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/docker-compose/</span>config<span class=\"hljs-regexp\">/nginx/</span>xiyan.conf</font></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi03KpCL7OvztgZHxQDJlvn9R01c\" style=\"max-width:100%;\"><br></p><h1 id=\"qu9h1\">5.如果服务器是4g以下的请开启虚拟内存，4g以上请忽略</h1><p><font size=\"5\"><a href=\"http://xiyanit.cn/article?id=10\" target=\"_blank\">Linux开启虚拟内存</a></font><br></p><h1 id=\"wicos\">6.安装Docker</h1><p><font size=\"5\"><a href=\"http://xiyanit.cn/article?id=30\" target=\"_blank\">Centos7下Docker安装</a></font><br></p><h1 id=\"2dw3b\">7.安装docker compose</h1><p><font size=\"5\"><a href=\"http://xiyanit.cn/article?id=29\" target=\"_blank\">docker-compose的三种安装方式</a></font><br></p><h1 id=\"9mdse\">8.部署</h1><pre type=\"Bash\"><code><font size=\"3\">cd <span class=\"hljs-regexp\" style=\"\">/usr/</span>local<span class=\"hljs-regexp\" style=\"\">/docker-compose/</span>bin<span class=\"hljs-regexp\" style=\"\">/</span></font></code></pre><p><br></p><pre type=\"Bash\"><code><font size=\"3\"><span class=\"hljs-keyword\">sh</span> kernStartup.<span class=\"hljs-keyword\">sh</span></font></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi1VvyEg7s8G4O8A6hW6Vey7uC9k\" style=\"max-width:100%;\"><br></p><h1 id=\"yrk9j\">9.查看是否都启动成功</h1><pre type=\"Bash\"><code><font size=\"3\">docker ps -a<span class=\"hljs-comment\">;</span></font>\n</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FsL1vJyHukuqPO_Lvi7kYx9vBWGc\" style=\"max-width:100%;\"><br></p><h1 id=\"qx89m\">10.支付配置</h1><p><font size=\"5\">打开支付网页，刚刚你在nginx配置的域名&nbsp; &nbsp;<font color=\"#c24f4a\">账户密码admin</font></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FilJRHtLmG979MXjBVFBKuGxTvZj\" style=\"max-width:100%;\"><font size=\"5\"><br></font></p><h1 id=\"qx89m\"><img src=\"http://qiniu-picture.xiyanit.cn/FiFvUaUOEFlEB1CRB3NPREW2Im7E\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fut_DlKxO0QHB8XBLyFfR4mtZgYR\" style=\"font-size: 14px; font-weight: 200; max-width: 100%;\"><br></h1><h1 id=\"qx89m\">11.修改nacos配置</h1><p><font size=\"4\">打开http://ip8848/nacos&nbsp; 默认账户密码nacos</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhKwRjdYvQ9fYJkVNEcMuKDnxUKC\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiQxZXt3YWms0x4b6DEOOePEeQWe\" style=\"max-width:100%;\"><br></p><h1 id=\"qx89m\">12.重启cms服务</h1><p><font size=\"5\">打开http://ip:9000</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fr-Ara75uRvGrrA7PuL56PdqAS6r\"><font size=\"5\"><br></font></p><p><font size=\"5\">选择本地docker连接</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fu3PuaC_Tnnh841dMQl-DUPwoqJM\" style=\"max-width:100%;\"><font size=\"5\"><br></font></p><p><br></p><h1 id=\"qx89m\">13.访问</h1><p><font size=\"4\">用你刚刚配置的域名进行访问</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FmwJ2TRYKwKQEaO8P88--kTxa4Vk\" style=\"max-width:100%;\"><br></p><h1 id=\"8un04\">14.如果没有运行成功，欢迎进群进行指导你</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FhAYaebNjvingujpkdXk95RaGJlp\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-01-12 15:51:14','2021-01-12 18:39:23'),(41,'http://qiniu-picture.xiyanit.cn/FkmUJTOJcMd_wATFfvyoYRR9jVVN','Windows一键部署夕颜博客系统','Windows,','Windows一键部署夕颜博客系统',24,1,0,'1',1,'<h1 id=\"rv74c\">Windows部署方式有二种方式</h1><h1 id=\"in237\">第一种（推荐|部署简单）</h1><h2><font size=\"4\" id=\"hkzia\">1.1本地虚拟机安装</font></h2><h3>VMware下载地址：</h3><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%93%BE%E6%8E%A5httpspanbaiducoms1hujxmzcygdz3xl4872ovya\"></a>链接：<a href=\"https://pan.baidu.com/s/1hujXmZCyGdz3xl4872oVyA\">https://pan.baidu.com/s/1hujXmZCyGdz3xl4872oVyA</a></font></h5><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E6%8F%90%E5%8F%96%E7%A0%818i4s\"></a>提取码：8i4s</font></h5><h3><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80\"></a>镜像下载地址：</h3><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%93%BE%E6%8E%A5httpspanbaiducoms1eolvnz2b_zbsm9axgkoxcq\"></a>链接：<a href=\"https://pan.baidu.com/s/1eolvnz2B_zBSM9aXGkOxCQ\">https://pan.baidu.com/s/1eolvnz2B_zBSM9aXGkOxCQ</a></font></h5><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E6%8F%90%E5%8F%96%E7%A0%815qop\"></a>提取码：5qop</font></h5><h3><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4\"></a>安装步骤：</h3><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%93%BE%E6%8E%A5httpspanbaiducoms16wke8s1ifsiuspbtcyyv-g\"></a>链接：<a href=\"https://pan.baidu.com/s/16wKE8S1IfsIuspbTCyYv-g\">https://pan.baidu.com/s/16wKE8S1IfsIuspbTCyYv-g</a></font></h5><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E6%8F%90%E5%8F%96%E7%A0%81ru4e\"></a>提取码：ru4e</font></h5><p><font size=\"5\">将虚拟机的内存建议放8g</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpBS54aCZn4XOXeAH0Kk8oz7U8K1\" style=\"max-width:100%;\"><br></p><h2 id=\"2tlec\">1.2.安装好了以后 在参考这篇文件，按这篇文章依次完成操作即可</h2><p><a href=\"http://xiyanit.cn/article?id=40\" target=\"_blank\"><font size=\"5\">http://xiyanit.cn/article?id=40</font></a><br></p><h1>第二种通过开发工具部署</h1><p><font size=\"4\">如果需要开发工具部署的进群，如果人数需要比较多，我就在写一份文档</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhAYaebNjvingujpkdXk95RaGJlp\" style=\"max-width:100%;\"><br></p>','<h1 id=\"rv74c\">Windows部署方式有二种方式</h1><h1 id=\"in237\">第一种（推荐|部署简单）</h1><h2><font size=\"4\" id=\"hkzia\">1.1本地虚拟机安装</font></h2><h3>VMware下载地址：</h3><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%93%BE%E6%8E%A5httpspanbaiducoms1hujxmzcygdz3xl4872ovya\"></a>链接：<a href=\"https://pan.baidu.com/s/1hujXmZCyGdz3xl4872oVyA\">https://pan.baidu.com/s/1hujXmZCyGdz3xl4872oVyA</a></font></h5><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E6%8F%90%E5%8F%96%E7%A0%818i4s\"></a>提取码：8i4s</font></h5><h3><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80\"></a>镜像下载地址：</h3><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%93%BE%E6%8E%A5httpspanbaiducoms1eolvnz2b_zbsm9axgkoxcq\"></a>链接：<a href=\"https://pan.baidu.com/s/1eolvnz2B_zBSM9aXGkOxCQ\">https://pan.baidu.com/s/1eolvnz2B_zBSM9aXGkOxCQ</a></font></h5><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E6%8F%90%E5%8F%96%E7%A0%815qop\"></a>提取码：5qop</font></h5><h3><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4\"></a>安装步骤：</h3><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E9%93%BE%E6%8E%A5httpspanbaiducoms16wke8s1ifsiuspbtcyyv-g\"></a>链接：<a href=\"https://pan.baidu.com/s/16wKE8S1IfsIuspbTCyYv-g\">https://pan.baidu.com/s/16wKE8S1IfsIuspbTCyYv-g</a></font></h5><h5><font size=\"4\"><a href=\"https://gitee.com/bright-boy/xiyan-blog/wikis/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89?sort_id=3338193#%E6%8F%90%E5%8F%96%E7%A0%81ru4e\"></a>提取码：ru4e</font></h5><p><font size=\"5\">将虚拟机的内存建议放8g</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpBS54aCZn4XOXeAH0Kk8oz7U8K1\" style=\"max-width:100%;\"><br></p><h2 id=\"2tlec\">1.2.安装好了以后 在参考这篇文件，按这篇文章依次完成操作即可</h2><p><a href=\"http://xiyanit.cn/article?id=40\" target=\"_blank\"><font size=\"5\">http://xiyanit.cn/article?id=40</font></a><br></p><h1>第二种通过开发工具部署</h1><p><font size=\"4\">如果需要开发工具部署的进群，如果人数需要比较多，我就在写一份文档</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhAYaebNjvingujpkdXk95RaGJlp\" style=\"max-width:100%;\"><br></p>','1','9','1','1','1','2021-01-12 16:05:30','2021-01-12 17:15:34'),(42,'http://qiniu-picture.xiyanit.cn/Fs0e_8aBgGsn97qqLwRcCAd8xNQ4','将博客搬至CSDN','Java,','将博客搬至CSDN',13,0,0,'1',1,'<p><a href=\"http://www.xiyanit.cn/article?id=42\" target=\"_blank\">http://www.xiyanit.cn/article?id=42</a><br></p><p><a href=\"http://xiyanit.cn/article?id=54\" target=\"_blank\">http://xiyanit.cn/article?id=54</a><br></p>','<p><a href=\"http://www.xiyanit.cn/article?id=42\" target=\"_blank\">http://www.xiyanit.cn/article?id=42</a><br></p><p><a href=\"http://xiyanit.cn/article?id=54\" target=\"_blank\">http://xiyanit.cn/article?id=54</a><br></p>','1','0','1','1','1','2021-02-02 21:31:08','2021-03-11 09:41:10'),(43,'http://qiniu-picture.xiyanit.cn/FuND9G2EEC-nklZMKLF4PveHCKdg','docsify部署技术文档','docsify,','docsify部署属于自己文档',6,0,0,'1',1,'<blockquote><p>简介<br>一个神奇的文档网站生成工具<br><br>我们在做完项目的时候经常会写一些项目手册，来记录我们在项目开发过程中的一些开发流程、使用方式以及注意事项，分享给将会使用到这个项目的人，方便大家快速上手，让程序顺利运行。<br><br>目前比较好的方式就是写成Markdown格式的技术文档，方便我们发布在github上，同时也可以发布到博客分享平台。除此之外我们还可以借助docsify这个工具，来帮助我们快速的搭建一个小型的文档网站，它可以自动将我们写在Markdown中的标题生成目录，整个页面的配色和布局也十分舒适易读，让整个阅读体验提升了好几个level，有了docsify这个神器，再也不害怕看长长的技术文档了。<br><br>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会将 .md 转成 .html 文件，所有转换工作都是在运行时进行。这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在GitHub Pages。<br></p></blockquote><h2>1.官网地址：<a href=\"https://docsify.js.org/#/zh-cn/\" target=\"_blank\">https://docsify.js.org/#/zh-cn/</a></h2><h2>2.模板地址：<a href=\"https://gitee.com/bright-boy/docs.git\" target=\"_blank\">https://gitee.com/bright-boy/docs.git</a></h2><h2>3.部署Gitee Pages</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FmQnqNn1dMdpnCYA7vH3IF_s2dCK\"><img src=\"http://qiniu-picture.xiyanit.cn/Fr5Viad0-cjPhal5LU4P2vkkXBWy\"><br></p><h2>4.效果图</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FvGwt7Wdj-2i9oIrOVCAYmFFgBWD\"><img src=\"http://qiniu-picture.xiyanit.cn/Fj0vZizlHvlWfeMPhFzBmMDz2sOE\"><img src=\"http://qiniu-picture.xiyanit.cn/FinxLK_ZsjxyMFoEVLDbEK2e4ORk\"><br></p>','<blockquote><p>简介<br>一个神奇的文档网站生成工具<br><br>我们在做完项目的时候经常会写一些项目手册，来记录我们在项目开发过程中的一些开发流程、使用方式以及注意事项，分享给将会使用到这个项目的人，方便大家快速上手，让程序顺利运行。<br><br>目前比较好的方式就是写成Markdown格式的技术文档，方便我们发布在github上，同时也可以发布到博客分享平台。除此之外我们还可以借助docsify这个工具，来帮助我们快速的搭建一个小型的文档网站，它可以自动将我们写在Markdown中的标题生成目录，整个页面的配色和布局也十分舒适易读，让整个阅读体验提升了好几个level，有了docsify这个神器，再也不害怕看长长的技术文档了。<br><br>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会将 .md 转成 .html 文件，所有转换工作都是在运行时进行。这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在GitHub Pages。<br></p></blockquote><h2>1.官网地址：<a href=\"https://docsify.js.org/#/zh-cn/\" target=\"_blank\">https://docsify.js.org/#/zh-cn/</a></h2><h2>2.模板地址：<a href=\"https://gitee.com/bright-boy/docs.git\" target=\"_blank\">https://gitee.com/bright-boy/docs.git</a></h2><h2>3.部署Gitee Pages</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FmQnqNn1dMdpnCYA7vH3IF_s2dCK\"><img src=\"http://qiniu-picture.xiyanit.cn/Fr5Viad0-cjPhal5LU4P2vkkXBWy\"><br></p><h2>4.效果图</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FvGwt7Wdj-2i9oIrOVCAYmFFgBWD\"><img src=\"http://qiniu-picture.xiyanit.cn/Fj0vZizlHvlWfeMPhFzBmMDz2sOE\"><img src=\"http://qiniu-picture.xiyanit.cn/FinxLK_ZsjxyMFoEVLDbEK2e4ORk\"><br></p>','1','10','1','1','1','2021-02-04 10:09:08','2021-02-04 10:12:21'),(44,'http://qiniu-picture.xiyanit.cn/FuP0nek7sacI_PMKbuKG0jsCHduS','Docker安装confluence企业版wiki','Linux,Wiki,','Docker安装confluence企业版wiki',7,0,0,'1',1,' <p><h2 id=\"cj278\">1. docker下载confluence image 7.2.0并创建和运行该容器</h2></p><pre type=\"Bash\"><code>docker run --detach --publish <span class=\"hljs-number\">8090</span>:<span class=\"hljs-number\">8090</span> cptactionhank/atlassian-confluence:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.0</span></code></pre><p><br></p><p><h2 id=\"5nwtu\">2.访问http://ip:8090/&nbsp;就可以看到Confluence的初始化和配置页面。</h2><div><img src=\"http://qiniu-picture.xiyanit.cn/FvujfB8kRdy5uwqzPy4sTaucZ2AL\" style=\"max-width:100%;\"><br></div><div></div></p><h2 id=\"9uhlc\">3. 选择中文-&gt;next-&gt;选择“产品安装”-&gt;跳过插件安装-&gt;进入授权码界面 （这时大部分安装文件已经存在，可以开始破解。这里要记下服务器ID，破解时要用到）</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FsYAOFkrjXn14kGYGysJeyfFMoC6\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">复制配置文件:</font><br></p><pre type=\"Bash\"><code>sudo docker cp <span class=\"hljs-symbol\">d45ec455a4f7:</span>/opt/atlassian/confluence/confluence/WEB-INF/<span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/<span class=\"hljs-title\">atlassian</span>-<span class=\"hljs-title\">extras</span>-<span class=\"hljs-title\">decoder</span>-<span class=\"hljs-title\">v2</span>-3.4.1.<span class=\"hljs-title\">jar</span> ./<span class=\"hljs-title\">atlassian</span>-<span class=\"hljs-title\">extras</span>-2.4.<span class=\"hljs-title\">jar</span></span></code></pre><p><br></p><p><font size=\"4\">//下载到本地(可以使用xftp也可以下载)</font><br><font color=\"#c24f4a\">sz atlassian-extras-2.4.jar ( 该破解器只认识这个名称)</font><br><font size=\"4\">//下破解工具 链接: https://pan.baidu.com/s/1i3qJlCGpelNsx6KRIcUniA 提取码: kpax </font><br><font size=\"4\"><br><font color=\"#f9963b\">解压后运行confluence_keygen.jar点.path 选择atlassian-extras-2.4.jar 破解成功同目录显示atlassian-extras-2.4.jar.bak</font></font></p><p><font size=\"3\">① 打开下载的破解工具，运行confluence_keygen.jar<br>②将记录的server ID填入，Name随便填。<br>③点击gen, 生成key并记录。<br>④点击patch，选择刚下传到本地的atlassian-extras-2.4.jar文件进行破解.<br>OK，破解完成后，将破解后的文件传回服务器（不要关闭破解工具，过会需复制key里面的密钥）&nbsp;</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpDP_-XsyfDCEiuYItRYItTpOMJV\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><font size=\"4\">//把atlassian-extras-2.4.jar 文件上传到服务器//然后复制到容器中</font><br></p><pre type=\"Bash\"><code>sudo docker cp ./atlassian-extras-<span class=\"hljs-number\">2.4</span>.jar <span class=\"hljs-symbol\">d45ec455a4f7:</span>/opt/atlassian/confluence/confluence/WEB-INF/<span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/<span class=\"hljs-title\">atlassian</span>-<span class=\"hljs-title\">extras</span>-<span class=\"hljs-title\">decoder</span>-<span class=\"hljs-title\">v2</span>-3.4.1.<span class=\"hljs-title\">jar</span> //停止重启</span></code></pre><p><h2 id=\"2ooxs\">5. 重启confluence容器</h2></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">docker restart yourConfluenceContainer</span></code></pre><p><br></p><p><h2 id=\"exvlg\">6.继续访问ip:8090, 拷贝黏贴刚生成的key. 然后next,进入数据库选择。</h2><h2 id=\"7mpm2\">7. 准备创建一个空的数据库confluencedb, 连接mysql. 参考https://www.cnblogs.com/JeremyWYL/p/8302438.html</h2></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">DATABASE</span> &lt;<span class=\"hljs-keyword\">database</span>-<span class=\"hljs-keyword\">name</span>&gt; <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_bin;\n<span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> &lt;<span class=\"hljs-keyword\">database</span>-<span class=\"hljs-keyword\">name</span>&gt;.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">\'&lt;confluenceuser&gt;\'</span>@<span class=\"hljs-string\">\'localhost\'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">\'&lt;password&gt;\'</span>;\n<span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> &lt;<span class=\"hljs-keyword\">database</span>-<span class=\"hljs-keyword\">name</span>&gt;.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">\'&lt;confluenceuser&gt;\'</span>@<span class=\"hljs-string\">\'%\'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">\'&lt;password&gt;\'</span>;\n<span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</code></pre><p><br></p><p><h2 id=\"50bt8\">8. 数据库url：jdbcd:mysql://&lt;dbserver&gt;:3306/&lt;database-name&gt;?userUnicode=true&amp;characterEncoding=UTF-8</h2><h2 id=\"7yop2\">9. 测试成功后就可以了。</h2><font size=\"3\">mysql的配置文件中设置解决不正确的隔离级别的问题和其他问题。<br>Confluence设置MySQL数据库报错：必须使用\'READ-COMMITTED\'作为默认隔离级别。</font><br><font size=\"3\" color=\"#c24f4a\">解决方案：</font><br></p><pre type=\"Bash\"><code>mysql -u root -p123456\n<span class=\"hljs-builtin-name\">SET</span> GLOBAL <span class=\"hljs-attribute\">tx_isolation</span>=<span class=\"hljs-string\">\'READ-COMMITTED\'</span>;</code></pre>',' <p><h2 id=\"cj278\">1. docker下载confluence image 7.2.0并创建和运行该容器</h2></p><pre type=\"Bash\"><code>docker run --detach --publish <span class=\"hljs-number\">8090</span>:<span class=\"hljs-number\">8090</span> cptactionhank/atlassian-confluence:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.0</span></code></pre><p><br></p><p><h2 id=\"5nwtu\">2.访问http://ip:8090/&nbsp;就可以看到Confluence的初始化和配置页面。</h2><div><img src=\"http://qiniu-picture.xiyanit.cn/FvujfB8kRdy5uwqzPy4sTaucZ2AL\" style=\"max-width:100%;\"><br></div><div></div></p><h2 id=\"9uhlc\">3. 选择中文-&gt;next-&gt;选择“产品安装”-&gt;跳过插件安装-&gt;进入授权码界面 （这时大部分安装文件已经存在，可以开始破解。这里要记下服务器ID，破解时要用到）</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FsYAOFkrjXn14kGYGysJeyfFMoC6\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">复制配置文件:</font><br></p><pre type=\"Bash\"><code>sudo docker cp <span class=\"hljs-symbol\">d45ec455a4f7:</span>/opt/atlassian/confluence/confluence/WEB-INF/<span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/<span class=\"hljs-title\">atlassian</span>-<span class=\"hljs-title\">extras</span>-<span class=\"hljs-title\">decoder</span>-<span class=\"hljs-title\">v2</span>-3.4.1.<span class=\"hljs-title\">jar</span> ./<span class=\"hljs-title\">atlassian</span>-<span class=\"hljs-title\">extras</span>-2.4.<span class=\"hljs-title\">jar</span></span></code></pre><p><br></p><p><font size=\"4\">//下载到本地(可以使用xftp也可以下载)</font><br><font color=\"#c24f4a\">sz atlassian-extras-2.4.jar ( 该破解器只认识这个名称)</font><br><font size=\"4\">//下破解工具 链接: https://pan.baidu.com/s/1i3qJlCGpelNsx6KRIcUniA 提取码: kpax </font><br><font size=\"4\"><br><font color=\"#f9963b\">解压后运行confluence_keygen.jar点.path 选择atlassian-extras-2.4.jar 破解成功同目录显示atlassian-extras-2.4.jar.bak</font></font></p><p><font size=\"3\">① 打开下载的破解工具，运行confluence_keygen.jar<br>②将记录的server ID填入，Name随便填。<br>③点击gen, 生成key并记录。<br>④点击patch，选择刚下传到本地的atlassian-extras-2.4.jar文件进行破解.<br>OK，破解完成后，将破解后的文件传回服务器（不要关闭破解工具，过会需复制key里面的密钥）&nbsp;</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpDP_-XsyfDCEiuYItRYItTpOMJV\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><font size=\"4\">//把atlassian-extras-2.4.jar 文件上传到服务器//然后复制到容器中</font><br></p><pre type=\"Bash\"><code>sudo docker cp ./atlassian-extras-<span class=\"hljs-number\">2.4</span>.jar <span class=\"hljs-symbol\">d45ec455a4f7:</span>/opt/atlassian/confluence/confluence/WEB-INF/<span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/<span class=\"hljs-title\">atlassian</span>-<span class=\"hljs-title\">extras</span>-<span class=\"hljs-title\">decoder</span>-<span class=\"hljs-title\">v2</span>-3.4.1.<span class=\"hljs-title\">jar</span> //停止重启</span></code></pre><p><h2 id=\"2ooxs\">5. 重启confluence容器</h2></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">docker restart yourConfluenceContainer</span></code></pre><p><br></p><p><h2 id=\"exvlg\">6.继续访问ip:8090, 拷贝黏贴刚生成的key. 然后next,进入数据库选择。</h2><h2 id=\"7mpm2\">7. 准备创建一个空的数据库confluencedb, 连接mysql. 参考https://www.cnblogs.com/JeremyWYL/p/8302438.html</h2></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">DATABASE</span> &lt;<span class=\"hljs-keyword\">database</span>-<span class=\"hljs-keyword\">name</span>&gt; <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_bin;\n<span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> &lt;<span class=\"hljs-keyword\">database</span>-<span class=\"hljs-keyword\">name</span>&gt;.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">\'&lt;confluenceuser&gt;\'</span>@<span class=\"hljs-string\">\'localhost\'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">\'&lt;password&gt;\'</span>;\n<span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> &lt;<span class=\"hljs-keyword\">database</span>-<span class=\"hljs-keyword\">name</span>&gt;.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">\'&lt;confluenceuser&gt;\'</span>@<span class=\"hljs-string\">\'%\'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">\'&lt;password&gt;\'</span>;\n<span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</code></pre><p><br></p><p><h2 id=\"50bt8\">8. 数据库url：jdbcd:mysql://&lt;dbserver&gt;:3306/&lt;database-name&gt;?userUnicode=true&amp;characterEncoding=UTF-8</h2><h2 id=\"7yop2\">9. 测试成功后就可以了。</h2><font size=\"3\">mysql的配置文件中设置解决不正确的隔离级别的问题和其他问题。<br>Confluence设置MySQL数据库报错：必须使用\'READ-COMMITTED\'作为默认隔离级别。</font><br><font size=\"3\" color=\"#c24f4a\">解决方案：</font><br></p><pre type=\"Bash\"><code>mysql -u root -p123456\n<span class=\"hljs-builtin-name\">SET</span> GLOBAL <span class=\"hljs-attribute\">tx_isolation</span>=<span class=\"hljs-string\">\'READ-COMMITTED\'</span>;</code></pre>','1','8','1','1','1','2021-02-04 11:12:55','2021-02-04 11:12:55'),(45,'http://qiniu-picture.xiyanit.cn/FiposaGsQM0P2o9GXVBGhNcHjBq_','vue项目SEO优化','Vue,','vue2项目SEO优化',19,0,0,'1',1,'<h2 id=\"pytud\">前言</h2><font size=\"3\">单页应用（SPA）是最近流行的一种应用模式，它支持在同一页面下通过哈希（hash）或html5的history api实现不刷新式切换视图，既实现了动态路由的变化，也实现了历史记录的保持，然而，相比于静态页面和动态页面（ASP/PHP/JSP）而言，缺点也是显而易见的，那就是对SEO不友好。<br><br>不管是Vue、React还是angular等实现路由的框架，无一不是加载原始html代码，再通过JavaScript动态渲染页面，但对于爬虫而已，JavaScript代码是不会执行的，从而导致爬取不到合适的内容。</font><p>总结了一下Vue的SEO优化方向有如下几种：</p><p><font size=\"3\">（1）ssr,即单页面后台渲染 <br>（2）vue-meta-info 与prerender-spa-plugin 预渲染 <br>（3）nuxt <br>（4）phantomjs</font></p><p><font size=\"4\">目前的采用的是第二种vue-meta-info 与prerender-spa-plugin 预渲染</font></p><p>优化步骤：<br></p><h1 id=\"8rf3e\"><br>一、首先搜索引擎对于#后面的内容（锚）点一般是不收录的，所以需要先把hash模式改成history模式</h1><br><h2 id=\"94v5m\">1.router文件夹中index.js</h2><br><pre type=\"Bash\"><code>export <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Router({\n<span class=\"hljs-string\">mode:</span> <span class=\"hljs-string\">\'history\'</span>,\n<span class=\"hljs-comment\">base: __dirname,//如果项目直接放的跟目录, 那么是没有问题的,如果是子目录,那么就会一片空白了.这个vue官方有解释,需要加一个base</span>\n<span class=\"hljs-string\">routes:</span> []\n})</code></pre><h2 id=\"dmdgi\">2.安装prerender-spa-plugin</h2><br>// 安装<br><pre type=\"Bash\"><code>cnpm <span class=\"hljs-keyword\">install</span> prerender-spa-<span class=\"hljs-keyword\">plugin</span> <span class=\"hljs-comment\">--save</span></code></pre><p><br></p><h2 id=\"boexg\">3.在webpack.prod.conf.js头部引入prerender-spa-plugin：</h2><br>// 头部引入<br><pre type=\"Bash\"><code><span class=\"hljs-keyword\">const</span> PrerenderSPAPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'prerender-spa-plugin\'</span>)\n<span class=\"hljs-keyword\">const</span> Renderer = PrerenderSPAPlugin.PuppeteerRenderer</code></pre><p><br></p><h2 id=\"0c4oj\">4.在webpack.prod.conf.js的plugins里面添加：</h2><br><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">PrerenderSPAPlugin</span>({\n            <span class=\"hljs-comment\">// 生成文件的路径，也可以与webpakc打包的一致。</span>\n            <span class=\"hljs-comment\">// 下面这句话非常重要！！！</span>\n            <span class=\"hljs-comment\">// 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。</span>\n            <span class=\"hljs-attribute\">staticDir</span>: path.join(__dirname, <span class=\"hljs-string\">\'../dist\'</span>),\n\n            <span class=\"hljs-comment\">// 对应自己的路由文件，比如a有参数，就需要写成 /a/param1。</span>\n            <span class=\"hljs-attribute\">routes</span>: [<span class=\"hljs-string\">\'/\'</span>, <span class=\"hljs-string\">\'/login\'</span>, <span class=\"hljs-string\">\'/regist\'</span>, <span class=\"hljs-string\">\'/recover\'</span>, <span class=\"hljs-string\">\'/articleList\'</span>, <span class=\"hljs-string\">\'/article\'</span>, <span class=\"hljs-string\">\'/code\'</span>, <span class=\"hljs-string\">\'/postArticle\'</span>, <span class=\"hljs-string\">\'/postExchange\'</span>, <span class=\"hljs-string\">\'/publishProject\'</span>, <span class=\"hljs-string\">\'/articles/search\'</span>, <span class=\"hljs-string\">\'/codes\'</span>, <span class=\"hljs-string\">\'/talk\'</span>, <span class=\"hljs-string\">\'/tool\'</span>, <span class=\"hljs-string\">\'/recharge\'</span>, <span class=\"hljs-string\">\'/messageBoard\'</span>, <span class=\"hljs-string\">\'/leaderboard\'</span>, <span class=\"hljs-string\">\'/classroom\'</span>, <span class=\"hljs-string\">\'/tv\'</span>],\n\n            <span class=\"hljs-comment\">// 预渲染代理接口</span>\n            <span class=\"hljs-attribute\">server</span>: {\n                <span class=\"hljs-attribute\">proxy</span>: {\n                    <span class=\"hljs-string\">\'/api\'</span>: {\n                        <span class=\"hljs-attribute\">target</span>: <span class=\"hljs-string\">\'http://localhost:9018\'</span>,\n                        <span class=\"hljs-attribute\">secure</span>: false\n                    }\n                }\n            },\n\n            <span class=\"hljs-comment\">// 这个很重要，如果没有配置这段，也不会进行预编译</span>\n            <span class=\"hljs-attribute\">renderer</span>: new Renderer({\n                <span class=\"hljs-attribute\">inject</span>: {\n                    <span class=\"hljs-attribute\">foo</span>: <span class=\"hljs-string\">\'bar\'</span>\n                },\n                <span class=\"hljs-attribute\">headless</span>: false,\n                <span class=\"hljs-comment\">// 在 main.js 中 document.dispatchEvent(new Event(\'render-event\'))，两者的事件名称要对应上。</span>\n                <span class=\"hljs-attribute\">renderAfterDocumentEvent</span>: <span class=\"hljs-string\">\'render-event\'</span>\n            })\n        }),</code></pre><p><br></p><h2 id=\"93j1e\">5.在main.js里面修改：</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({\n    <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n    router,\n    store,\n    <span class=\"hljs-attribute\">template</span>: <span class=\"hljs-string\">\'&lt;App/&gt;\'</span>,\n    <span class=\"hljs-attribute\">components</span>: {\n        App\n    },\n    <span class=\"hljs-comment\">// 添加mounted，不然不会执行预编译</span>\n    <span class=\"hljs-selector-tag\">mounted</span>() {\n        <span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.dispatchEvent</span>(new Event(<span class=\"hljs-string\">\'render-event\'</span>))\n    }\n})</code></pre><p><br></p><p><br></p><h2 id=\"6yhmf\">6.安装 vue-meta-info 配置title和meta：</h2><br><pre type=\"Bash\"><code><span class=\"hljs-attribute\">cnpm</span> install vue-meta-<span class=\"hljs-literal\">info</span> --save</code></pre><p><br></p><h2 id=\"0qflg\">7.在main.js引入：</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">import</span> MetaInfo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-meta-info\'</span>\nVue.use(MetaInfo)</code></pre><p><br></p><h2 id=\"iw1m6\">8.在vue页面中配置：</h2><pre type=\"Bash\"><code> <span class=\"hljs-comment\">// 配置title和meta数据</span>\n  <span class=\"hljs-attribute\">metaInfo</span>: {\n    <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"夕颜源码 - 专注于技术|源码分享的IT技术平台\"</span>,\n    <span class=\"hljs-attribute\">meta</span>: [\n      {\n        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">\"keywords\"</span>,\n        <span class=\"hljs-attribute\">content</span>:\n          <span class=\"hljs-string\">\"夕颜博客,夕颜源码,夕颜社区,夕颜技术社区,,夕颜IT社区,IT社区,技术社区,Java技术分享,Spring教程,开发者社区,Java毕设,Java博客,Java项目,Java源码,Vue博客,代码,教程,web编程,前端开发,后端开发\"</span>,\n      },\n      {\n        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">\"description\"</span>,\n        <span class=\"hljs-attribute\">content</span>:\n          <span class=\"hljs-string\">\"一个专注于技术|源码分享的IT技术平台，大家以共同学习，乐于分享，拥抱开源的价值观进行学习交流\"</span>,\n      },\n    ],\n  },\n  <span class=\"hljs-selector-tag\">data</span>() {\n}</code></pre><p><br></p><h2 id=\"jiiho\">9.打包</h2><pre type=\"Bash\"><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Ftr9XYNiWI_r0A5r4jv054LPqfoQ\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">这样就成功了</font></p><p><font size=\"4\">踩坑在刷新路由的时候会多出一个/ 需要修改nginx配置</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fua_VSJnY-1_BY1nCQobp2ERi5u9\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><h2 id=\"ziz9q\">vue3请参考文档<a href=\"https://blog.csdn.net/qq_36595944/article/details/109021930\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">https://blog.csdn.net/qq_36595944/article/details/109021930</a></h2>','<h2 id=\"pytud\">前言</h2><font size=\"3\">单页应用（SPA）是最近流行的一种应用模式，它支持在同一页面下通过哈希（hash）或html5的history api实现不刷新式切换视图，既实现了动态路由的变化，也实现了历史记录的保持，然而，相比于静态页面和动态页面（ASP/PHP/JSP）而言，缺点也是显而易见的，那就是对SEO不友好。<br><br>不管是Vue、React还是angular等实现路由的框架，无一不是加载原始html代码，再通过JavaScript动态渲染页面，但对于爬虫而已，JavaScript代码是不会执行的，从而导致爬取不到合适的内容。</font><p>总结了一下Vue的SEO优化方向有如下几种：</p><p><font size=\"3\">（1）ssr,即单页面后台渲染 <br>（2）vue-meta-info 与prerender-spa-plugin 预渲染 <br>（3）nuxt <br>（4）phantomjs</font></p><p><font size=\"4\">目前的采用的是第二种vue-meta-info 与prerender-spa-plugin 预渲染</font></p><p>优化步骤：<br></p><h1 id=\"8rf3e\"><br>一、首先搜索引擎对于#后面的内容（锚）点一般是不收录的，所以需要先把hash模式改成history模式</h1><br><h2 id=\"94v5m\">1.router文件夹中index.js</h2><br><pre type=\"Bash\"><code>export <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Router({\n<span class=\"hljs-string\">mode:</span> <span class=\"hljs-string\">\'history\'</span>,\n<span class=\"hljs-comment\">base: __dirname,//如果项目直接放的跟目录, 那么是没有问题的,如果是子目录,那么就会一片空白了.这个vue官方有解释,需要加一个base</span>\n<span class=\"hljs-string\">routes:</span> []\n})</code></pre><h2 id=\"dmdgi\">2.安装prerender-spa-plugin</h2><br>// 安装<br><pre type=\"Bash\"><code>cnpm <span class=\"hljs-keyword\">install</span> prerender-spa-<span class=\"hljs-keyword\">plugin</span> <span class=\"hljs-comment\">--save</span></code></pre><p><br></p><h2 id=\"boexg\">3.在webpack.prod.conf.js头部引入prerender-spa-plugin：</h2><br>// 头部引入<br><pre type=\"Bash\"><code><span class=\"hljs-keyword\">const</span> PrerenderSPAPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'prerender-spa-plugin\'</span>)\n<span class=\"hljs-keyword\">const</span> Renderer = PrerenderSPAPlugin.PuppeteerRenderer</code></pre><p><br></p><h2 id=\"0c4oj\">4.在webpack.prod.conf.js的plugins里面添加：</h2><br><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">PrerenderSPAPlugin</span>({\n            <span class=\"hljs-comment\">// 生成文件的路径，也可以与webpakc打包的一致。</span>\n            <span class=\"hljs-comment\">// 下面这句话非常重要！！！</span>\n            <span class=\"hljs-comment\">// 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。</span>\n            <span class=\"hljs-attribute\">staticDir</span>: path.join(__dirname, <span class=\"hljs-string\">\'../dist\'</span>),\n\n            <span class=\"hljs-comment\">// 对应自己的路由文件，比如a有参数，就需要写成 /a/param1。</span>\n            <span class=\"hljs-attribute\">routes</span>: [<span class=\"hljs-string\">\'/\'</span>, <span class=\"hljs-string\">\'/login\'</span>, <span class=\"hljs-string\">\'/regist\'</span>, <span class=\"hljs-string\">\'/recover\'</span>, <span class=\"hljs-string\">\'/articleList\'</span>, <span class=\"hljs-string\">\'/article\'</span>, <span class=\"hljs-string\">\'/code\'</span>, <span class=\"hljs-string\">\'/postArticle\'</span>, <span class=\"hljs-string\">\'/postExchange\'</span>, <span class=\"hljs-string\">\'/publishProject\'</span>, <span class=\"hljs-string\">\'/articles/search\'</span>, <span class=\"hljs-string\">\'/codes\'</span>, <span class=\"hljs-string\">\'/talk\'</span>, <span class=\"hljs-string\">\'/tool\'</span>, <span class=\"hljs-string\">\'/recharge\'</span>, <span class=\"hljs-string\">\'/messageBoard\'</span>, <span class=\"hljs-string\">\'/leaderboard\'</span>, <span class=\"hljs-string\">\'/classroom\'</span>, <span class=\"hljs-string\">\'/tv\'</span>],\n\n            <span class=\"hljs-comment\">// 预渲染代理接口</span>\n            <span class=\"hljs-attribute\">server</span>: {\n                <span class=\"hljs-attribute\">proxy</span>: {\n                    <span class=\"hljs-string\">\'/api\'</span>: {\n                        <span class=\"hljs-attribute\">target</span>: <span class=\"hljs-string\">\'http://localhost:9018\'</span>,\n                        <span class=\"hljs-attribute\">secure</span>: false\n                    }\n                }\n            },\n\n            <span class=\"hljs-comment\">// 这个很重要，如果没有配置这段，也不会进行预编译</span>\n            <span class=\"hljs-attribute\">renderer</span>: new Renderer({\n                <span class=\"hljs-attribute\">inject</span>: {\n                    <span class=\"hljs-attribute\">foo</span>: <span class=\"hljs-string\">\'bar\'</span>\n                },\n                <span class=\"hljs-attribute\">headless</span>: false,\n                <span class=\"hljs-comment\">// 在 main.js 中 document.dispatchEvent(new Event(\'render-event\'))，两者的事件名称要对应上。</span>\n                <span class=\"hljs-attribute\">renderAfterDocumentEvent</span>: <span class=\"hljs-string\">\'render-event\'</span>\n            })\n        }),</code></pre><p><br></p><h2 id=\"93j1e\">5.在main.js里面修改：</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({\n    <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n    router,\n    store,\n    <span class=\"hljs-attribute\">template</span>: <span class=\"hljs-string\">\'&lt;App/&gt;\'</span>,\n    <span class=\"hljs-attribute\">components</span>: {\n        App\n    },\n    <span class=\"hljs-comment\">// 添加mounted，不然不会执行预编译</span>\n    <span class=\"hljs-selector-tag\">mounted</span>() {\n        <span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.dispatchEvent</span>(new Event(<span class=\"hljs-string\">\'render-event\'</span>))\n    }\n})</code></pre><p><br></p><p><br></p><h2 id=\"6yhmf\">6.安装 vue-meta-info 配置title和meta：</h2><br><pre type=\"Bash\"><code><span class=\"hljs-attribute\">cnpm</span> install vue-meta-<span class=\"hljs-literal\">info</span> --save</code></pre><p><br></p><h2 id=\"0qflg\">7.在main.js引入：</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">import</span> MetaInfo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue-meta-info\'</span>\nVue.use(MetaInfo)</code></pre><p><br></p><h2 id=\"iw1m6\">8.在vue页面中配置：</h2><pre type=\"Bash\"><code> <span class=\"hljs-comment\">// 配置title和meta数据</span>\n  <span class=\"hljs-attribute\">metaInfo</span>: {\n    <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"夕颜源码 - 专注于技术|源码分享的IT技术平台\"</span>,\n    <span class=\"hljs-attribute\">meta</span>: [\n      {\n        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">\"keywords\"</span>,\n        <span class=\"hljs-attribute\">content</span>:\n          <span class=\"hljs-string\">\"夕颜博客,夕颜源码,夕颜社区,夕颜技术社区,,夕颜IT社区,IT社区,技术社区,Java技术分享,Spring教程,开发者社区,Java毕设,Java博客,Java项目,Java源码,Vue博客,代码,教程,web编程,前端开发,后端开发\"</span>,\n      },\n      {\n        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">\"description\"</span>,\n        <span class=\"hljs-attribute\">content</span>:\n          <span class=\"hljs-string\">\"一个专注于技术|源码分享的IT技术平台，大家以共同学习，乐于分享，拥抱开源的价值观进行学习交流\"</span>,\n      },\n    ],\n  },\n  <span class=\"hljs-selector-tag\">data</span>() {\n}</code></pre><p><br></p><h2 id=\"jiiho\">9.打包</h2><pre type=\"Bash\"><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Ftr9XYNiWI_r0A5r4jv054LPqfoQ\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">这样就成功了</font></p><p><font size=\"4\">踩坑在刷新路由的时候会多出一个/ 需要修改nginx配置</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fua_VSJnY-1_BY1nCQobp2ERi5u9\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><h2 id=\"ziz9q\">vue3请参考文档<a href=\"https://blog.csdn.net/qq_36595944/article/details/109021930\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">https://blog.csdn.net/qq_36595944/article/details/109021930</a></h2>','1','4','1','1','1','2021-02-04 16:57:46','2021-02-05 18:42:29'),(46,'http://qiniu-picture.xiyanit.cn/FrBSLVYcCdTJ-QagfNOqy7FCPe-X','K8S集群 (kubeadm搭建方式)','Linux,','K8S集群 (kubeadm搭建方式)',129,2,1,'1',1,'<h1 id=\"yp2cp\">前言：</h1><p><font size=\"3\" color=\"#f9963b\">Kubernetes这个单词来自于希腊语，含义是 舵手 或 领航员；<br>Production-Grade Container Orchestration<br>Automated container deployment, scaling, and management<br>生产环境级别的容器编排<br>编排是什么意思？<br>1.&nbsp;按照一定的目的依次排列；<br>2.&nbsp;调配、安排；<br>Kubernetes，也称为K8S，其中8是代表中间“ubernete”的8个字符，是Google在2014年开源的一个容器编排引擎，用于自动化容器化应用程序的部署、规划、扩展和管理，它将组成应用程序的容器分组为逻辑单元，以便于管理和发现，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效，很多细节都不需要运维人员去进行复杂的手工配置和处理；<br>Kubernetes拥有Google在生产环境上15年运行的经验，并结合了社区中最佳实践；<br>K8S是&nbsp;CNCF&nbsp;毕业的项目，本来Kubernetes是Google的内部项目，后来开源出来，又后来为了其茁壮成长，捐给了CNCF；<br>CNCF全称Cloud Native Computing Foundation（云原生计算基金会）<br>官网：https://kubernetes.io/ <br>代码：https://github.com/kubernetes/kubernetes&nbsp;</font></p><h2><font size=\"3\" id=\"yfyjg\" color=\"#000000\">部署方式</font></h2><div><p><font size=\"3\">（1）minikube<br>minikube可以在本地运行Kubernetes的工具，minikube可以在个人计算机（包括Windows，macOS和Linux PC）上运行一个单节点Kubernetes集群，以便您可以试用Kubernetes或进行日常开发工作； <br>https://kubernetes.io/docs/tutorials/hello-minikube/ <br>（2）kind<br>Kind和minikube类似的工具，让你在本地计算机上运行Kubernetes，此工具需要安装并配置Docker；<br>https://kind.sigs.k8s.io/ <br>（3）kubeadm<br>Kubeadm是一个K8s部署工具，提供kubeadm init 和 kubeadm join两个操作命令，可以快速部署一个Kubernetes集群；<br>官方地址：<br>https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/ <br>https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ <br>（4）二进制包<br>从Github下载发行版的二进制包，手动部署安装每个组件，组成Kubernetes集群，步骤比较繁琐，但是能让你对各个组件有更清晰的认识；<br>（5）yum安装<br>通过yum安装Kubernetes的每个组件，组成Kubernetes集群，不过yum源里面的k8s版本已经比较老了，所以这种方式用得也比较少了；<br>（6）第三方工具<br>有一些大神封装了一些工具，利用这些工具进行k8s环境的安装；<br>（7）花钱购买<br>直接购买类似阿里云这样的公有云平台k8s，一键搞定；</font></p><h2><font size=\"2\" id=\"flkho\">架构图：</font></h2></div><div><img src=\"http://qiniu-picture.xiyanit.cn/FvB8CewMdbaaU7HGE9P5hXmgkcVW\" style=\"max-width:100%;\"><font size=\"2\"><br></font></div><h1 id=\"yp2cp\">一、K8S集群搭建（v1.20.1&nbsp; kubeadm部署方式）</h1><font size=\"3\">Kubernetes（简称K8S）是开源的容器集群管理系统，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。它既是一款容器编排工具，也是全新的基于容器技术的分布式架构领先方案。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等功能，提高了大规模容器集群管理的便捷性。</font><br><br><h2 id=\"gjqpj\">1.安装要求</h2><font color=\"#eeece0\" style=\"background-color: rgb(70, 172, 200);\">一台或多台机器，操作系统 CentOS7.x-86_x64<br>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多<br>集群中所有机器之间网络互通<br>可以访问外网，需要拉取镜像<br>禁止swap分区</font><div><font color=\"#eeece0\"><br></font></div><div><font color=\"#000000\">配置环境需要组件我整理了</font></div><div><p>链接：https://pan.baidu.com/s/124SrYHRqK6AevApON-OO4w <br>提取码：ivdl <br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><h2 id=\"z1c48\">2.环境</h2><pre type=\"Bash\"><code>k8s-master <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.128</span>\n\nk8s-node1 <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.129</span></code></pre><p><br></p><h2 id=\"ckboa\">3.修改主机名</h2><br><font size=\"4\">k8s-master:</font><br><br><pre type=\"Bash\"><code><span class=\"hljs-string\">hostnamectl </span><span class=\"hljs-built_in\">set-hostname</span> <span class=\"hljs-string\">k8s-master</span></code></pre><p><br></p><p><font size=\"4\">k8s-node1:</font><br><br></p><pre type=\"Bash\"><code><span class=\"hljs-string\">hostnamectl </span><span class=\"hljs-built_in\">set-hostname</span> <span class=\"hljs-string\">k8s-node1</span></code></pre><p><font size=\"4\">##重启后永久生效&nbsp;</font></p><p><font size=\"4\"><br></font></p><p><font size=\"4\" color=\"#c24f4a\"><b>以下都是二台服务器同时操作请按图片操作打开键盘模式</b></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fox1JcLu3VQBEG28wzVNlT-kvIDX\" style=\"max-width:100%;\"><font size=\"4\" color=\"#c24f4a\"><b><br></b></font></p><h2 id=\"zco7l\">4.防火墙关闭</h2><pre type=\"Bash\"><code>systemctl <span class=\"hljs-keyword\">stop</span> firewalld\nsystemctl <span class=\"hljs-keyword\">disable</span> firewalld</code></pre><p><br></p><h2 id=\"ri3zl\">5.关闭selinux</h2><pre type=\"Bash\"><code>setenforce 0 # 临时关闭\nsed -i <span class=\"hljs-string\">\'s/SELINUX=enforcing/SELINUX=disabled/g\'</span> /etc/selinux<span class=\"hljs-built_in\">/config </span># 永久关闭</code></pre><p><br></p><h2 id=\"1fomx\">6.关闭swap</h2><pre type=\"Bash\"><code>swapoff -a <span class=\"hljs-comment\"># 临时关闭；关闭swap主要是为了性能考虑</span>\nsed -ri <span class=\"hljs-string\">\'s/.*swap.*/#&amp;/\'</span> <span class=\"hljs-regexp\">/etc/</span>fstab</code></pre><p>free # 可以通过这个命令查看swap是否关闭了&nbsp;<br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpawE4ilhcLt6GRGek7-K9qab9sH\" style=\"max-width:100%;\"><br></p><h2 id=\"vwh2o\">7.添加主机名与IP对应的关系&nbsp;</h2><pre type=\"Bash\"><code>vim <span class=\"hljs-regexp\">/etc/</span>hosts</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-number\">192.168.181.128</span> k8s-master\n<span class=\"hljs-number\">192.168.181.129</span> k8s-node-<span class=\"hljs-number\">1</span></code></pre><p><br></p><p><font size=\"4\"><b>时间同步</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">install</span> <span class=\"hljs-selector-tag\">ntpdate</span> <span class=\"hljs-selector-tag\">-y</span></code><code>\n<span class=\"hljs-selector-tag\">ntpdate</span> <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.windows</span><span class=\"hljs-selector-class\">.com</span></code></pre><p><br></p><h2 id=\"s3t3y\">8.将桥接的IPv4流量传递到iptables的链</h2><pre type=\"Bash\"><code>cat &gt; /etc/sysctl.d/k8s<span class=\"hljs-selector-class\">.conf</span> &lt;&lt; EOF\nnet<span class=\"hljs-selector-class\">.bridge</span><span class=\"hljs-selector-class\">.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\nnet<span class=\"hljs-selector-class\">.bridge</span><span class=\"hljs-selector-class\">.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\nEOF</code></pre><p><br></p><pre type=\"Bash\"><code>sysctl <span class=\"hljs-comment\">--system</span></code></pre><h2 id=\"lqhpr\">9.安装Docker</h2>添加docker yum源<br><br><pre type=\"Bash\"><code>wget http<span class=\"hljs-variable\">s:</span>//mirrors.aliyun.<span class=\"hljs-keyword\">com</span>/docker-<span class=\"hljs-keyword\">ce</span>/linux/centos/docker-<span class=\"hljs-keyword\">ce</span>.repo -O/etc/yum.repos.d/docker-<span class=\"hljs-keyword\">ce</span>.repo</code></pre><p><br></p><p>安装<br><br></p><pre type=\"Bash\"><code> yum -y <span class=\"hljs-keyword\">install</span> docker-ce</code></pre><p><br></p><p>设置开机启动<br><br></p><pre type=\"Bash\"><code>systemctl <span class=\"hljs-builtin-name\">enable</span> docker</code></pre><p><br></p><p>启动docker<br><br></p><pre type=\"Bash\"><code>systemctl <span class=\"hljs-literal\">start</span> docker</code></pre><p><br></p><h2 id=\"b05o6\">10.添加阿里云YUM软件源&nbsp;</h2>由于国内网络限制比较多，所以需要把软件源设置为阿里云</div><pre type=\"Bash\"><code>cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"hljs-keyword\">EOF</span>\n{\n  \"registry-mirrors\": [\"https://goieqwi4.mirror.aliyuncs.com\"]\n}\n<span class=\"hljs-keyword\">EOF</span></code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-regexp\">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=<span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/repos</span><span class=\"hljs-regexp\">/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/yum-key.gpg https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/rpm-package-key.gpg\nEOF</span></code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#重启docker</span>\n<span class=\"hljs-attribute\">systemctl</span> restart docker</code><code><br></code></pre><div><blockquote><h2 id=\"nfgbd\">11.安装kubeadm，kubelet和kubectl</h2>kubelet # 运行在 Cluster 所有节点上，负责启动 Pod 和容器<br><br>kubeadm # 用于初始化 Cluster<br><br>kubectl # 是 Kubernetes 命令行工具。通过 kubectl 可以部署和管理应用，查看各种资源，创建、删除和更新各种组件</blockquote><pre type=\"Bash\"><code><span class=\"hljs-comment\"><br></span></code><code><span class=\"hljs-comment\"># 这里安装最新的v1.20.1</span>\n<span class=\"hljs-attr\">yum</span> <span class=\"hljs-string\">install kubelet kubeadm kubectl -y</span></code><code>\n<span class=\"hljs-comment\"># 此时，还不能启动kubelet，因为此时配置还不能，现在仅仅可以设置开机自启动</span>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kubelet</span>\n</code><code><span class=\"hljs-string\"><br></span></code></pre><h2>12.部署Kubernetes Master（<font color=\"#c24f4a\">只在master上操作</font>）</h2><b>初始化kubeadm<br>（只需要修改apiserver-advertise-address及kubernetes-version）</b><br><br><pre type=\"Bash\"><code>kubeadm init \\\n--apiserver-advertise-address=192.168.181.128 \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--kubernetes-version v1.20.1 \\\n--service-cidr=10.1.0.0/16 \\\n--pod-network-cidr=10.244.0.0/16<br></code></pre><blockquote><p>–image-repository string： 这个用于指定从什么位置来拉取镜像（1.13版本才有的），默认值是k8s.gcr.io，我们将其指定为国内镜像地址：registry.aliyuncs.com/google_containers<br><br>–kubernetes-version string： 指定kubenets版本号，默认值是stable-1，会导致从https://dl.k8s.io/release/stable-1.txt下载最新的版本号，我们可以将其指定为固定版本（v1.15.1）来跳过网络请求。<br><br>–apiserver-advertise-address 指明用 Master 的哪个 interface 与 Cluster 的其他节点通信。如果 Master 有多个 interface，建议明确指定，如果不指定，kubeadm 会自动选择有默认网关的 interface。<br><br>–pod-network-cidr 指定 Pod 网络的范围。Kubernetes支持多种网络方案，而且不同网络方案对 –pod-network-cidr有自己的要求，这里设置为10.244.0.0/16是因为我们将使用 flannel 网络方案，必须设置成这个 CIDR。</p></blockquote><p><font size=\"3\" style=\"background-color: rgb(238, 236, 224);\" color=\"#c24f4a\">等待初始化成功后会有提示信息，红色框内的命令是需要后续执行的（master执行第一个红框，node机器执行第二个红框，第13步操作）</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhJckGZ8UJtm-ERISgxed-aU8rZ4\" style=\"max-width:100%;\"><font size=\"3\" style=\"background-color: rgb(238, 236, 224);\" color=\"#c24f4a\"><br></font></p><pre type=\"Bash\"><code>mkdir -p <span class=\"hljs-variable\">$HOME</span>/.kube\nsudo cp -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube<span class=\"hljs-built_in\">/config\n</span>sudo chown $(id -u):$(id -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config</code></pre><h2 id=\"yrbyc\">13.安装Pod网络插件（CNI）（<font color=\"#c24f4a\">只在master上操作</font>）</h2><div><br></div><div><pre type=\"Bash\"><code><span class=\"hljs-comment\">#可以通过这种命令一键执行，如果远程不可以下载，可以用如下我已经下载好的配置文件</span>\nkubectl apply -f https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/coreos/</span>flannel<span class=\"hljs-regexp\">/master/</span>Documentation<span class=\"hljs-regexp\">/kube-flannel.yml</span></code></pre></div><div><br></div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f kube-flannel.yml</code></pre><p><br></p><p><font size=\"3\">这是我的配置文件，可以复制好上传到服务器直接执行上面语句</font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">policy/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">PodSecurityPolicy</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">psp.flannel.unprivileged</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class=\"hljs-string\">docker/default</span>\n    <span class=\"hljs-attr\">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class=\"hljs-string\">docker/default</span>\n    <span class=\"hljs-attr\">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class=\"hljs-string\">runtime/default</span>\n    <span class=\"hljs-attr\">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class=\"hljs-string\">runtime/default</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">configMap</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">secret</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">emptyDir</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hostPath</span>\n  <span class=\"hljs-attr\">allowedHostPaths:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathPrefix:</span> <span class=\"hljs-string\">\"/etc/cni/net.d\"</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathPrefix:</span> <span class=\"hljs-string\">\"/etc/kube-flannel\"</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathPrefix:</span> <span class=\"hljs-string\">\"/run/flannel\"</span>\n  <span class=\"hljs-attr\">readOnlyRootFilesystem:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-comment\"># Users and groups</span>\n  <span class=\"hljs-attr\">runAsUser:</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">RunAsAny</span>\n  <span class=\"hljs-attr\">supplementalGroups:</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">RunAsAny</span>\n  <span class=\"hljs-attr\">fsGroup:</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">RunAsAny</span>\n  <span class=\"hljs-comment\"># Privilege Escalation</span>\n  <span class=\"hljs-attr\">allowPrivilegeEscalation:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">defaultAllowPrivilegeEscalation:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-comment\"># Capabilities</span>\n  <span class=\"hljs-attr\">allowedCapabilities:</span> <span class=\"hljs-string\">[\'NET_ADMIN\']</span>\n  <span class=\"hljs-attr\">defaultAddCapabilities:</span> <span class=\"hljs-string\">[]</span>\n  <span class=\"hljs-attr\">requiredDropCapabilities:</span> <span class=\"hljs-string\">[]</span>\n  <span class=\"hljs-comment\"># Host namespaces</span>\n  <span class=\"hljs-attr\">hostPID:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">hostIPC:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">hostPorts:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">min:</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attr\">max:</span> <span class=\"hljs-number\">65535</span>\n  <span class=\"hljs-comment\"># SELinux</span>\n  <span class=\"hljs-attr\">seLinux:</span>\n    <span class=\"hljs-comment\"># SELinux is unused in CaaSP</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">\'RunAsAny\'</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> <span class=\"hljs-string\">[\'extensions\']</span>\n    <span class=\"hljs-attr\">resources:</span> <span class=\"hljs-string\">[\'podsecuritypolicies\']</span>\n    <span class=\"hljs-attr\">verbs:</span> <span class=\"hljs-string\">[\'use\']</span>\n    <span class=\"hljs-attr\">resourceNames:</span> <span class=\"hljs-string\">[\'psp.flannel.unprivileged\']</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">resources:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">pods</span>\n    <span class=\"hljs-attr\">verbs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">get</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">resources:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nodes</span>\n    <span class=\"hljs-attr\">verbs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">list</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">watch</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">resources:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nodes/status</span>\n    <span class=\"hljs-attr\">verbs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">patch</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ConfigMap</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">data:</span>\n  <span class=\"hljs-attr\">cni-conf.json:</span> <span class=\"hljs-string\">|\n    {\n      \"name\": \"cbr0\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"flannel\",\n          \"delegate\": {\n            \"hairpinMode\": true,\n            \"isDefaultGateway\": true\n          }\n        },\n        {\n          \"type\": \"portmap\",\n          \"capabilities\": {\n            \"portMappings\": true\n          }\n        }\n      ]\n    }\n</span>  <span class=\"hljs-attr\">net-conf.json:</span> <span class=\"hljs-string\">|\n    {\n      \"Network\": \"10.244.0.0/16\",\n      \"Backend\": {\n        \"Type\": \"vxlan\"\n      }\n    }\n</span><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-amd64</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">amd64</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-amd64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-amd64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n            <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-arm64</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">arm64</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-arm</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">arm</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-ppc64le</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ppc64le</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-ppc64le</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-ppc64le</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-s390x</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">s390x</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-s390x</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-s390x</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span></code></pre><h2 id=\"t8gs4\">14.Node节点加入集群（<font color=\"#c24f4a\">只在node上操作</font>）</h2><font size=\"3\">向集群添加新节点，执行在kubeadm init输出的kubeadm join命令</font><br><br><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubeadm</span> <span class=\"hljs-selector-tag\">join</span> 10<span class=\"hljs-selector-class\">.238</span><span class=\"hljs-selector-class\">.211</span><span class=\"hljs-selector-class\">.9</span><span class=\"hljs-selector-pseudo\">:6443</span> <span class=\"hljs-selector-tag\">--token</span> <span class=\"hljs-selector-tag\">iz96vy</span><span class=\"hljs-selector-class\">.f5ukew9geeome5is</span> \\\n<span class=\"hljs-selector-tag\">--discovery-token-ca-cert-hash</span> <span class=\"hljs-selector-tag\">sha256</span><span class=\"hljs-selector-pseudo\">:72b689426bfc34512294c29b39ea3b2af3a94e39f62c4434f3a49f16d51a1382</span> </code></pre><p><br></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">nodes</span><span class=\"hljs-title\"></span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Ft5jWzYoAVMykhCw498dhylhYKxs\" style=\"max-width:100%;\"><br></p><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> pods -n kube-<span class=\"hljs-keyword\">system</span>    <span class=\"hljs-comment\">#查看运行时容器pod （一个pod里面运行了多个docker容器）</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo--tBORlgjOWGRsIdqjY_9a7Poh\" style=\"max-width:100%;\"><br></p><p><br></p><h2>15.集群测试</h2><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> deployment nginx <span class=\"hljs-comment\">--image=nginx</span>\n\nkubectl expose deployment nginx <span class=\"hljs-comment\">--port=80 --type=NodePort</span>\n\nkubectl <span class=\"hljs-built_in\">get</span> pod,svc\n\n访问地址：<span class=\"hljs-keyword\">http</span>://NodeIP:Port </code></pre></div><div><br></div><h1 id=\"xm8xm\">二、DashBoard部署（v2.1.0）</h1><font size=\"3\">Dashboard 是基于网页的 Kubernetes 用户界面。您可以使用 Dashboard 将容器应用部署到 Kubernetes 集群中，也可以对容器应用排错，还能管理集群资源。您可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源（如 Deployment，Job，DaemonSet 等等）。例如，您可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。</font><br><br><h2 id=\"spvo2\">1.获取并修改Yaml文件</h2><font size=\"3\">项目地址 https://github.com/kubernetes/dashboard/releases<br><br>我下载的是最新的V2.1.0，之前使用网上大神说的V1.8.3出现各种神奇问题，还会报404，后来又看了一篇文章，发现是版本问题<br><br>下载dashboard-2.1.0.tar.gz<br>找到配置文件</font><br><pre type=\"Bash\"><code><font color=\"#c24f4a\">dashboard/v2<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-beta8/aio/deploy/recommended.yaml</font></code></pre><p><br><font size=\"3\">修改service通过NodePort方式访问K8S Dashboard</font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span> <span class=\"hljs-comment\">#新加此行</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">443</span>\n      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8443</span>\n      <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31080</span> <span class=\"hljs-comment\">#新加此行</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n\n<span class=\"hljs-meta\">---</span></code></pre><h2 id=\"okb9b\">2.应用配置文件 (耐心等待一会)</h2><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f recommended.yaml</code></pre><h2 id=\"4z8td\"><br></h2><div><p><font size=\"4\">查看一下pod是否成功，注意命名空间是在kubernetes-dashboard下面；</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pod -n kubernetes-dashboard</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fkyoex4GGGwmjtCatDrKu0r2AhYc\" style=\"max-width:100%;\"><br></p></div><h2 id=\"4z8td\">3.访问 https:ip:31080</h2><p><font color=\"#c24f4a\">注：通过http是不行的需要https</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhbvD_ymZLIo3-u5V7aMGr-jRs1O\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><font size=\"3\">创建service account并绑定默认cluster-admin管理员集群角色：【依次执行】</font><br><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-keyword\">create</span> serviceaccount dashboard-<span class=\"hljs-keyword\">admin</span> -n kube-<span class=\"hljs-keyword\">system</span>\nkubectl <span class=\"hljs-keyword\">create</span> clusterrolebinding dashboard-<span class=\"hljs-keyword\">admin</span> <span class=\"hljs-comment\">--clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></code></pre><p><br></p><p>获取Token<br><br></p><pre type=\"Bash\"><code>kubectl describe secrets -n kube-system $(kubectl -n kube-system <span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> secret </span>| awk <span class=\"hljs-string\">\'/dashboard-admin/{print $1}\'</span>)</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvpIdr-FaklKVGoujBMn4_owEsi3\" style=\"max-width:100%;\"><br></p><h2 id=\"ztqfr\">4.登录dashboard</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FnXwu6fSeS_GWKoBBtE-n9q_uhTj\" style=\"max-width:100%;\"><br></p><h2 id=\"4hpkk\">三、 部署Metrics-Server服务</h2><font size=\"4\">在新版的K8S中，系统资源的采集均使用Metrics-Server服务，可以通过Metrics-Server服务采集节点和Pod的内存、磁盘、CPU和网络的使用率等信息。</font><br><br><h2 id=\"rp96p\">1.下载并解压Metrics-Server</h2><pre type=\"Bash\"><code>https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/kubernetes-sigs/m</span>etrics-server<span class=\"hljs-regexp\">/archive/</span>v0.<span class=\"hljs-number\">3.6</span>.tar.gz</code></pre><p><br></p><p><br></p><h2 id=\"iie5m\">2.修改Metrics-Server配置文件</h2><pre type=\"Bash\"><code>vim metrics-server<span class=\"hljs-number\">-0.3</span><span class=\"hljs-number\">.6</span>/deploy/<span class=\"hljs-number\">1.8</span>+/metrics-server-deployment.yaml</code></pre><p><br></p><p><font size=\"4\">这是我的配置文件</font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">metrics-server</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">metrics-server</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">metrics-server</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">metrics-server</span>\n      <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-comment\"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tmp-dir</span>\n        <span class=\"hljs-attr\">emptyDir:</span> <span class=\"hljs-string\">{}</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n        <span class=\"hljs-comment\"># 修改image 和 imagePullPolicy</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6</span>\n        <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span>\n        <span class=\"hljs-comment\"># 新增command配置</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/metrics-server</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kubelet-insecure-tls</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tmp-dir</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/tmp</span>\n        <span class=\"hljs-comment\"># 新增resources配置</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">300m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">200Mi</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">200m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">100Mi</span></code></pre><h2 id=\"1vxus\">2.应用配置文件</h2><pre type=\"Bash\"><code>cd metrics-server<span class=\"hljs-number\">-0.3</span><span class=\"hljs-number\">.6</span>/deploy/<span class=\"hljs-number\">1.8</span>+\nkubectl apply -f .</code></pre><p><br></p><h2 id=\"9b30p\">3.安装完Metrics-Server之后，查看node信息</h2><pre type=\"Bash\"><code>kubectl top <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FlgWj_5lZnoHrtwgBVuAPxNf3-jx\" style=\"max-width:100%;\"><br></p><h2 id=\"pnjzj\">4.再次登录DashBoard</h2><font size=\"3\">各种炫酷图表就可以显示啦~大功告成</font><h2><img src=\"https://img-blog.csdnimg.cn/2021011515185798.png?x-oss-process&amp;#61;image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1J5YW5fTGVv,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><span style=\"font-size: 1em;\" id=\"43l0h\">四、K8S命令自动补全</span></h2><h2 id=\"u9h9l\">1.安装bash-completion</h2><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">install </span><span class=\"hljs-keyword\">bash-completion </span>-y</code></pre><p><br></p><h2 id=\"iar3u\">2.执行bash_completion</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">source</span> <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/bash-completion/</span>bash_completion</code></pre><p><br></p><h2 id=\"q3olh\">3.重新加载kubectl completion</h2><pre type=\"Bash\"><code>source &lt;(<span class=\"hljs-name\">kubectl</span> completion bash)</code></pre><p><br></p><h2 id=\"70hat\">4.就能用tab补全命令了</h2>试一下</div><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl create clusterrolebinding</span></code></pre><h2 id=\"7iyjc\">五<span style=\"font-size: 1.5em;\">、推荐二个自动生成YML文件的地址</span></h2><div><font size=\"4\"><a href=\"https://k8syaml.com/\" target=\"_blank\">https://k8syaml.com/</a><br></font></div><p><font size=\"4\"><a href=\"https://www.kubebiz.com/\" target=\"_blank\">https://www.kubebiz.com/</a>&nbsp;（推荐安装什么都有）</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi0X9FlK5dLbEeGirYOefEs60CVH\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fohc-4UR6fY2x4DOgY-_LybDTIsp\" style=\"max-width:100%;\"><br></p>','<h1 id=\"yp2cp\">前言：</h1><p><font size=\"3\" color=\"#f9963b\">Kubernetes这个单词来自于希腊语，含义是 舵手 或 领航员；<br>Production-Grade Container Orchestration<br>Automated container deployment, scaling, and management<br>生产环境级别的容器编排<br>编排是什么意思？<br>1.&nbsp;按照一定的目的依次排列；<br>2.&nbsp;调配、安排；<br>Kubernetes，也称为K8S，其中8是代表中间“ubernete”的8个字符，是Google在2014年开源的一个容器编排引擎，用于自动化容器化应用程序的部署、规划、扩展和管理，它将组成应用程序的容器分组为逻辑单元，以便于管理和发现，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效，很多细节都不需要运维人员去进行复杂的手工配置和处理；<br>Kubernetes拥有Google在生产环境上15年运行的经验，并结合了社区中最佳实践；<br>K8S是&nbsp;CNCF&nbsp;毕业的项目，本来Kubernetes是Google的内部项目，后来开源出来，又后来为了其茁壮成长，捐给了CNCF；<br>CNCF全称Cloud Native Computing Foundation（云原生计算基金会）<br>官网：https://kubernetes.io/ <br>代码：https://github.com/kubernetes/kubernetes&nbsp;</font></p><h2><font size=\"3\" id=\"yfyjg\" color=\"#000000\">部署方式</font></h2><div><p><font size=\"3\">（1）minikube<br>minikube可以在本地运行Kubernetes的工具，minikube可以在个人计算机（包括Windows，macOS和Linux PC）上运行一个单节点Kubernetes集群，以便您可以试用Kubernetes或进行日常开发工作； <br>https://kubernetes.io/docs/tutorials/hello-minikube/ <br>（2）kind<br>Kind和minikube类似的工具，让你在本地计算机上运行Kubernetes，此工具需要安装并配置Docker；<br>https://kind.sigs.k8s.io/ <br>（3）kubeadm<br>Kubeadm是一个K8s部署工具，提供kubeadm init 和 kubeadm join两个操作命令，可以快速部署一个Kubernetes集群；<br>官方地址：<br>https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/ <br>https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ <br>（4）二进制包<br>从Github下载发行版的二进制包，手动部署安装每个组件，组成Kubernetes集群，步骤比较繁琐，但是能让你对各个组件有更清晰的认识；<br>（5）yum安装<br>通过yum安装Kubernetes的每个组件，组成Kubernetes集群，不过yum源里面的k8s版本已经比较老了，所以这种方式用得也比较少了；<br>（6）第三方工具<br>有一些大神封装了一些工具，利用这些工具进行k8s环境的安装；<br>（7）花钱购买<br>直接购买类似阿里云这样的公有云平台k8s，一键搞定；</font></p><h2><font size=\"2\" id=\"flkho\">架构图：</font></h2></div><div><img src=\"http://qiniu-picture.xiyanit.cn/FvB8CewMdbaaU7HGE9P5hXmgkcVW\" style=\"max-width:100%;\"><font size=\"2\"><br></font></div><h1 id=\"yp2cp\">一、K8S集群搭建（v1.20.1&nbsp; kubeadm部署方式）</h1><font size=\"3\">Kubernetes（简称K8S）是开源的容器集群管理系统，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。它既是一款容器编排工具，也是全新的基于容器技术的分布式架构领先方案。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等功能，提高了大规模容器集群管理的便捷性。</font><br><br><h2 id=\"gjqpj\">1.安装要求</h2><font color=\"#eeece0\" style=\"background-color: rgb(70, 172, 200);\">一台或多台机器，操作系统 CentOS7.x-86_x64<br>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多<br>集群中所有机器之间网络互通<br>可以访问外网，需要拉取镜像<br>禁止swap分区</font><div><font color=\"#eeece0\"><br></font></div><div><font color=\"#000000\">配置环境需要组件我整理了</font></div><div><p>链接：https://pan.baidu.com/s/124SrYHRqK6AevApON-OO4w <br>提取码：ivdl <br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><h2 id=\"z1c48\">2.环境</h2><pre type=\"Bash\"><code>k8s-master <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.128</span>\n\nk8s-node1 <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.129</span></code></pre><p><br></p><h2 id=\"ckboa\">3.修改主机名</h2><br><font size=\"4\">k8s-master:</font><br><br><pre type=\"Bash\"><code><span class=\"hljs-string\">hostnamectl </span><span class=\"hljs-built_in\">set-hostname</span> <span class=\"hljs-string\">k8s-master</span></code></pre><p><br></p><p><font size=\"4\">k8s-node1:</font><br><br></p><pre type=\"Bash\"><code><span class=\"hljs-string\">hostnamectl </span><span class=\"hljs-built_in\">set-hostname</span> <span class=\"hljs-string\">k8s-node1</span></code></pre><p><font size=\"4\">##重启后永久生效&nbsp;</font></p><p><font size=\"4\"><br></font></p><p><font size=\"4\" color=\"#c24f4a\"><b>以下都是二台服务器同时操作请按图片操作打开键盘模式</b></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fox1JcLu3VQBEG28wzVNlT-kvIDX\" style=\"max-width:100%;\"><font size=\"4\" color=\"#c24f4a\"><b><br></b></font></p><h2 id=\"zco7l\">4.防火墙关闭</h2><pre type=\"Bash\"><code>systemctl <span class=\"hljs-keyword\">stop</span> firewalld\nsystemctl <span class=\"hljs-keyword\">disable</span> firewalld</code></pre><p><br></p><h2 id=\"ri3zl\">5.关闭selinux</h2><pre type=\"Bash\"><code>setenforce 0 # 临时关闭\nsed -i <span class=\"hljs-string\">\'s/SELINUX=enforcing/SELINUX=disabled/g\'</span> /etc/selinux<span class=\"hljs-built_in\">/config </span># 永久关闭</code></pre><p><br></p><h2 id=\"1fomx\">6.关闭swap</h2><pre type=\"Bash\"><code>swapoff -a <span class=\"hljs-comment\"># 临时关闭；关闭swap主要是为了性能考虑</span>\nsed -ri <span class=\"hljs-string\">\'s/.*swap.*/#&amp;/\'</span> <span class=\"hljs-regexp\">/etc/</span>fstab</code></pre><p>free # 可以通过这个命令查看swap是否关闭了&nbsp;<br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpawE4ilhcLt6GRGek7-K9qab9sH\" style=\"max-width:100%;\"><br></p><h2 id=\"vwh2o\">7.添加主机名与IP对应的关系&nbsp;</h2><pre type=\"Bash\"><code>vim <span class=\"hljs-regexp\">/etc/</span>hosts</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-number\">192.168.181.128</span> k8s-master\n<span class=\"hljs-number\">192.168.181.129</span> k8s-node-<span class=\"hljs-number\">1</span></code></pre><p><br></p><p><font size=\"4\"><b>时间同步</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">install</span> <span class=\"hljs-selector-tag\">ntpdate</span> <span class=\"hljs-selector-tag\">-y</span></code><code>\n<span class=\"hljs-selector-tag\">ntpdate</span> <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.windows</span><span class=\"hljs-selector-class\">.com</span></code></pre><p><br></p><h2 id=\"s3t3y\">8.将桥接的IPv4流量传递到iptables的链</h2><pre type=\"Bash\"><code>cat &gt; /etc/sysctl.d/k8s<span class=\"hljs-selector-class\">.conf</span> &lt;&lt; EOF\nnet<span class=\"hljs-selector-class\">.bridge</span><span class=\"hljs-selector-class\">.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\nnet<span class=\"hljs-selector-class\">.bridge</span><span class=\"hljs-selector-class\">.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\nEOF</code></pre><p><br></p><pre type=\"Bash\"><code>sysctl <span class=\"hljs-comment\">--system</span></code></pre><h2 id=\"lqhpr\">9.安装Docker</h2>添加docker yum源<br><br><pre type=\"Bash\"><code>wget http<span class=\"hljs-variable\">s:</span>//mirrors.aliyun.<span class=\"hljs-keyword\">com</span>/docker-<span class=\"hljs-keyword\">ce</span>/linux/centos/docker-<span class=\"hljs-keyword\">ce</span>.repo -O/etc/yum.repos.d/docker-<span class=\"hljs-keyword\">ce</span>.repo</code></pre><p><br></p><p>安装<br><br></p><pre type=\"Bash\"><code> yum -y <span class=\"hljs-keyword\">install</span> docker-ce</code></pre><p><br></p><p>设置开机启动<br><br></p><pre type=\"Bash\"><code>systemctl <span class=\"hljs-builtin-name\">enable</span> docker</code></pre><p><br></p><p>启动docker<br><br></p><pre type=\"Bash\"><code>systemctl <span class=\"hljs-literal\">start</span> docker</code></pre><p><br></p><h2 id=\"b05o6\">10.添加阿里云YUM软件源&nbsp;</h2>由于国内网络限制比较多，所以需要把软件源设置为阿里云</div><pre type=\"Bash\"><code>cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"hljs-keyword\">EOF</span>\n{\n  \"registry-mirrors\": [\"https://goieqwi4.mirror.aliyuncs.com\"]\n}\n<span class=\"hljs-keyword\">EOF</span></code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-regexp\">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=<span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/repos</span><span class=\"hljs-regexp\">/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/yum-key.gpg https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/rpm-package-key.gpg\nEOF</span></code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#重启docker</span>\n<span class=\"hljs-attribute\">systemctl</span> restart docker</code><code><br></code></pre><div><blockquote><h2 id=\"nfgbd\">11.安装kubeadm，kubelet和kubectl</h2>kubelet # 运行在 Cluster 所有节点上，负责启动 Pod 和容器<br><br>kubeadm # 用于初始化 Cluster<br><br>kubectl # 是 Kubernetes 命令行工具。通过 kubectl 可以部署和管理应用，查看各种资源，创建、删除和更新各种组件</blockquote><pre type=\"Bash\"><code><span class=\"hljs-comment\"><br></span></code><code><span class=\"hljs-comment\"># 这里安装最新的v1.20.1</span>\n<span class=\"hljs-attr\">yum</span> <span class=\"hljs-string\">install kubelet kubeadm kubectl -y</span></code><code>\n<span class=\"hljs-comment\"># 此时，还不能启动kubelet，因为此时配置还不能，现在仅仅可以设置开机自启动</span>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kubelet</span>\n</code><code><span class=\"hljs-string\"><br></span></code></pre><h2>12.部署Kubernetes Master（<font color=\"#c24f4a\">只在master上操作</font>）</h2><b>初始化kubeadm<br>（只需要修改apiserver-advertise-address及kubernetes-version）</b><br><br><pre type=\"Bash\"><code>kubeadm init \\\n--apiserver-advertise-address=192.168.181.128 \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--kubernetes-version v1.20.1 \\\n--service-cidr=10.1.0.0/16 \\\n--pod-network-cidr=10.244.0.0/16<br></code></pre><blockquote><p>–image-repository string： 这个用于指定从什么位置来拉取镜像（1.13版本才有的），默认值是k8s.gcr.io，我们将其指定为国内镜像地址：registry.aliyuncs.com/google_containers<br><br>–kubernetes-version string： 指定kubenets版本号，默认值是stable-1，会导致从https://dl.k8s.io/release/stable-1.txt下载最新的版本号，我们可以将其指定为固定版本（v1.15.1）来跳过网络请求。<br><br>–apiserver-advertise-address 指明用 Master 的哪个 interface 与 Cluster 的其他节点通信。如果 Master 有多个 interface，建议明确指定，如果不指定，kubeadm 会自动选择有默认网关的 interface。<br><br>–pod-network-cidr 指定 Pod 网络的范围。Kubernetes支持多种网络方案，而且不同网络方案对 –pod-network-cidr有自己的要求，这里设置为10.244.0.0/16是因为我们将使用 flannel 网络方案，必须设置成这个 CIDR。</p></blockquote><p><font size=\"3\" style=\"background-color: rgb(238, 236, 224);\" color=\"#c24f4a\">等待初始化成功后会有提示信息，红色框内的命令是需要后续执行的（master执行第一个红框，node机器执行第二个红框，第13步操作）</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhJckGZ8UJtm-ERISgxed-aU8rZ4\" style=\"max-width:100%;\"><font size=\"3\" style=\"background-color: rgb(238, 236, 224);\" color=\"#c24f4a\"><br></font></p><pre type=\"Bash\"><code>mkdir -p <span class=\"hljs-variable\">$HOME</span>/.kube\nsudo cp -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube<span class=\"hljs-built_in\">/config\n</span>sudo chown $(id -u):$(id -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config</code></pre><h2 id=\"yrbyc\">13.安装Pod网络插件（CNI）（<font color=\"#c24f4a\">只在master上操作</font>）</h2><div><br></div><div><pre type=\"Bash\"><code><span class=\"hljs-comment\">#可以通过这种命令一键执行，如果远程不可以下载，可以用如下我已经下载好的配置文件</span>\nkubectl apply -f https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/coreos/</span>flannel<span class=\"hljs-regexp\">/master/</span>Documentation<span class=\"hljs-regexp\">/kube-flannel.yml</span></code></pre></div><div><br></div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f kube-flannel.yml</code></pre><p><br></p><p><font size=\"3\">这是我的配置文件，可以复制好上传到服务器直接执行上面语句</font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">policy/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">PodSecurityPolicy</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">psp.flannel.unprivileged</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class=\"hljs-string\">docker/default</span>\n    <span class=\"hljs-attr\">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class=\"hljs-string\">docker/default</span>\n    <span class=\"hljs-attr\">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class=\"hljs-string\">runtime/default</span>\n    <span class=\"hljs-attr\">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class=\"hljs-string\">runtime/default</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">configMap</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">secret</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">emptyDir</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hostPath</span>\n  <span class=\"hljs-attr\">allowedHostPaths:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathPrefix:</span> <span class=\"hljs-string\">\"/etc/cni/net.d\"</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathPrefix:</span> <span class=\"hljs-string\">\"/etc/kube-flannel\"</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathPrefix:</span> <span class=\"hljs-string\">\"/run/flannel\"</span>\n  <span class=\"hljs-attr\">readOnlyRootFilesystem:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-comment\"># Users and groups</span>\n  <span class=\"hljs-attr\">runAsUser:</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">RunAsAny</span>\n  <span class=\"hljs-attr\">supplementalGroups:</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">RunAsAny</span>\n  <span class=\"hljs-attr\">fsGroup:</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">RunAsAny</span>\n  <span class=\"hljs-comment\"># Privilege Escalation</span>\n  <span class=\"hljs-attr\">allowPrivilegeEscalation:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">defaultAllowPrivilegeEscalation:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-comment\"># Capabilities</span>\n  <span class=\"hljs-attr\">allowedCapabilities:</span> <span class=\"hljs-string\">[\'NET_ADMIN\']</span>\n  <span class=\"hljs-attr\">defaultAddCapabilities:</span> <span class=\"hljs-string\">[]</span>\n  <span class=\"hljs-attr\">requiredDropCapabilities:</span> <span class=\"hljs-string\">[]</span>\n  <span class=\"hljs-comment\"># Host namespaces</span>\n  <span class=\"hljs-attr\">hostPID:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">hostIPC:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">hostPorts:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">min:</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attr\">max:</span> <span class=\"hljs-number\">65535</span>\n  <span class=\"hljs-comment\"># SELinux</span>\n  <span class=\"hljs-attr\">seLinux:</span>\n    <span class=\"hljs-comment\"># SELinux is unused in CaaSP</span>\n    <span class=\"hljs-attr\">rule:</span> <span class=\"hljs-string\">\'RunAsAny\'</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> <span class=\"hljs-string\">[\'extensions\']</span>\n    <span class=\"hljs-attr\">resources:</span> <span class=\"hljs-string\">[\'podsecuritypolicies\']</span>\n    <span class=\"hljs-attr\">verbs:</span> <span class=\"hljs-string\">[\'use\']</span>\n    <span class=\"hljs-attr\">resourceNames:</span> <span class=\"hljs-string\">[\'psp.flannel.unprivileged\']</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">resources:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">pods</span>\n    <span class=\"hljs-attr\">verbs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">get</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">resources:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nodes</span>\n    <span class=\"hljs-attr\">verbs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">list</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">watch</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">resources:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nodes/status</span>\n    <span class=\"hljs-attr\">verbs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">patch</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ConfigMap</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">data:</span>\n  <span class=\"hljs-attr\">cni-conf.json:</span> <span class=\"hljs-string\">|\n    {\n      \"name\": \"cbr0\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"flannel\",\n          \"delegate\": {\n            \"hairpinMode\": true,\n            \"isDefaultGateway\": true\n          }\n        },\n        {\n          \"type\": \"portmap\",\n          \"capabilities\": {\n            \"portMappings\": true\n          }\n        }\n      ]\n    }\n</span>  <span class=\"hljs-attr\">net-conf.json:</span> <span class=\"hljs-string\">|\n    {\n      \"Network\": \"10.244.0.0/16\",\n      \"Backend\": {\n        \"Type\": \"vxlan\"\n      }\n    }\n</span><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-amd64</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">amd64</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-amd64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-amd64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n            <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-arm64</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">arm64</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm64</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-arm</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">arm</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-arm</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-ppc64le</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ppc64le</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-ppc64le</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-ppc64le</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-ds-s390x</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">tier:</span> <span class=\"hljs-string\">node</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">flannel</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">affinity:</span>\n        <span class=\"hljs-attr\">nodeAffinity:</span>\n          <span class=\"hljs-attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>\n            <span class=\"hljs-attr\">nodeSelectorTerms:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">matchExpressions:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/os</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">linux</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">beta.kubernetes.io/arch</span>\n                    <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n                    <span class=\"hljs-attr\">values:</span>\n                      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">s390x</span>\n      <span class=\"hljs-attr\">hostNetwork:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">tolerations:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">Exists</span>\n        <span class=\"hljs-attr\">effect:</span> <span class=\"hljs-string\">NoSchedule</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">flannel</span>\n      <span class=\"hljs-attr\">initContainers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">install-cni</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-s390x</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cp</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-f</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/kube-flannel/cni-conf.json</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/cni/net.d/10-flannel.conflist</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/coreos/flannel:v0.11.0-s390x</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/opt/bin/flanneld</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--ip-masq</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kube-subnet-mgr</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">\"100m\"</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">\"50Mi\"</span>\n        <span class=\"hljs-attr\">securityContext:</span>\n          <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">capabilities:</span>\n             <span class=\"hljs-attr\">add:</span> <span class=\"hljs-string\">[\"NET_ADMIN\"]</span>\n        <span class=\"hljs-attr\">env:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAME</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_NAMESPACE</span>\n          <span class=\"hljs-attr\">valueFrom:</span>\n            <span class=\"hljs-attr\">fieldRef:</span>\n              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/etc/kube-flannel/</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">run</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/run/flannel</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cni</span>\n          <span class=\"hljs-attr\">hostPath:</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/etc/cni/net.d</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">flannel-cfg</span>\n          <span class=\"hljs-attr\">configMap:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-flannel-cfg</span></code></pre><h2 id=\"t8gs4\">14.Node节点加入集群（<font color=\"#c24f4a\">只在node上操作</font>）</h2><font size=\"3\">向集群添加新节点，执行在kubeadm init输出的kubeadm join命令</font><br><br><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubeadm</span> <span class=\"hljs-selector-tag\">join</span> 10<span class=\"hljs-selector-class\">.238</span><span class=\"hljs-selector-class\">.211</span><span class=\"hljs-selector-class\">.9</span><span class=\"hljs-selector-pseudo\">:6443</span> <span class=\"hljs-selector-tag\">--token</span> <span class=\"hljs-selector-tag\">iz96vy</span><span class=\"hljs-selector-class\">.f5ukew9geeome5is</span> \\\n<span class=\"hljs-selector-tag\">--discovery-token-ca-cert-hash</span> <span class=\"hljs-selector-tag\">sha256</span><span class=\"hljs-selector-pseudo\">:72b689426bfc34512294c29b39ea3b2af3a94e39f62c4434f3a49f16d51a1382</span> </code></pre><p><br></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">nodes</span><span class=\"hljs-title\"></span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Ft5jWzYoAVMykhCw498dhylhYKxs\" style=\"max-width:100%;\"><br></p><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> pods -n kube-<span class=\"hljs-keyword\">system</span>    <span class=\"hljs-comment\">#查看运行时容器pod （一个pod里面运行了多个docker容器）</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo--tBORlgjOWGRsIdqjY_9a7Poh\" style=\"max-width:100%;\"><br></p><p><br></p><h2>15.集群测试</h2><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> deployment nginx <span class=\"hljs-comment\">--image=nginx</span>\n\nkubectl expose deployment nginx <span class=\"hljs-comment\">--port=80 --type=NodePort</span>\n\nkubectl <span class=\"hljs-built_in\">get</span> pod,svc\n\n访问地址：<span class=\"hljs-keyword\">http</span>://NodeIP:Port </code></pre></div><div><br></div><h1 id=\"xm8xm\">二、DashBoard部署（v2.1.0）</h1><font size=\"3\">Dashboard 是基于网页的 Kubernetes 用户界面。您可以使用 Dashboard 将容器应用部署到 Kubernetes 集群中，也可以对容器应用排错，还能管理集群资源。您可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源（如 Deployment，Job，DaemonSet 等等）。例如，您可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。</font><br><br><h2 id=\"spvo2\">1.获取并修改Yaml文件</h2><font size=\"3\">项目地址 https://github.com/kubernetes/dashboard/releases<br><br>我下载的是最新的V2.1.0，之前使用网上大神说的V1.8.3出现各种神奇问题，还会报404，后来又看了一篇文章，发现是版本问题<br><br>下载dashboard-2.1.0.tar.gz<br>找到配置文件</font><br><pre type=\"Bash\"><code><font color=\"#c24f4a\">dashboard/v2<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-beta8/aio/deploy/recommended.yaml</font></code></pre><p><br><font size=\"3\">修改service通过NodePort方式访问K8S Dashboard</font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span> <span class=\"hljs-comment\">#新加此行</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">443</span>\n      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8443</span>\n      <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31080</span> <span class=\"hljs-comment\">#新加此行</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">kubernetes-dashboard</span>\n\n<span class=\"hljs-meta\">---</span></code></pre><h2 id=\"okb9b\">2.应用配置文件 (耐心等待一会)</h2><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f recommended.yaml</code></pre><h2 id=\"4z8td\"><br></h2><div><p><font size=\"4\">查看一下pod是否成功，注意命名空间是在kubernetes-dashboard下面；</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pod -n kubernetes-dashboard</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fkyoex4GGGwmjtCatDrKu0r2AhYc\" style=\"max-width:100%;\"><br></p></div><h2 id=\"4z8td\">3.访问 https:ip:31080</h2><p><font color=\"#c24f4a\">注：通过http是不行的需要https</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhbvD_ymZLIo3-u5V7aMGr-jRs1O\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><font size=\"3\">创建service account并绑定默认cluster-admin管理员集群角色：【依次执行】</font><br><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-keyword\">create</span> serviceaccount dashboard-<span class=\"hljs-keyword\">admin</span> -n kube-<span class=\"hljs-keyword\">system</span>\nkubectl <span class=\"hljs-keyword\">create</span> clusterrolebinding dashboard-<span class=\"hljs-keyword\">admin</span> <span class=\"hljs-comment\">--clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></code></pre><p><br></p><p>获取Token<br><br></p><pre type=\"Bash\"><code>kubectl describe secrets -n kube-system $(kubectl -n kube-system <span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> secret </span>| awk <span class=\"hljs-string\">\'/dashboard-admin/{print $1}\'</span>)</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvpIdr-FaklKVGoujBMn4_owEsi3\" style=\"max-width:100%;\"><br></p><h2 id=\"ztqfr\">4.登录dashboard</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FnXwu6fSeS_GWKoBBtE-n9q_uhTj\" style=\"max-width:100%;\"><br></p><h2 id=\"4hpkk\">三、 部署Metrics-Server服务</h2><font size=\"4\">在新版的K8S中，系统资源的采集均使用Metrics-Server服务，可以通过Metrics-Server服务采集节点和Pod的内存、磁盘、CPU和网络的使用率等信息。</font><br><br><h2 id=\"rp96p\">1.下载并解压Metrics-Server</h2><pre type=\"Bash\"><code>https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/kubernetes-sigs/m</span>etrics-server<span class=\"hljs-regexp\">/archive/</span>v0.<span class=\"hljs-number\">3.6</span>.tar.gz</code></pre><p><br></p><p><br></p><h2 id=\"iie5m\">2.修改Metrics-Server配置文件</h2><pre type=\"Bash\"><code>vim metrics-server<span class=\"hljs-number\">-0.3</span><span class=\"hljs-number\">.6</span>/deploy/<span class=\"hljs-number\">1.8</span>+/metrics-server-deployment.yaml</code></pre><p><br></p><p><font size=\"4\">这是我的配置文件</font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">metrics-server</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">metrics-server</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">metrics-server</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">metrics-server</span>\n      <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-comment\"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tmp-dir</span>\n        <span class=\"hljs-attr\">emptyDir:</span> <span class=\"hljs-string\">{}</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">metrics-server</span>\n        <span class=\"hljs-comment\"># 修改image 和 imagePullPolicy</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6</span>\n        <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span>\n        <span class=\"hljs-comment\"># 新增command配置</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/metrics-server</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kubelet-insecure-tls</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tmp-dir</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/tmp</span>\n        <span class=\"hljs-comment\"># 新增resources配置</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">300m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">200Mi</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">200m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">100Mi</span></code></pre><h2 id=\"1vxus\">2.应用配置文件</h2><pre type=\"Bash\"><code>cd metrics-server<span class=\"hljs-number\">-0.3</span><span class=\"hljs-number\">.6</span>/deploy/<span class=\"hljs-number\">1.8</span>+\nkubectl apply -f .</code></pre><p><br></p><h2 id=\"9b30p\">3.安装完Metrics-Server之后，查看node信息</h2><pre type=\"Bash\"><code>kubectl top <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FlgWj_5lZnoHrtwgBVuAPxNf3-jx\" style=\"max-width:100%;\"><br></p><h2 id=\"pnjzj\">4.再次登录DashBoard</h2><font size=\"3\">各种炫酷图表就可以显示啦~大功告成</font><h2><img src=\"https://img-blog.csdnimg.cn/2021011515185798.png?x-oss-process&amp;#61;image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1J5YW5fTGVv,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><span style=\"font-size: 1em;\" id=\"43l0h\">四、K8S命令自动补全</span></h2><h2 id=\"u9h9l\">1.安装bash-completion</h2><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">install </span><span class=\"hljs-keyword\">bash-completion </span>-y</code></pre><p><br></p><h2 id=\"iar3u\">2.执行bash_completion</h2><pre type=\"Bash\"><code><span class=\"hljs-keyword\">source</span> <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/bash-completion/</span>bash_completion</code></pre><p><br></p><h2 id=\"q3olh\">3.重新加载kubectl completion</h2><pre type=\"Bash\"><code>source &lt;(<span class=\"hljs-name\">kubectl</span> completion bash)</code></pre><p><br></p><h2 id=\"70hat\">4.就能用tab补全命令了</h2>试一下</div><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl create clusterrolebinding</span></code></pre><h2 id=\"7iyjc\">五<span style=\"font-size: 1.5em;\">、推荐二个自动生成YML文件的地址</span></h2><div><font size=\"4\"><a href=\"https://k8syaml.com/\" target=\"_blank\">https://k8syaml.com/</a><br></font></div><p><font size=\"4\"><a href=\"https://www.kubebiz.com/\" target=\"_blank\">https://www.kubebiz.com/</a>&nbsp;（推荐安装什么都有）</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi0X9FlK5dLbEeGirYOefEs60CVH\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fohc-4UR6fY2x4DOgY-_LybDTIsp\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-02-07 11:03:12','2021-03-14 18:18:55'),(47,'http://qiniu-picture.xiyanit.cn/Ft3jQzwu2ZjvJFXG5eLjZo00JkdW','Kubernetes部署容器化应用','Kubernetes,Linux,','Kubernetes部署容器化应用',17,0,0,'1',1,'<p><a href=\"http://xiyanit.cn/article?id=42\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">上篇文章介绍了如果安装Kubernetes</a>&nbsp;&nbsp;</p><p><font size=\"3\" color=\"#c24f4a\">何为“容器化应用”？<br>通俗点来说，就是你把一个程序放在docker里部署，这个docker应用就是容器化应用；<br>比如：在docker里面部署一个springboot，这个docker+springboot一起就是一个容器化应用；<br>在Docker里面部署一个nginx，这个docker+nginx一起就是一个容器化应用；<br><br>在Docker里面部署一个应用怎么部？<br>简单来说就是 镜像 -&gt; 启动镜像得到一个Docker容器；<br><br>在k8s里面部署一个应用怎么部？<br>SpringBoot程序--&gt;打包jar包或war包--&gt;通过Dockerfile文件生成docker镜像--&gt;通过k8s部署这个镜像--&gt;部署完毕；</font><br></p><h2 id=\"9ejga\">1.在Kubernetes集群中部署一个Nginx：</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\"># pod</span>\n\nkubectl <span class=\"hljs-built_in\">create</span> deployment nginx <span class=\"hljs-comment\">--image=nginx</span>\n<span class=\"hljs-comment\">#暴露服务</span>\nkubectl expose deployment nginx <span class=\"hljs-comment\">--port=80 --type=NodePort</span>\n<span class=\"hljs-comment\">#获取pod</span>\nkubectl <span class=\"hljs-built_in\">get</span> pod</code><code>\n访问地址：<span class=\"hljs-keyword\">http</span>://NodeIP:Port</code></pre><p><br></p><h2 id=\"n1aev\">2.在Kubernetes集群中部署一个Tomcat：</h2><pre type=\"Bash\"><code>kubectl create deployment tomcat <span class=\"hljs-params\">--image=tomcat</span>\n\nkubectl expose deployment tomcat <span class=\"hljs-params\">--port=8080</span> <span class=\"hljs-params\">--type=NodePort</span>\n\n访问地址：http:<span class=\"hljs-string\">//NodeIP</span><span class=\"hljs-function\">:Port</span></code></pre><p><br></p><h2 id=\"fa4eb\">3.K8s部署微服务（springboot程序）</h2><pre type=\"Bash\"><code><span class=\"hljs-number\">1</span>、项目打包（jar、war）--&gt;可以采用一些工具git、maven、jenkins\n<span class=\"hljs-number\">2</span>、制作Dockerfile文件，生成镜像；\n<span class=\"hljs-number\">3</span>、kubectl create deployment nginx --image= 你的镜像\n<span class=\"hljs-number\">4</span>、你的springboot就部署好了，是以docker容器的方式运行在pod里面的；</code></pre><h2 id=\"ri1rg\"><p>3.1Dockerfile脚本</p><pre type=\"Bash\"><code><font size=\"3\">###指定java8环境镜像\nFROM java:<span class=\"hljs-number\" style=\"\">8</span>\n###复制文件到容器app-springboot\nADD docker-springboot<span class=\"hljs-number\" style=\"\">-0.0</span><span class=\"hljs-number\" style=\"\">.1</span>.jar /test.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\" style=\"\">8080</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\" style=\"\">\"java\"</span>,<span class=\"hljs-string\" style=\"\">\"-jar\"</span>,<span class=\"hljs-string\" style=\"\">\"/test.jar\"</span>]</font></code></pre></h2><h3><font size=\"4\" id=\"9ehk7\">3.2构建镜像：docker build -t test .</font></h3><h3><font size=\"4\" id=\"k9ze7\">3.3空运行测试(可以输出为yml或者是jsob)</font></h3><pre type=\"Bash\"><code>kubectl <span class=\"hljs-keyword\">create</span> deployment <span class=\"hljs-keyword\">test</span> <span class=\"hljs-comment\">--dry-run -o yaml &gt; deploy.yaml</span>\n\n\nkubectl <span class=\"hljs-keyword\">create</span> deployment <span class=\"hljs-keyword\">test</span>  <span class=\"hljs-comment\">--dry-run -o json&gt; deploy.json</span></code></pre><h3 id=\"8x0hr\">3.4Yml文件方式部署（也可以通过命令部署）</h3><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f deploy.yaml (yaml是资源清单)</code></pre><p><br></p><p><font size=\"3\">等价于：</font><br><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> deployment springboot-k8s <span class=\"hljs-comment\">--image=test</span></code></pre><p><br>部署后查看一下：<br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pods</code></pre><p><br></p><p><font size=\"4\">注意：boot-deploy.yaml文件里面镜像从本地拉取（</font><font color=\"#c24f4a\"><span style=\"font-size: 1em;\">Always  总是远程拉取，</span><span style=\"font-size: 1em;\">IfNotPresent  默认值,本地有则使用本地镜像,不拉取，</span><span style=\"font-size: 1em;\">Never  只使用本地镜像，从不拉取</span></font><font size=\"4\">）；</font></p><p><span style=\"background-color: rgb(249, 150, 59);\"><font color=\"#eeece0\">containers:<br>      - image: 38-springboot-k8s-1.0.0-jar<br>        name: 38-springboot-k8s-1-0-0-jar-8ntrx<br>        imagePullPolicy: Never</font></span><br><br><font color=\"#c24f4a\">把镜像拉取策略改为Never；</font></p><h3 id=\"cyvjp\">3.5暴露服务端口：</h3><pre type=\"Bash\"><code>kubectl expose deployment springboot-k8s <span class=\"hljs-attribute\">--port</span>=8080 <span class=\"hljs-attribute\">--type</span>=NodePort</code></pre><p><br></p><h3 id=\"84q9b\">3.6命令方式部署</h3><pre type=\"Bash\"><code>kubectl create deployment springboot-k8s --image=<font color=\"#2aa198\">test</font></code></pre><p><br></p><h2 id=\"ri1rg\">4.基本命令</h2><pre type=\"Bash\"><code>查看一下，相关命令：\nkubectl <span class=\"hljs-built_in\">get</span> node(s)\nkubectl <span class=\"hljs-built_in\">get</span> service(s)\nkubectl <span class=\"hljs-built_in\">get</span> deployment (deploy)\nkubectl <span class=\"hljs-built_in\">get</span> pod(s)</code><code><span class=\"hljs-comment\">//生成yml文件</span></code><code><span class=\"hljs-comment\">kubectl create deployment web --image=nginx -o yaml --dry-run &gt; web.yml\n//删除service</span>\nkubectl <span class=\"hljs-built_in\">delete</span> service nginx<span class=\"hljs-comment\">\n//删除nginx的控制器</span>\nkubectl <span class=\"hljs-built_in\">delete</span> deployment nginx<span class=\"hljs-comment\">\n//删除pod</span>\nkubectl <span class=\"hljs-built_in\">delete</span> pod nginx<span class=\"hljs-number\">-6799</span>fc88d8-zc48m（pod名字）\nkubectl <span class=\"hljs-built_in\">get</span> ing(ress) <span class=\"hljs-comment\">--查规则</span>\n\nkubectl <span class=\"hljs-built_in\">get</span> service -n ingress-nginx\nkubectl <span class=\"hljs-built_in\">get</span> deploy -n ingress-nginx\nkubectl <span class=\"hljs-built_in\">get</span> pods -n ingress-nginx\n\n看pod详情：\nkubectl describe pods spring-cloud-alibaba-consumer<span class=\"hljs-number\">-5</span>d557f4765-d27d9\n\n看pod运行日志：\nkubectl logs -f spring-cloud-alibaba-consumer<span class=\"hljs-number\">-8697896544</span>-g6rsf<span class=\"hljs-comment\">\n//kubectl命令帮助</span>\nkubectl <span class=\"hljs-comment\">--help</span></code></pre>','<p><a href=\"http://xiyanit.cn/article?id=42\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">上篇文章介绍了如果安装Kubernetes</a>&nbsp;&nbsp;</p><p><font size=\"3\" color=\"#c24f4a\">何为“容器化应用”？<br>通俗点来说，就是你把一个程序放在docker里部署，这个docker应用就是容器化应用；<br>比如：在docker里面部署一个springboot，这个docker+springboot一起就是一个容器化应用；<br>在Docker里面部署一个nginx，这个docker+nginx一起就是一个容器化应用；<br><br>在Docker里面部署一个应用怎么部？<br>简单来说就是 镜像 -&gt; 启动镜像得到一个Docker容器；<br><br>在k8s里面部署一个应用怎么部？<br>SpringBoot程序--&gt;打包jar包或war包--&gt;通过Dockerfile文件生成docker镜像--&gt;通过k8s部署这个镜像--&gt;部署完毕；</font><br></p><h2 id=\"9ejga\">1.在Kubernetes集群中部署一个Nginx：</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\"># pod</span>\n\nkubectl <span class=\"hljs-built_in\">create</span> deployment nginx <span class=\"hljs-comment\">--image=nginx</span>\n<span class=\"hljs-comment\">#暴露服务</span>\nkubectl expose deployment nginx <span class=\"hljs-comment\">--port=80 --type=NodePort</span>\n<span class=\"hljs-comment\">#获取pod</span>\nkubectl <span class=\"hljs-built_in\">get</span> pod</code><code>\n访问地址：<span class=\"hljs-keyword\">http</span>://NodeIP:Port</code></pre><p><br></p><h2 id=\"n1aev\">2.在Kubernetes集群中部署一个Tomcat：</h2><pre type=\"Bash\"><code>kubectl create deployment tomcat <span class=\"hljs-params\">--image=tomcat</span>\n\nkubectl expose deployment tomcat <span class=\"hljs-params\">--port=8080</span> <span class=\"hljs-params\">--type=NodePort</span>\n\n访问地址：http:<span class=\"hljs-string\">//NodeIP</span><span class=\"hljs-function\">:Port</span></code></pre><p><br></p><h2 id=\"fa4eb\">3.K8s部署微服务（springboot程序）</h2><pre type=\"Bash\"><code><span class=\"hljs-number\">1</span>、项目打包（jar、war）--&gt;可以采用一些工具git、maven、jenkins\n<span class=\"hljs-number\">2</span>、制作Dockerfile文件，生成镜像；\n<span class=\"hljs-number\">3</span>、kubectl create deployment nginx --image= 你的镜像\n<span class=\"hljs-number\">4</span>、你的springboot就部署好了，是以docker容器的方式运行在pod里面的；</code></pre><h2 id=\"ri1rg\"><p>3.1Dockerfile脚本</p><pre type=\"Bash\"><code><font size=\"3\">###指定java8环境镜像\nFROM java:<span class=\"hljs-number\" style=\"\">8</span>\n###复制文件到容器app-springboot\nADD docker-springboot<span class=\"hljs-number\" style=\"\">-0.0</span><span class=\"hljs-number\" style=\"\">.1</span>.jar /test.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\" style=\"\">8080</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\" style=\"\">\"java\"</span>,<span class=\"hljs-string\" style=\"\">\"-jar\"</span>,<span class=\"hljs-string\" style=\"\">\"/test.jar\"</span>]</font></code></pre></h2><h3><font size=\"4\" id=\"9ehk7\">3.2构建镜像：docker build -t test .</font></h3><h3><font size=\"4\" id=\"k9ze7\">3.3空运行测试(可以输出为yml或者是jsob)</font></h3><pre type=\"Bash\"><code>kubectl <span class=\"hljs-keyword\">create</span> deployment <span class=\"hljs-keyword\">test</span> <span class=\"hljs-comment\">--dry-run -o yaml &gt; deploy.yaml</span>\n\n\nkubectl <span class=\"hljs-keyword\">create</span> deployment <span class=\"hljs-keyword\">test</span>  <span class=\"hljs-comment\">--dry-run -o json&gt; deploy.json</span></code></pre><h3 id=\"8x0hr\">3.4Yml文件方式部署（也可以通过命令部署）</h3><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f deploy.yaml (yaml是资源清单)</code></pre><p><br></p><p><font size=\"3\">等价于：</font><br><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> deployment springboot-k8s <span class=\"hljs-comment\">--image=test</span></code></pre><p><br>部署后查看一下：<br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pods</code></pre><p><br></p><p><font size=\"4\">注意：boot-deploy.yaml文件里面镜像从本地拉取（</font><font color=\"#c24f4a\"><span style=\"font-size: 1em;\">Always  总是远程拉取，</span><span style=\"font-size: 1em;\">IfNotPresent  默认值,本地有则使用本地镜像,不拉取，</span><span style=\"font-size: 1em;\">Never  只使用本地镜像，从不拉取</span></font><font size=\"4\">）；</font></p><p><span style=\"background-color: rgb(249, 150, 59);\"><font color=\"#eeece0\">containers:<br>      - image: 38-springboot-k8s-1.0.0-jar<br>        name: 38-springboot-k8s-1-0-0-jar-8ntrx<br>        imagePullPolicy: Never</font></span><br><br><font color=\"#c24f4a\">把镜像拉取策略改为Never；</font></p><h3 id=\"cyvjp\">3.5暴露服务端口：</h3><pre type=\"Bash\"><code>kubectl expose deployment springboot-k8s <span class=\"hljs-attribute\">--port</span>=8080 <span class=\"hljs-attribute\">--type</span>=NodePort</code></pre><p><br></p><h3 id=\"84q9b\">3.6命令方式部署</h3><pre type=\"Bash\"><code>kubectl create deployment springboot-k8s --image=<font color=\"#2aa198\">test</font></code></pre><p><br></p><h2 id=\"ri1rg\">4.基本命令</h2><pre type=\"Bash\"><code>查看一下，相关命令：\nkubectl <span class=\"hljs-built_in\">get</span> node(s)\nkubectl <span class=\"hljs-built_in\">get</span> service(s)\nkubectl <span class=\"hljs-built_in\">get</span> deployment (deploy)\nkubectl <span class=\"hljs-built_in\">get</span> pod(s)</code><code><span class=\"hljs-comment\">//生成yml文件</span></code><code><span class=\"hljs-comment\">kubectl create deployment web --image=nginx -o yaml --dry-run &gt; web.yml\n//删除service</span>\nkubectl <span class=\"hljs-built_in\">delete</span> service nginx<span class=\"hljs-comment\">\n//删除nginx的控制器</span>\nkubectl <span class=\"hljs-built_in\">delete</span> deployment nginx<span class=\"hljs-comment\">\n//删除pod</span>\nkubectl <span class=\"hljs-built_in\">delete</span> pod nginx<span class=\"hljs-number\">-6799</span>fc88d8-zc48m（pod名字）\nkubectl <span class=\"hljs-built_in\">get</span> ing(ress) <span class=\"hljs-comment\">--查规则</span>\n\nkubectl <span class=\"hljs-built_in\">get</span> service -n ingress-nginx\nkubectl <span class=\"hljs-built_in\">get</span> deploy -n ingress-nginx\nkubectl <span class=\"hljs-built_in\">get</span> pods -n ingress-nginx\n\n看pod详情：\nkubectl describe pods spring-cloud-alibaba-consumer<span class=\"hljs-number\">-5</span>d557f4765-d27d9\n\n看pod运行日志：\nkubectl logs -f spring-cloud-alibaba-consumer<span class=\"hljs-number\">-8697896544</span>-g6rsf<span class=\"hljs-comment\">\n//kubectl命令帮助</span>\nkubectl <span class=\"hljs-comment\">--help</span></code></pre>','1','8','1','1','1','2021-02-07 12:10:03','2021-02-18 17:49:00'),(48,'http://qiniu-picture.xiyanit.cn/FqXBEeuehKqGmXacjs6JsHyxYHA3','kubernetes的Servie和Ingress架构与实践','kubernetes,Ingress,','kubernetes的Servie和Ingress架构与实践',16,0,0,'1',1,'<h2>一、什么是Ｓｅｒｖｉｃｅ？</h2><p><font size=\"3\">我们已经能够通过控制器来创建一组Pod来提供具有高可用性的服务。虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题：<br><br>Pod IP仅仅是集群内可见的虚拟IP，外部无法访问。<br>Pod IP会随着Pod的销毁而消失，当ReplicaSet对Pod进行动态伸缩时，Pod IP可能随时随地都会变化，这样对于我们访问这个服务带来了难度。</font><br><img src=\"https://img-blog.csdnimg.cn/2020042220345147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0OTc2Mw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h3><font size=\"3\" id=\"5iu7m\">ClusterIP模式</font></h3><font size=\"3\">用于为集群内Pod访问时,提供的固定访问地址,默认是自动分配地址,可使用ClusterIP关键字指定固定IP.<br><br></font><h3><font size=\"3\" id=\"s19ng\">NodePort模式</font></h3><font size=\"3\">用于为集群外部访问Service后面Pod提供访问接入端口.<br>　这种类型的service工作流程为:<br>　　　　　　Client-----&gt;NodeIP:NodePort-----&gt;ClusterIP:ServicePort-----&gt;PodIP:ContainerPort<br></font><h3 id=\"h0483\"><font size=\"3\"><br></font><font size=\"3\">LoadBalancer模式</font></h3><font size=\"3\">用于当K8s运行在一个云环境内时,若该云环境支持LBaaS,则此类型可自动触发创建一个软件负载均衡器用于对Service做负载均衡调度.<br>因为外部所有Client都访问一个NodeIP,该节点的压力将会很大, 而LoadBalancer则可解决这个问题。<br>而且它还直接动态监测后端Node是否被移除或新增了，然后动态更新调度的节点数。<br></font><h3 id=\"i8b2q\"><font size=\"3\"><br></font><font size=\"3\">ExternalName模式</font></h3><font size=\"3\">用于将集群外部的服务引入到集群内部，在集群内部可直接访问来获取服务。<br>它的值必须是 FQDN, 此FQDN为集群内部的FQDN, 即: ServiceName.Namespace.Domain.LTD.<br></font><br><h3 id=\"1tk9e\">我们来看下NodePort怎么暴露服务</h3><p><br></p><p><font size=\"4\">命令生成yaml文件</font></p><pre type=\"Bash\"><code>kubectl expose deploy nginx <span class=\"hljs-attribute\">--port</span>=80 <span class=\"hljs-attribute\">--target-port</span>=80  -o yaml --dry-<span class=\"hljs-builtin-name\">run</span> &gt; service.yaml</code></pre><p><br></p><p>NodePort服务的YAML文件如下：</p><pre><code>apiVersion: v1\nkind: Service\nmetadata: &nbsp;\n  name: my-nodeport-service\nselector: &nbsp; \n  app: my-appspec #这里选择器一定要选择容器的标签，之前写name:kube-node是错的。\n  type: NodePort   #这里代表是NodePort类型的  Service有四种type: ClusterIP(默认）、NodePort、LoadBalancer、ExternalName. 其中NodePort和LoadBalancer两类型的Services可以对外提供服务。\n  ports: &nbsp;\n  - name: http\n &nbsp;  port: 80 #这里的端口和clusterIP对应，即ip:80 ,供内部访问。\n &nbsp;  targetPort: 80 #端口一定要和container暴露出来的端口对应\n &nbsp;  nodePort: 30008 # 所有的节点都会开放此端口，此端口供外部调用。\n &nbsp;  protocol: TCP</code></pre><blockquote><p>这种方式有一个“nodePort\"的端口，能在节点上指定开放哪个端口，如果没有指定端口，它会选择一个随机端口，大多数时候应该让Kubernetes随机选择端口；<br>这种方式的不足：<br>1、一个端口只能供一个服务使用；<br>2、只能使用30000–32767之间的端口；<br>3、如果节点/虚拟机的IP地址发生变化，需要人工进行处理；<br>因此，在生产环境不推荐使用这种方式来直接发布服务，如果不要求运行的服务实时可用，或者用于演示或者临时运行一个应用可以用这种方式；<br>三种端口说明<br>nodePort<br>外部机器（在windows浏览器）可以访问的端口；<br>比如一个Web应用需要被其他用户访问，那么需要配置type=NodePort，而且配置nodePort=30001，那么其他机器就可以通过浏览器访问scheme://node:30001访问到该服务；<br>targetPort<br>容器的端口，与制作容器时暴露的端口一致（Dockerfile中EXPOSE），例如docker.io官方的nginx暴露的是80端口；<br>port<br>Kubernetes集群中的各个服务之间访问的端口，虽然mysql容器暴露了3306端口，但外部机器不能访问到mysql服务，因为他没有配置NodePort类型，该3306端口是集群内其他容器需要通过3306端口访问该服务；</p></blockquote><p><br></p><h3 id=\"wcx4u\">我们来看下LoadBalancer</h3><p>LoadBlancer可以暴露服务，这种方式需要向云平台申请负载均衡器，目前很多云平台都支持，但是这种方式深度耦合了云平台；（相当于是购买服务）<br>从外部的访问通过负载均衡器LoadBlancer转发到后端的Pod，具体如何实现要看云提供商；</p><h2 id=\"w9tig\">二、什么是Ingress？</h2>从前面的学习，我们可以了解到Kubernetes暴露服务的方式目前只有三种：<font color=\"#c24f4a\">LoadBlancer Service、ExternalName、NodePort Service、Ingress；</font>而我们需要将集群内服务提供外界访问就会产生以下几个问题：<br><br><h2 id=\"18u3v\">1、Pod 漂移问题</h2>Kubernetes 具有强大的副本控制能力，能保证在任意副本（Pod）挂掉时自动从其他机器启动一个新的，还可以动态扩容等，通俗地说，这个 Pod 可能在任何时刻出现在任何节点上，也可能在任何时刻死在任何节点上；那么自然随着 Pod 的创建和销毁，Pod IP 肯定会动态变化；那么如何把这个动态的 Pod IP 暴露出去？这里借助于 Kubernetes 的 Service 机制，Service 可以以标签的形式选定一组带有指定标签的 Pod，并监控和自动负载他们的 Pod IP，那么我们向外暴露只暴露 Service IP 就行了；这就是 NodePort 模式：即在每个节点上开起一个端口，然后转发到内部<h2 id=\"57pkg\">2、端口管理问题</h2><p>采用 NodePort 方式暴露服务面临问题是，服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护；这时，我们可以能否使用一个Nginx直接对内进行转发呢？众所周知的是，Pod与Pod之间是可以互相通信的，而Pod是可以共享宿主机的网络名称空间的，也就是说当在共享网络名称空间时，Pod上所监听的就是Node上的端口。那么这又该如何实现呢？简单的实现就是使用 DaemonSet 在每个 Node 上监听 80，然后写好规则，因为 Nginx 外面绑定了宿主机 80 端口（就像 NodePort），本身又在集群内，那么向后直接转发到相应 Service IP 就行了<br></p><h2 id=\"puw0x\">3、域名分配及动态更新问题</h2>从上面的方法，采用 Nginx-Pod 似乎已经解决了问题，但是其实这里面有一个很大缺陷：当每次有新服务加入又该如何修改 Nginx 配置呢？？我们知道使用Nginx可以通过虚拟主机域名进行区分不同的服务，而每个服务通过upstream进行定义不同的负载均衡池，再加上location进行负载均衡的反向代理，在日常使用中只需要修改nginx.conf即可实现，那在K8S中又该如何实现这种方式的调度呢？？？<br><br>假设后端的服务初始服务只有ecshop，后面增加了bbs和member服务，那么又该如何将这2个服务加入到Nginx-Pod进行调度呢？总不能每次手动改或者Rolling Update 前端 Nginx Pod 吧！！此时 Ingress 出现了，如果不算上面的Nginx，Ingress 包含两大组件：Ingress Controller 和 Ingress。<p><font size=\"3\"><br></font></p><h2 id=\"q8lr7\"><font size=\"3\">6.</font><span style=\"font-size: 1em;\">我们来看下今天的主角</span><span style=\"font-size: 1em;\">Ingress</span></h2><div><img src=\"http://qiniu-picture.xiyanit.cn/Fup-hpgwEcCBnt7DTafq0RSBU2Go\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><font size=\"3\">虽然k8s集群内部署的pod、service都有自己的IP，但是却无法提供外网访问，以前我们可以通过监听NodePort的方式暴露服务，但是这种方式并不灵活，生产环境也不建议使用；<br>Ingresss是k8s集群中的一个API资源对象，相当于一个集群网关，我们可以自定义路由规则来转发、管理、暴露服务(一组pod)，比较灵活，生产环境建议使用这种方式；<br>Ingress不是kubernetes内置的（安装好k8s之后，并没有安装ingress），ingress需要单独安装，而且有多种类型Google Cloud Load Balancer，Nginx，Contour，Istio等等，我们这里选择官方维护的Ingress Nginx；</font></p><p><font size=\"3\">部署&nbsp; &nbsp;Ingress Nginx<br>文档：https://github.com/kubernetes/ingress-nginx </font><br>ingress-nginx是使用NGINX作为反向代理和负载均衡器的Kubernetes的Ingress控制器；<br></p><pre type=\"Bash\"><code>kubectl apply -f https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/kubernetes/i</span>ngress-nginx<span class=\"hljs-regexp\">/controller-v0.44.0/</span>deploy<span class=\"hljs-regexp\">/static/</span>provider<span class=\"hljs-regexp\">/baremetal/</span>deploy.yaml</code></pre><p><br></p><p>远程需要翻墙，你可以去我百度云</p><p>链接：https://pan.baidu.com/s/1gqyMGG0ZqVv1qX-ePgeCPQ <br>提取码：a90e <br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p><font size=\"3\"><br>添加一个配置项：</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fmmw3DvN90O5mvpuePrZ6COzokVy\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">应用：</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f ingress-controller.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvbfITDCcjAE-tRlC8hm0BOAHopb\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">查看Ingress的状态</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> service </span>-n ingress-nginx</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> deploy -n ingress-nginx</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> pods -n ingress-nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FifDB5tdlw6x68RAQMLTwWhRiKpk\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><font size=\"3\">例子 暴露Nginx应用的Ingress规则<font color=\"#c24f4a\">这里很多种规则具体看你需求</font></font></p><p><br></p><h2 id=\"jgxsh\"><font color=\"#c24f4a\">查看当前ingress-nginx部署在哪台服务器上</font></h2><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pods -n ingress-nginx -o wide;</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FvIjSmDpqx20tfrfM6pw_Jh-S_on\" style=\"max-width:100%;\"><br></p><p><br></p><p><span style=\"font-size: 1em;\">一个最小的ingress示例</span><font size=\"3\">：</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">test-ingress</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"hljs-string\">/</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/testpath</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">test</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><blockquote><p>ingress 规则<br>每一个HTTP规则包含以下信息：<br><br>一个可选的host。在本例中没有host,因此，该规则适用于通过指定的IP地址进行的所有入站HTTP通信。如果提供一个host(例如，foo.bar.com)，这个规则是适用于这一个host<br>一个paths（例如 /testpath）的列表。每一个path都有与之关联的serviceName和servicePort,在负载均衡器将流量导向所引用的服务之前，主机和路径必须匹配传入请求的内容<br>后端是服务和端口名称的组合。对与规则的主机和路径匹配的入口的HTTP(和HTTPS)请求将发送到列出的后端。<br>默认后端通常配置在一个Ingress控制器中，该控制器将服务于任何与规范中的路径不匹配的请求。（404页面）<br></p></blockquote><p><font size=\"3\">ingress的类型<br>单service的ingress<br>现有的Kubernetes概念允许您公开单个服务。您还可以通过指定一个没有规则的默认后端来对一个入口执行此操作。</font><br><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">test-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">backend:</span>\n    <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">testsvc</span>\n    <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"3\">通过kubectl apply -f &lt;文件名&gt;创建后，你可以看到：</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> ingress test-ingress</code></pre><p><br></p><p><font size=\"4\" color=\"#7b5ba1\">浏览器访问192.168.181.139</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhtcF8T4tzkUK_S2Q5iL3WS1n4Vn\" style=\"max-width:100%;\" width=\"523\" height=\"188.98\"><font size=\"4\" color=\"#7b5ba1\"><br></font></p><p><br></p><p>其中107.178.254.228是入口控制器为满足该入口而分配的IP。<br><img src=\"http://qiniu-picture.xiyanit.cn/FmeYuEPr8oaIp7mSOAe1jjnpW-rv\" style=\"max-width:100%;\"><br></p><p>简单的扇出<br>根据所请求的HTTP URI，扇出配置将流量从单个IP地址路由到多个服务。一个入口允许您将负载平衡器的数量保持到最小。例如，设置如下:<br><br><img src=\"http://qiniu-picture.xiyanit.cn/FhF7PV9I0jDEo8QoEVJTqDSTLdpF\" style=\"max-width:100%;\"><br>定义的ingress如下：<br><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">simple-fanout-example</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"hljs-string\">/</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">foo.bar.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/foo</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">4200</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/bar</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service2</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">8080</span></code></pre><p><font size=\"3\">通过kubectl apply -f &lt;文件名&gt;创建后：</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">describe</span> ingress simple-fanout-<span class=\"hljs-built_in\">example</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnwXgaAmTQvy9pjA0F335Q8Nyf6H\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">基于名称的虚拟主机<br>基于名称的虚拟主机支持将HTTP流量路由到同一IP地址的多个主机名。</font><br><img src=\"http://qiniu-picture.xiyanit.cn/FiW-GMRNYUfH0w9MbFaXxkacs-Wv\" style=\"max-width:100%;\"><br><font size=\"3\">下面的ingress告诉后台负载均衡器根据主机头路由请求。</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">name-virtual-host-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">foo.bar.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">bar.foo.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service2</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"3\">如果您创建一个没有在规则中定义任何主机的Ingress资源，那么可以匹配到Ingress控制器IP地址的任何web流量，而不需要基于名称的虚拟主机。例如，下面的Ingress资源将把first.bar.com请求的流量路由到service1, second.foo.com路由到service2，将任何没有在request中定义主机名(即没有显示请求头)的流量路由到service3。</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">name-virtual-host-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">first.bar.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">second.foo.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service2</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service3</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"4\"><b>TLS</b></font><br><font size=\"3\">您可以通过指定包含TLS私钥和证书的秘密来保护ingress。目前，入口只支持一个TLS端口443，并假设TLS终端。如果一个入口中的TLS配置部分指定了不同的主机，那么它们将根据通过SNI TLS扩展指定的主机名在同一个端口上进行多路复用(前提是入口控制器支持SNI)。TLS密钥必须包含名为TLS的密钥。crt和tls。包含用于TLS的证书和私钥的密钥，例如:</font></p><pre type=\"Bash\"><code>apiVersion: v1\nkind:<span class=\"hljs-built_in\"> Secret\n</span>metadata:\n  name: testsecret-tls\n  namespace:<span class=\"hljs-built_in\"> default\n</span>data:\n  tls.crt: base64 encoded cert\n  tls.key: base64 encoded key\ntype: kubernetes.io/tls</code></pre><p><font size=\"3\">在一个Ingress中引用这个secret将告诉Ingress控制器使用TLS保护从客户机到负载均衡器的通道。您需要确保您创建的TLS secret来自一个包含sslexample.foo.com CN的证书。</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tls-example-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">tls:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">hosts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sslexample.foo.com</span>\n    <span class=\"hljs-attr\">secretName:</span> <span class=\"hljs-string\">testsecret-tls</span>\n  <span class=\"hljs-attr\">rules:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">sslexample.foo.com</span>\n      <span class=\"hljs-attr\">http:</span>\n        <span class=\"hljs-attr\">paths:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span>\n          <span class=\"hljs-attr\">backend:</span>\n            <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n            <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"4\"><b>Loadbalancing</b></font><br><font size=\"3\">一个ingress controller 通过一些应用于所有入口的负载平衡策略设置来引导，例如负载平衡算法、后端权重方案等。更高级的负载平衡概念(例如持久会话、动态权重)还没有通过ingress公开。同样值得注意的是，尽管健康检查不是直接通过入口暴露的，但是在Kubernetes中也存在类似的概念，比如就绪探测，它允许您实现相同的最终结果。</font></p>','<h2>一、什么是Ｓｅｒｖｉｃｅ？</h2><p><font size=\"3\">我们已经能够通过控制器来创建一组Pod来提供具有高可用性的服务。虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题：<br><br>Pod IP仅仅是集群内可见的虚拟IP，外部无法访问。<br>Pod IP会随着Pod的销毁而消失，当ReplicaSet对Pod进行动态伸缩时，Pod IP可能随时随地都会变化，这样对于我们访问这个服务带来了难度。</font><br><img src=\"https://img-blog.csdnimg.cn/2020042220345147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0OTc2Mw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h3><font size=\"3\" id=\"5iu7m\">ClusterIP模式</font></h3><font size=\"3\">用于为集群内Pod访问时,提供的固定访问地址,默认是自动分配地址,可使用ClusterIP关键字指定固定IP.<br><br></font><h3><font size=\"3\" id=\"s19ng\">NodePort模式</font></h3><font size=\"3\">用于为集群外部访问Service后面Pod提供访问接入端口.<br>　这种类型的service工作流程为:<br>　　　　　　Client-----&gt;NodeIP:NodePort-----&gt;ClusterIP:ServicePort-----&gt;PodIP:ContainerPort<br></font><h3 id=\"h0483\"><font size=\"3\"><br></font><font size=\"3\">LoadBalancer模式</font></h3><font size=\"3\">用于当K8s运行在一个云环境内时,若该云环境支持LBaaS,则此类型可自动触发创建一个软件负载均衡器用于对Service做负载均衡调度.<br>因为外部所有Client都访问一个NodeIP,该节点的压力将会很大, 而LoadBalancer则可解决这个问题。<br>而且它还直接动态监测后端Node是否被移除或新增了，然后动态更新调度的节点数。<br></font><h3 id=\"i8b2q\"><font size=\"3\"><br></font><font size=\"3\">ExternalName模式</font></h3><font size=\"3\">用于将集群外部的服务引入到集群内部，在集群内部可直接访问来获取服务。<br>它的值必须是 FQDN, 此FQDN为集群内部的FQDN, 即: ServiceName.Namespace.Domain.LTD.<br></font><br><h3 id=\"1tk9e\">我们来看下NodePort怎么暴露服务</h3><p><br></p><p><font size=\"4\">命令生成yaml文件</font></p><pre type=\"Bash\"><code>kubectl expose deploy nginx <span class=\"hljs-attribute\">--port</span>=80 <span class=\"hljs-attribute\">--target-port</span>=80  -o yaml --dry-<span class=\"hljs-builtin-name\">run</span> &gt; service.yaml</code></pre><p><br></p><p>NodePort服务的YAML文件如下：</p><pre><code>apiVersion: v1\nkind: Service\nmetadata: &nbsp;\n  name: my-nodeport-service\nselector: &nbsp; \n  app: my-appspec #这里选择器一定要选择容器的标签，之前写name:kube-node是错的。\n  type: NodePort   #这里代表是NodePort类型的  Service有四种type: ClusterIP(默认）、NodePort、LoadBalancer、ExternalName. 其中NodePort和LoadBalancer两类型的Services可以对外提供服务。\n  ports: &nbsp;\n  - name: http\n &nbsp;  port: 80 #这里的端口和clusterIP对应，即ip:80 ,供内部访问。\n &nbsp;  targetPort: 80 #端口一定要和container暴露出来的端口对应\n &nbsp;  nodePort: 30008 # 所有的节点都会开放此端口，此端口供外部调用。\n &nbsp;  protocol: TCP</code></pre><blockquote><p>这种方式有一个“nodePort\"的端口，能在节点上指定开放哪个端口，如果没有指定端口，它会选择一个随机端口，大多数时候应该让Kubernetes随机选择端口；<br>这种方式的不足：<br>1、一个端口只能供一个服务使用；<br>2、只能使用30000–32767之间的端口；<br>3、如果节点/虚拟机的IP地址发生变化，需要人工进行处理；<br>因此，在生产环境不推荐使用这种方式来直接发布服务，如果不要求运行的服务实时可用，或者用于演示或者临时运行一个应用可以用这种方式；<br>三种端口说明<br>nodePort<br>外部机器（在windows浏览器）可以访问的端口；<br>比如一个Web应用需要被其他用户访问，那么需要配置type=NodePort，而且配置nodePort=30001，那么其他机器就可以通过浏览器访问scheme://node:30001访问到该服务；<br>targetPort<br>容器的端口，与制作容器时暴露的端口一致（Dockerfile中EXPOSE），例如docker.io官方的nginx暴露的是80端口；<br>port<br>Kubernetes集群中的各个服务之间访问的端口，虽然mysql容器暴露了3306端口，但外部机器不能访问到mysql服务，因为他没有配置NodePort类型，该3306端口是集群内其他容器需要通过3306端口访问该服务；</p></blockquote><p><br></p><h3 id=\"wcx4u\">我们来看下LoadBalancer</h3><p>LoadBlancer可以暴露服务，这种方式需要向云平台申请负载均衡器，目前很多云平台都支持，但是这种方式深度耦合了云平台；（相当于是购买服务）<br>从外部的访问通过负载均衡器LoadBlancer转发到后端的Pod，具体如何实现要看云提供商；</p><h2 id=\"w9tig\">二、什么是Ingress？</h2>从前面的学习，我们可以了解到Kubernetes暴露服务的方式目前只有三种：<font color=\"#c24f4a\">LoadBlancer Service、ExternalName、NodePort Service、Ingress；</font>而我们需要将集群内服务提供外界访问就会产生以下几个问题：<br><br><h2 id=\"18u3v\">1、Pod 漂移问题</h2>Kubernetes 具有强大的副本控制能力，能保证在任意副本（Pod）挂掉时自动从其他机器启动一个新的，还可以动态扩容等，通俗地说，这个 Pod 可能在任何时刻出现在任何节点上，也可能在任何时刻死在任何节点上；那么自然随着 Pod 的创建和销毁，Pod IP 肯定会动态变化；那么如何把这个动态的 Pod IP 暴露出去？这里借助于 Kubernetes 的 Service 机制，Service 可以以标签的形式选定一组带有指定标签的 Pod，并监控和自动负载他们的 Pod IP，那么我们向外暴露只暴露 Service IP 就行了；这就是 NodePort 模式：即在每个节点上开起一个端口，然后转发到内部<h2 id=\"57pkg\">2、端口管理问题</h2><p>采用 NodePort 方式暴露服务面临问题是，服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护；这时，我们可以能否使用一个Nginx直接对内进行转发呢？众所周知的是，Pod与Pod之间是可以互相通信的，而Pod是可以共享宿主机的网络名称空间的，也就是说当在共享网络名称空间时，Pod上所监听的就是Node上的端口。那么这又该如何实现呢？简单的实现就是使用 DaemonSet 在每个 Node 上监听 80，然后写好规则，因为 Nginx 外面绑定了宿主机 80 端口（就像 NodePort），本身又在集群内，那么向后直接转发到相应 Service IP 就行了<br></p><h2 id=\"puw0x\">3、域名分配及动态更新问题</h2>从上面的方法，采用 Nginx-Pod 似乎已经解决了问题，但是其实这里面有一个很大缺陷：当每次有新服务加入又该如何修改 Nginx 配置呢？？我们知道使用Nginx可以通过虚拟主机域名进行区分不同的服务，而每个服务通过upstream进行定义不同的负载均衡池，再加上location进行负载均衡的反向代理，在日常使用中只需要修改nginx.conf即可实现，那在K8S中又该如何实现这种方式的调度呢？？？<br><br>假设后端的服务初始服务只有ecshop，后面增加了bbs和member服务，那么又该如何将这2个服务加入到Nginx-Pod进行调度呢？总不能每次手动改或者Rolling Update 前端 Nginx Pod 吧！！此时 Ingress 出现了，如果不算上面的Nginx，Ingress 包含两大组件：Ingress Controller 和 Ingress。<p><font size=\"3\"><br></font></p><h2 id=\"q8lr7\"><font size=\"3\">6.</font><span style=\"font-size: 1em;\">我们来看下今天的主角</span><span style=\"font-size: 1em;\">Ingress</span></h2><div><img src=\"http://qiniu-picture.xiyanit.cn/Fup-hpgwEcCBnt7DTafq0RSBU2Go\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div><p><font size=\"3\">虽然k8s集群内部署的pod、service都有自己的IP，但是却无法提供外网访问，以前我们可以通过监听NodePort的方式暴露服务，但是这种方式并不灵活，生产环境也不建议使用；<br>Ingresss是k8s集群中的一个API资源对象，相当于一个集群网关，我们可以自定义路由规则来转发、管理、暴露服务(一组pod)，比较灵活，生产环境建议使用这种方式；<br>Ingress不是kubernetes内置的（安装好k8s之后，并没有安装ingress），ingress需要单独安装，而且有多种类型Google Cloud Load Balancer，Nginx，Contour，Istio等等，我们这里选择官方维护的Ingress Nginx；</font></p><p><font size=\"3\">部署&nbsp; &nbsp;Ingress Nginx<br>文档：https://github.com/kubernetes/ingress-nginx </font><br>ingress-nginx是使用NGINX作为反向代理和负载均衡器的Kubernetes的Ingress控制器；<br></p><pre type=\"Bash\"><code>kubectl apply -f https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/kubernetes/i</span>ngress-nginx<span class=\"hljs-regexp\">/controller-v0.44.0/</span>deploy<span class=\"hljs-regexp\">/static/</span>provider<span class=\"hljs-regexp\">/baremetal/</span>deploy.yaml</code></pre><p><br></p><p>远程需要翻墙，你可以去我百度云</p><p>链接：https://pan.baidu.com/s/1gqyMGG0ZqVv1qX-ePgeCPQ <br>提取码：a90e <br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p><font size=\"3\"><br>添加一个配置项：</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fmmw3DvN90O5mvpuePrZ6COzokVy\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">应用：</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f ingress-controller.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvbfITDCcjAE-tRlC8hm0BOAHopb\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">查看Ingress的状态</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> service </span>-n ingress-nginx</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> deploy -n ingress-nginx</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> pods -n ingress-nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FifDB5tdlw6x68RAQMLTwWhRiKpk\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><font size=\"3\">例子 暴露Nginx应用的Ingress规则<font color=\"#c24f4a\">这里很多种规则具体看你需求</font></font></p><p><br></p><h2 id=\"jgxsh\"><font color=\"#c24f4a\">查看当前ingress-nginx部署在哪台服务器上</font></h2><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pods -n ingress-nginx -o wide;</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FvIjSmDpqx20tfrfM6pw_Jh-S_on\" style=\"max-width:100%;\"><br></p><p><br></p><p><span style=\"font-size: 1em;\">一个最小的ingress示例</span><font size=\"3\">：</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">test-ingress</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"hljs-string\">/</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/testpath</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">test</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><blockquote><p>ingress 规则<br>每一个HTTP规则包含以下信息：<br><br>一个可选的host。在本例中没有host,因此，该规则适用于通过指定的IP地址进行的所有入站HTTP通信。如果提供一个host(例如，foo.bar.com)，这个规则是适用于这一个host<br>一个paths（例如 /testpath）的列表。每一个path都有与之关联的serviceName和servicePort,在负载均衡器将流量导向所引用的服务之前，主机和路径必须匹配传入请求的内容<br>后端是服务和端口名称的组合。对与规则的主机和路径匹配的入口的HTTP(和HTTPS)请求将发送到列出的后端。<br>默认后端通常配置在一个Ingress控制器中，该控制器将服务于任何与规范中的路径不匹配的请求。（404页面）<br></p></blockquote><p><font size=\"3\">ingress的类型<br>单service的ingress<br>现有的Kubernetes概念允许您公开单个服务。您还可以通过指定一个没有规则的默认后端来对一个入口执行此操作。</font><br><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">test-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">backend:</span>\n    <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">testsvc</span>\n    <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"3\">通过kubectl apply -f &lt;文件名&gt;创建后，你可以看到：</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> ingress test-ingress</code></pre><p><br></p><p><font size=\"4\" color=\"#7b5ba1\">浏览器访问192.168.181.139</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhtcF8T4tzkUK_S2Q5iL3WS1n4Vn\" style=\"max-width:100%;\" width=\"523\" height=\"188.98\"><font size=\"4\" color=\"#7b5ba1\"><br></font></p><p><br></p><p>其中107.178.254.228是入口控制器为满足该入口而分配的IP。<br><img src=\"http://qiniu-picture.xiyanit.cn/FmeYuEPr8oaIp7mSOAe1jjnpW-rv\" style=\"max-width:100%;\"><br></p><p>简单的扇出<br>根据所请求的HTTP URI，扇出配置将流量从单个IP地址路由到多个服务。一个入口允许您将负载平衡器的数量保持到最小。例如，设置如下:<br><br><img src=\"http://qiniu-picture.xiyanit.cn/FhF7PV9I0jDEo8QoEVJTqDSTLdpF\" style=\"max-width:100%;\"><br>定义的ingress如下：<br><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">simple-fanout-example</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"hljs-string\">/</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">foo.bar.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/foo</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">4200</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/bar</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service2</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">8080</span></code></pre><p><font size=\"3\">通过kubectl apply -f &lt;文件名&gt;创建后：</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">describe</span> ingress simple-fanout-<span class=\"hljs-built_in\">example</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnwXgaAmTQvy9pjA0F335Q8Nyf6H\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">基于名称的虚拟主机<br>基于名称的虚拟主机支持将HTTP流量路由到同一IP地址的多个主机名。</font><br><img src=\"http://qiniu-picture.xiyanit.cn/FiW-GMRNYUfH0w9MbFaXxkacs-Wv\" style=\"max-width:100%;\"><br><font size=\"3\">下面的ingress告诉后台负载均衡器根据主机头路由请求。</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">name-virtual-host-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">foo.bar.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">bar.foo.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service2</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"3\">如果您创建一个没有在规则中定义任何主机的Ingress资源，那么可以匹配到Ingress控制器IP地址的任何web流量，而不需要基于名称的虚拟主机。例如，下面的Ingress资源将把first.bar.com请求的流量路由到service1, second.foo.com路由到service2，将任何没有在request中定义主机名(即没有显示请求头)的流量路由到service3。</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">name-virtual-host-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">first.bar.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">second.foo.com</span>\n    <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service2</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service3</span>\n          <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"4\"><b>TLS</b></font><br><font size=\"3\">您可以通过指定包含TLS私钥和证书的秘密来保护ingress。目前，入口只支持一个TLS端口443，并假设TLS终端。如果一个入口中的TLS配置部分指定了不同的主机，那么它们将根据通过SNI TLS扩展指定的主机名在同一个端口上进行多路复用(前提是入口控制器支持SNI)。TLS密钥必须包含名为TLS的密钥。crt和tls。包含用于TLS的证书和私钥的密钥，例如:</font></p><pre type=\"Bash\"><code>apiVersion: v1\nkind:<span class=\"hljs-built_in\"> Secret\n</span>metadata:\n  name: testsecret-tls\n  namespace:<span class=\"hljs-built_in\"> default\n</span>data:\n  tls.crt: base64 encoded cert\n  tls.key: base64 encoded key\ntype: kubernetes.io/tls</code></pre><p><font size=\"3\">在一个Ingress中引用这个secret将告诉Ingress控制器使用TLS保护从客户机到负载均衡器的通道。您需要确保您创建的TLS secret来自一个包含sslexample.foo.com CN的证书。</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tls-example-ingress</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">tls:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">hosts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sslexample.foo.com</span>\n    <span class=\"hljs-attr\">secretName:</span> <span class=\"hljs-string\">testsecret-tls</span>\n  <span class=\"hljs-attr\">rules:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">sslexample.foo.com</span>\n      <span class=\"hljs-attr\">http:</span>\n        <span class=\"hljs-attr\">paths:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span>\n          <span class=\"hljs-attr\">backend:</span>\n            <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">service1</span>\n            <span class=\"hljs-attr\">servicePort:</span> <span class=\"hljs-number\">80</span></code></pre><p><font size=\"4\"><b>Loadbalancing</b></font><br><font size=\"3\">一个ingress controller 通过一些应用于所有入口的负载平衡策略设置来引导，例如负载平衡算法、后端权重方案等。更高级的负载平衡概念(例如持久会话、动态权重)还没有通过ingress公开。同样值得注意的是，尽管健康检查不是直接通过入口暴露的，但是在Kubernetes中也存在类似的概念，比如就绪探测，它允许您实现相同的最终结果。</font></p>','1','8','1','1','1','2021-02-07 15:27:31','2021-03-09 18:05:40'),(49,'http://qiniu-picture.xiyanit.cn/FikJG5j-tIsG4ISFpIAoFVSrrtza','Kubernetes架构及和核心组件介绍','Kubernetes,','Kubernetes架构及和核心组件介绍',6,0,0,'1',1,' <p><img src=\"http://qiniu-picture.xiyanit.cn/FnOHYBSEBUVTjCescYRMzgYl7PdU\" style=\"max-width:100%;\"><br></p><blockquote><p><font size=\"3\">API server是所有请求的唯一入口；<br>api server管理所有的事务，并把信息记录到etcd数据库中，etcd有一个自动服务发现的特性机制，etcd会搭建有三个节点的集群，实现三副本；<br>scheduler 调度器用来调度资源，查看业务节点的资源情况，确定在哪个node上创建pod，把指令告知给api server；<br>控制管理器controller-manager管理pod；<br>pod可以分为有状态和无状态的pod，一个pod里最好只放一个容器；<br>api server把任务下发给业务节点的kubelet去执行；<br>客户访问通过kube-proxy去访问pod；<br>pod下面的不一定是docker，还有别的容器；<br>一般pod中只包含一个容器，除了一种情况除外，那就是elk，elk会在pod内多放一个logstash去收集日志；<br>kubernetes各个组件及功能</font><br></p></blockquote><p><br></p><p><h2 id=\"c49ug\">1、master组件</h2></p><pre type=\"Bash\"><code>API server是所有请求的唯一入口；\napi server管理所有的事务，并把信息记录到etcd数据库中，etcd有一个自动服务发现的特性机制，etcd会搭建有三个节点的集群，实现三副本；<span class=\"hljs-built_in\">\nscheduler </span>调度器用来调度资源，查看业务节点的资源情况，确定在哪个node上创建pod，把指令告知给api server；\n控制管理器controller-manager管理pod；\npod可以分为有状态和无状态的pod，一个pod里最好只放一个容器；\napi server把任务下发给业务节点的kubelet去执行；\n客户访问通过kube-proxy去访问pod；\npod下面的不一定是docker，还有别的容器；\n一般pod中只包含一个容器，除了一种情况除外，那就是elk，elk会在pod内多放一个logstash去收集日志；\nkubernetes各个组件及功能</code></pre><p><br></p><p><h2 id=\"uzczi\">2、node组件</h2></p><pre type=\"Bash\"><code>kubelet\nkubelet时master在node节点上的代理agent，管理本node运行容器的生命周期，比如创建容器、pod挂载数据卷、下载sercet、获取容器和节点状态等工作，kubelet将每个pod转换成一组容器；\nkube-proxy\n在node节点上实现pod的网络代理，维护网络规则和四层的负载均衡工作；\ndocker\n容器引擎，运行容器；\nkubernetes核心概念\npod\n最小部署单元；\n一组容器的集合；\n一个pod中的容器共享网络命名空间；\npod是短暂的；\ncontrollers\nreplicaset：确保预期的pod副本数量；\ndeployment：无状态应用部署，比如nginx、apache，一定程度上的增减不会影响客户体验；\nstatefulset：有状态应用部署，是独一无二型的，会影响到客户的体验；\ndaemonset：确保所有node运行同一个pod，确保pod在统一命名空间；\njob：一次性任务；\ncronjob：定时任务；<span class=\"hljs-built_in\">\nservice\n</span>防止pod失联；\n定义一组pod的访问策略；\n确保了每个pod的独立性和安全性；\nstorage\nvolumes\npersistent volumes\npollcies策略<span class=\"hljs-built_in\">\nresource </span>quotas\n其他\nlabel：标签，附加到某个资源上，用户关联对象、查询和筛选；\nnamespaces：命名空间，将对象从逻辑上隔离；\nannotations：注释；\n\nKubectl：k8s提供的终端控制命令；\nKubeadm：可以用来初始化或加入一个k8s集群；</code></pre>',' <p><img src=\"http://qiniu-picture.xiyanit.cn/FnOHYBSEBUVTjCescYRMzgYl7PdU\" style=\"max-width:100%;\"><br></p><blockquote><p><font size=\"3\">API server是所有请求的唯一入口；<br>api server管理所有的事务，并把信息记录到etcd数据库中，etcd有一个自动服务发现的特性机制，etcd会搭建有三个节点的集群，实现三副本；<br>scheduler 调度器用来调度资源，查看业务节点的资源情况，确定在哪个node上创建pod，把指令告知给api server；<br>控制管理器controller-manager管理pod；<br>pod可以分为有状态和无状态的pod，一个pod里最好只放一个容器；<br>api server把任务下发给业务节点的kubelet去执行；<br>客户访问通过kube-proxy去访问pod；<br>pod下面的不一定是docker，还有别的容器；<br>一般pod中只包含一个容器，除了一种情况除外，那就是elk，elk会在pod内多放一个logstash去收集日志；<br>kubernetes各个组件及功能</font><br></p></blockquote><p><br></p><p><h2 id=\"c49ug\">1、master组件</h2></p><pre type=\"Bash\"><code>API server是所有请求的唯一入口；\napi server管理所有的事务，并把信息记录到etcd数据库中，etcd有一个自动服务发现的特性机制，etcd会搭建有三个节点的集群，实现三副本；<span class=\"hljs-built_in\">\nscheduler </span>调度器用来调度资源，查看业务节点的资源情况，确定在哪个node上创建pod，把指令告知给api server；\n控制管理器controller-manager管理pod；\npod可以分为有状态和无状态的pod，一个pod里最好只放一个容器；\napi server把任务下发给业务节点的kubelet去执行；\n客户访问通过kube-proxy去访问pod；\npod下面的不一定是docker，还有别的容器；\n一般pod中只包含一个容器，除了一种情况除外，那就是elk，elk会在pod内多放一个logstash去收集日志；\nkubernetes各个组件及功能</code></pre><p><br></p><p><h2 id=\"uzczi\">2、node组件</h2></p><pre type=\"Bash\"><code>kubelet\nkubelet时master在node节点上的代理agent，管理本node运行容器的生命周期，比如创建容器、pod挂载数据卷、下载sercet、获取容器和节点状态等工作，kubelet将每个pod转换成一组容器；\nkube-proxy\n在node节点上实现pod的网络代理，维护网络规则和四层的负载均衡工作；\ndocker\n容器引擎，运行容器；\nkubernetes核心概念\npod\n最小部署单元；\n一组容器的集合；\n一个pod中的容器共享网络命名空间；\npod是短暂的；\ncontrollers\nreplicaset：确保预期的pod副本数量；\ndeployment：无状态应用部署，比如nginx、apache，一定程度上的增减不会影响客户体验；\nstatefulset：有状态应用部署，是独一无二型的，会影响到客户的体验；\ndaemonset：确保所有node运行同一个pod，确保pod在统一命名空间；\njob：一次性任务；\ncronjob：定时任务；<span class=\"hljs-built_in\">\nservice\n</span>防止pod失联；\n定义一组pod的访问策略；\n确保了每个pod的独立性和安全性；\nstorage\nvolumes\npersistent volumes\npollcies策略<span class=\"hljs-built_in\">\nresource </span>quotas\n其他\nlabel：标签，附加到某个资源上，用户关联对象、查询和筛选；\nnamespaces：命名空间，将对象从逻辑上隔离；\nannotations：注释；\n\nKubectl：k8s提供的终端控制命令；\nKubeadm：可以用来初始化或加入一个k8s集群；</code></pre>','1','8','1','1','1','2021-02-07 11:34:57','2021-02-07 15:34:57'),(50,'http://qiniu-picture.xiyanit.cn/FjYgAkrMCpOQGeKuhisFKWhMEYvz','Harbor镜像仓库搭建','Harbor,Docker,','Harbor镜像仓库搭建',17,0,0,'1',1,'<h2 id=\"54eu6\">一、Harbor安装环境要求</h2><font size=\"3\"><br></font><h2><font size=\"3\" id=\"yl9ol\">硬件环境：</font></h2><font size=\"3\"><br>1）CPU 2核以上，最好4核以上<br><br>2）内存4G以上，最好8G以上<br><br>3）硬盘空间至少40G，最好160G以上<br><br>软件环境：<br><br>1）docker v17.06以上版本<br><br>2）docker-compose v1.18.0以上版本<br><br>3）Openssl 更新到最新版（一般情况下，这个可忽略）<br><br>说明：本例中服务器操作系统为CentOS7.4</font><br><h2>二、Harbor下载</h2><pre type=\"Bash\"><code>wget https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/goharbor/</span>harbor<span class=\"hljs-regexp\">/releases/</span>download<span class=\"hljs-regexp\">/v2.0.6/</span>harbor-offline-installer-v2.0.6.tgz</code></pre><h2 id=\"aqkc9\">三、解压安装文件</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-zxvf</span> <span class=\"hljs-selector-tag\">harbor-offline-installer-v2</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.6</span><span class=\"hljs-selector-class\">.tgz</span>\n<span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-zxvf</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.v2</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.6</span><span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span></code></pre><p><br></p><h2 id=\"kmf4a\">四、配置Harbor</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">mv</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.yml</span><span class=\"hljs-selector-class\">.tmpl</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.yml</span></code></pre><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">vim</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.yml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FsHb5TDKc5dKWvoGsc1L6rG8l3G0\" style=\"max-width:100%;\"><br></p><h2>五、Docker compose安装</h2><pre type=\"Bash\"><code>curl -L <span class=\"hljs-string\">\"https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)\"</span> -o <span class=\"hljs-regexp\">/usr/</span>sbin<span class=\"hljs-regexp\">/docker-compose &amp;&amp; chmod +x /u</span>sr<span class=\"hljs-regexp\">/sbin/</span>docker-compose</code></pre><h2><br></h2><h2>六、启动Harbor</h2><pre type=\"Bash\"><code>./<span class=\"hljs-keyword\">install</span>.sh</code></pre><p><br></p><p><font size=\"4\" color=\"#c24f4a\">若</font><font color=\"#c24f4a\" size=\"4\">出现防火墙的问题重启docker即可</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fngq0X1CBoshSzWbyZtHjmDo-g-O\" style=\"max-width:100%;\"><font color=\"#c24f4a\" size=\"4\"><br></font></p><p><font size=\"4\">出现如下页面就是成功了</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiRpXF319bga1-1fHWD6XAzs6zyE\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><h2>七、ip:端口进行浏览器访问 默认用户名密码 admin/Harbor12345</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FpBy3d8YoE1r2DsNaoYR5zNvK8s8\" style=\"max-width:100%;\"><br></p><h2>八、测试上传镜像到私服仓库</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\">#由于我的是http协议的上传镜像的时候会报错，https可以忽略这条步骤，我这里需要写入本地私服仓库地址才可以解决该问题</span>\n<span class=\"hljs-keyword\">echo</span> \'{</code><code>\"registry-mirrors\": [\"https://zz3sblpi.mirror.aliyuncs.com\"],\n\"insecure-registries\":[\"128.14.163.18:9099\"]<br></code><code> }\' &gt; <span class=\"hljs-string\">/etc/docker/daemon.json</span></code><code>\n<span class=\"hljs-comment\">#重启docker</span>\nsystemctl restart docker</code><code>\n<span class=\"hljs-comment\">#重启Harbor\\</span>\n<span class=\"hljs-string\">./install.sh</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FijaLJ9iVsIk_h9kpX0V6Gaj6Wh2\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code><br></code><code>docker tag kubernetesui/dashboard:v2<span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.0</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.128</span>:<span class=\"hljs-number\">8090</span>/yoostar/dashboard:v1\n\ndocker push <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.128</span>:<span class=\"hljs-number\">8090</span>/yoostar/dashboard:v1</code><code><br></code><code>docker login 192.168.181.128:8090   #认证成功就可以直接拉取镜像了</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fkwg6L7V3CncYLRfUYQjpX_oPzvi\" style=\"max-width:100%;\"><br></p>','<h2 id=\"54eu6\">一、Harbor安装环境要求</h2><font size=\"3\"><br></font><h2><font size=\"3\" id=\"yl9ol\">硬件环境：</font></h2><font size=\"3\"><br>1）CPU 2核以上，最好4核以上<br><br>2）内存4G以上，最好8G以上<br><br>3）硬盘空间至少40G，最好160G以上<br><br>软件环境：<br><br>1）docker v17.06以上版本<br><br>2）docker-compose v1.18.0以上版本<br><br>3）Openssl 更新到最新版（一般情况下，这个可忽略）<br><br>说明：本例中服务器操作系统为CentOS7.4</font><br><h2>二、Harbor下载</h2><pre type=\"Bash\"><code>wget https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/goharbor/</span>harbor<span class=\"hljs-regexp\">/releases/</span>download<span class=\"hljs-regexp\">/v2.0.6/</span>harbor-offline-installer-v2.0.6.tgz</code></pre><h2 id=\"aqkc9\">三、解压安装文件</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-zxvf</span> <span class=\"hljs-selector-tag\">harbor-offline-installer-v2</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.6</span><span class=\"hljs-selector-class\">.tgz</span>\n<span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-zxvf</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.v2</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.6</span><span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span></code></pre><p><br></p><h2 id=\"kmf4a\">四、配置Harbor</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">mv</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.yml</span><span class=\"hljs-selector-class\">.tmpl</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.yml</span></code></pre><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">vim</span> <span class=\"hljs-selector-tag\">harbor</span><span class=\"hljs-selector-class\">.yml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FsHb5TDKc5dKWvoGsc1L6rG8l3G0\" style=\"max-width:100%;\"><br></p><h2>五、Docker compose安装</h2><pre type=\"Bash\"><code>curl -L <span class=\"hljs-string\">\"https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)\"</span> -o <span class=\"hljs-regexp\">/usr/</span>sbin<span class=\"hljs-regexp\">/docker-compose &amp;&amp; chmod +x /u</span>sr<span class=\"hljs-regexp\">/sbin/</span>docker-compose</code></pre><h2><br></h2><h2>六、启动Harbor</h2><pre type=\"Bash\"><code>./<span class=\"hljs-keyword\">install</span>.sh</code></pre><p><br></p><p><font size=\"4\" color=\"#c24f4a\">若</font><font color=\"#c24f4a\" size=\"4\">出现防火墙的问题重启docker即可</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fngq0X1CBoshSzWbyZtHjmDo-g-O\" style=\"max-width:100%;\"><font color=\"#c24f4a\" size=\"4\"><br></font></p><p><font size=\"4\">出现如下页面就是成功了</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiRpXF319bga1-1fHWD6XAzs6zyE\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><h2>七、ip:端口进行浏览器访问 默认用户名密码 admin/Harbor12345</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FpBy3d8YoE1r2DsNaoYR5zNvK8s8\" style=\"max-width:100%;\"><br></p><h2>八、测试上传镜像到私服仓库</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\">#由于我的是http协议的上传镜像的时候会报错，https可以忽略这条步骤，我这里需要写入本地私服仓库地址才可以解决该问题</span>\n<span class=\"hljs-keyword\">echo</span> \'{</code><code>\"registry-mirrors\": [\"https://zz3sblpi.mirror.aliyuncs.com\"],\n\"insecure-registries\":[\"128.14.163.18:9099\"]<br></code><code> }\' &gt; <span class=\"hljs-string\">/etc/docker/daemon.json</span></code><code>\n<span class=\"hljs-comment\">#重启docker</span>\nsystemctl restart docker</code><code>\n<span class=\"hljs-comment\">#重启Harbor\\</span>\n<span class=\"hljs-string\">./install.sh</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FijaLJ9iVsIk_h9kpX0V6Gaj6Wh2\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code><br></code><code>docker tag kubernetesui/dashboard:v2<span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.0</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.128</span>:<span class=\"hljs-number\">8090</span>/yoostar/dashboard:v1\n\ndocker push <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.128</span>:<span class=\"hljs-number\">8090</span>/yoostar/dashboard:v1</code><code><br></code><code>docker login 192.168.181.128:8090   #认证成功就可以直接拉取镜像了</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fkwg6L7V3CncYLRfUYQjpX_oPzvi\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-02-12 14:29:25','2021-02-16 15:18:15'),(51,'http://qiniu-picture.xiyanit.cn/Fs2hGcflDFfkcZPQ6n9fszlh1UoG','idea发布镜像到Harbor私服','Harbor,','idea发布镜像到Harbor私服',8,0,0,'1',1,'<h1 id=\"ykm4a\">1.xml配置</h1><pre type=\"Bash\"><code><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">skipTests</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">skipTests</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.fabric8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.34.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n                <span class=\"hljs-comment\">&lt;!--全局配置--&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                    <span class=\"hljs-comment\">&lt;!--配置远程docker守护进程url--&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerHost</span>&gt;</span>http://192.168.181.128:2375<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerHost</span>&gt;</span>\n                    <span class=\"hljs-comment\">&lt;!--认证配置,用于私有registry认证--&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">authConfig</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>Harbor12345<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">authConfig</span>&gt;</span>\n                    <span class=\"hljs-comment\">&lt;!--镜像相关配置,支持多镜像--&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">images</span>&gt;</span>\n                        <span class=\"hljs-comment\">&lt;!-- 单个镜像配置 --&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span>&gt;</span>\n                            <span class=\"hljs-comment\">&lt;!--镜像名(含版本号)--&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>yoostar/$</span><span class=\"hljs-template-variable\">{project.name}</span><span class=\"xml\">:$</span><span class=\"hljs-template-variable\">{project.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span>\n                            <span class=\"hljs-comment\">&lt;!--registry地址,用于推送,拉取镜像--&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">registry</span>&gt;</span>192.168.181.128:8088<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">registry</span>&gt;</span>\n                            <span class=\"hljs-comment\">&lt;!--镜像build相关配置--&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n                                <span class=\"hljs-comment\">&lt;!--使用dockerFile文件--&gt;</span>\n                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerFile</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{project.basedir}</span><span class=\"xml\">/Dockerfile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerFile</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">images</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></span></code></pre><h1 id=\"07gkg\">2.docker进行登陆认证</h1><pre type=\"Bash\"><code>docker login <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.8088</span></code></pre><p><br></p><h1 id=\"jwfek\">3.配置docker环境&nbsp;</h1><h2 id=\"cvl3u\">3.1通过&nbsp;<b>systemctl status docker</b>&nbsp;查找docker.service文件位置：</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">systemctl status docker</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Frn23zNsnB-MTRJFNfwpnqwmPRKu\" style=\"max-width:100%;\"><br></p><h2 id=\"7kvzl\">3.2修改配置</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\">#ExecStart=/usr/bin/dockerd</span>\nExecStart=<span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/dockerd -H tcp:/</span><span class=\"hljs-regexp\">/0.0.0.0:2375 -H unix:/</span><span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock</span></code></pre><p><br></p><h2 id=\"95g68\">3.3重启Docker服务：</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">restart docker.service</span></code></pre><h2 id=\"xmyyd\"><br></h2><h2 id=\"xmyyd\">3.4安装docker插件并指定docker环境</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FkYpzv0R0BLQIWpFAYK5RxxxQnBI\" style=\"max-width:100%;\"><br></p><h1 id=\"d8ypr\">4.编写<span style=\"font-size: 1em;\">Dockerfile</span></h1><pre type=\"Bash\"><code>###指定java8环境镜像\nFROM java:<span class=\"hljs-number\">8</span>\n###复制文件到容器app-springboot\nADD target/admin-server<span class=\"hljs-number\">-1.0</span>-SNAPSHOT.jar /admin-server.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\">8098</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/admin-server.jar\"</span>]</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FgAXc6zXv5XXfaLgVUYZfSju6ZGN\" style=\"max-width:100%;\"><br></p><h1 id=\"ybsrb\">5.打包到私服 可以通过二种方式</h1><h2 id=\"j1wq6\">第一种</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FkyCjm5gyZdPYkErXZkbefsdgm4E\" style=\"max-width:100%;\"><br></p><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">mvn </span>clean package docker:<span class=\"hljs-keyword\">build </span>&amp; <span class=\"hljs-keyword\">mvn </span>docker:<span class=\"hljs-keyword\">push</span></code></pre><p><br></p><h2>第二种</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FlrFRf_cATHx1YMxvl7vjQh9Ateq\" style=\"max-width:100%;\"><br></p>','<h1 id=\"ykm4a\">1.xml配置</h1><pre type=\"Bash\"><code><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">skipTests</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">skipTests</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.fabric8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.34.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n                <span class=\"hljs-comment\">&lt;!--全局配置--&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                    <span class=\"hljs-comment\">&lt;!--配置远程docker守护进程url--&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerHost</span>&gt;</span>http://192.168.181.128:2375<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerHost</span>&gt;</span>\n                    <span class=\"hljs-comment\">&lt;!--认证配置,用于私有registry认证--&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">authConfig</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>Harbor12345<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">authConfig</span>&gt;</span>\n                    <span class=\"hljs-comment\">&lt;!--镜像相关配置,支持多镜像--&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">images</span>&gt;</span>\n                        <span class=\"hljs-comment\">&lt;!-- 单个镜像配置 --&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span>&gt;</span>\n                            <span class=\"hljs-comment\">&lt;!--镜像名(含版本号)--&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>yoostar/$</span><span class=\"hljs-template-variable\">{project.name}</span><span class=\"xml\">:$</span><span class=\"hljs-template-variable\">{project.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span>\n                            <span class=\"hljs-comment\">&lt;!--registry地址,用于推送,拉取镜像--&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">registry</span>&gt;</span>192.168.181.128:8088<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">registry</span>&gt;</span>\n                            <span class=\"hljs-comment\">&lt;!--镜像build相关配置--&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n                                <span class=\"hljs-comment\">&lt;!--使用dockerFile文件--&gt;</span>\n                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerFile</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{project.basedir}</span><span class=\"xml\">/Dockerfile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerFile</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">images</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></span></code></pre><h1 id=\"07gkg\">2.docker进行登陆认证</h1><pre type=\"Bash\"><code>docker login <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.8088</span></code></pre><p><br></p><h1 id=\"jwfek\">3.配置docker环境&nbsp;</h1><h2 id=\"cvl3u\">3.1通过&nbsp;<b>systemctl status docker</b>&nbsp;查找docker.service文件位置：</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">systemctl status docker</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Frn23zNsnB-MTRJFNfwpnqwmPRKu\" style=\"max-width:100%;\"><br></p><h2 id=\"7kvzl\">3.2修改配置</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\">#ExecStart=/usr/bin/dockerd</span>\nExecStart=<span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/dockerd -H tcp:/</span><span class=\"hljs-regexp\">/0.0.0.0:2375 -H unix:/</span><span class=\"hljs-regexp\">/var/</span>run<span class=\"hljs-regexp\">/docker.sock</span></code></pre><p><br></p><h2 id=\"95g68\">3.3重启Docker服务：</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">restart docker.service</span></code></pre><h2 id=\"xmyyd\"><br></h2><h2 id=\"xmyyd\">3.4安装docker插件并指定docker环境</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FkYpzv0R0BLQIWpFAYK5RxxxQnBI\" style=\"max-width:100%;\"><br></p><h1 id=\"d8ypr\">4.编写<span style=\"font-size: 1em;\">Dockerfile</span></h1><pre type=\"Bash\"><code>###指定java8环境镜像\nFROM java:<span class=\"hljs-number\">8</span>\n###复制文件到容器app-springboot\nADD target/admin-server<span class=\"hljs-number\">-1.0</span>-SNAPSHOT.jar /admin-server.jar\n###声明启动端口号\nEXPOSE <span class=\"hljs-number\">8098</span>\n###配置容器启动后执行的命令\nENTRYPOINT [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/admin-server.jar\"</span>]</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FgAXc6zXv5XXfaLgVUYZfSju6ZGN\" style=\"max-width:100%;\"><br></p><h1 id=\"ybsrb\">5.打包到私服 可以通过二种方式</h1><h2 id=\"j1wq6\">第一种</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FkyCjm5gyZdPYkErXZkbefsdgm4E\" style=\"max-width:100%;\"><br></p><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">mvn </span>clean package docker:<span class=\"hljs-keyword\">build </span>&amp; <span class=\"hljs-keyword\">mvn </span>docker:<span class=\"hljs-keyword\">push</span></code></pre><p><br></p><h2>第二种</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FlrFRf_cATHx1YMxvl7vjQh9Ateq\" style=\"max-width:100%;\"><br></p>','1','8','1','1','1','2021-02-16 17:15:52','2021-02-16 17:49:45'),(52,'http://qiniu-picture.xiyanit.cn/Fop8yExlDnCHafi95D5R0Pm4wtjv','k8s集群 (二进制安装方式)','Linux,K8S,','k8s集群 (二进制安装方式)',40,0,0,'1',1,'<h2>1.修改主机名</h2><p><br><font size=\"4\">k8s-master:</font><br><br></p><pre><code>hostnamectl set-hostname m1</code></pre><p><br></p><p><font size=\"4\">k8s-node1:</font><br><br></p><pre><code>hostnamectl set-hostname n1</code></pre><p><br></p><p><b><font size=\"4\">以下都是二台服务器同时操作请按图片操作打开键盘模式</font></b></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fox1JcLu3VQBEG28wzVNlT-kvIDX\"><b><br></b></p><h2>2.防火墙关闭</h2><pre><code>systemctl stop firewalld\nsystemctl disable firewalld</code></pre><p><br></p><h2>3.关闭selinux</h2><pre><code>setenforce 0 # 临时关闭\nsed -i \'s/SELINUX=enforcing/SELINUX=disabled/g\' /etc/selinux/config # 永久关闭</code></pre><p><br></p><h2>4.关闭swap</h2><pre><code>swapoff -a # 临时关闭；关闭swap主要是为了性能考虑\nsed -ri \'s/.*swap.*/#&amp;/\' /etc/fstab</code></pre><p><font size=\"4\">free # 可以通过这个命令查看swap是否关闭了&nbsp;</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpawE4ilhcLt6GRGek7-K9qab9sH\"><br></p><h2><br></h2><p><b><font size=\"4\">时间同步</font></b></p><pre><code>yum install ntpdate -y</code><code>\nntpdate time.windows.com</code></pre><p><br></p><h2>5.将桥接的IPv4流量传递到iptables的链</h2><pre><code>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF</code></pre><p><br></p><pre type=\"Bash\"><code>sysctl <span class=\"hljs-comment\">--system</span></code></pre><p><br></p><h2>6.添加主机名与IP对应的关系 ( master上操作 )</h2><pre><code>vim /etc/hosts</code></pre><p><br></p><pre><code>192.168.181.128 k8s-master\n192.168.181.129 k8s-node-1</code></pre><p><br></p><p><br></p><h2>7.准备 cfssl 证书生成工具 ( master上操作 )</h2><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点</p><pre><code>wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</code><code><br></code><code>wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</code><code><br></code><code>wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</code><code><br></code><code>chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</code><code><br></code><code>mv cfssl_linux-amd64 /usr/local/bin/cfssl</code><code><br></code><code>mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</code><code><br></code><code>mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</code><code><br></code><code>chmod +x /usr/bin/cfssl*<br></code></pre><h3><br></h3><h3>7.1生成 Etcd 证书 （1）自签证书颁发机构（CA） 创建工作目录：</h3><pre><code>mkdir -p ~/TLS/{etcd,k8s}\n\ncd TLS/etcd</code></pre><h1><br></h1><h3>7.2自签 CA</h3><pre type=\"Bash\"><code>cat &gt; ca-<span class=\"hljs-built_in\">config</span>.<span class=\"hljs-keyword\">json </span>&lt;&lt; EOF\n{\n  <span class=\"hljs-string\">\"signing\"</span>: {\n    <span class=\"hljs-string\">\"default\"</span>: {\n      <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>\n    },\n    <span class=\"hljs-string\">\"profiles\"</span>: {\n      <span class=\"hljs-string\">\"www\"</span>: {\n         <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>,\n         <span class=\"hljs-string\">\"usages\"</span>: [\n            <span class=\"hljs-string\">\"signing\"</span>,\n            <span class=\"hljs-string\">\"key encipherment\"</span>,\n            <span class=\"hljs-string\">\"server auth\"</span>,\n            <span class=\"hljs-string\">\"client auth\"</span>\n        ]\n      }\n    }\n  }\n}\nEOF</code></pre><h1><br></h1><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; <span class=\"hljs-keyword\">ca</span>-csr.json &lt;&lt; EOF\n{\n    <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"etcd CA\"</span>,\n    <span class=\"hljs-string\">\"key\"</span>: {\n        <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n        <span class=\"hljs-string\">\"size\"</span>: 2048\n    },\n    <span class=\"hljs-string\">\"names\"</span>: [\n        {\n            <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n            <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>,\n            <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>\n        }\n    ]\n}\nEOF</code></pre><p><br></p><h3>7.3生成证书：</h3><pre><code>cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</code><code><br></code><code><br></code><code>ls *pem<br></code></pre><h3><br></h3><h3>7.4使用自签 CA 签发 Etcd HTTPS 证书 创建证书申请文件：(修改对应的master和node的IP地址)</h3><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-keyword\">server</span>-csr.json &lt;&lt; EOF\n{\n    \"CN\": \"etcd\",\n    \"hosts\": [\n    \"192.168.31.71\",\n    \"192.168.31.72\",\n    \"192.168.31.73\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": <span class=\"hljs-number\">2048</span>\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\"\n        }\n    ]\n}\nEOF</code></pre><p><br></p><h1><br></h1><h3>7.5注：上述文件 hosts 字段中 IP 为所有 etcd 节点的集群内部通信 IP，一个都不能少！为了 方便后期扩容可以多写几个预留的 IP。 生成证书：</h3><pre><code>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server ls server*pem</code></pre><h1><br></h1><h2>8.从 Github 下载二进制文件 下载地址：</h2><p><font size=\"4\"><a href=\"https://github.com/etcd-io/etcd/releases\" target=\"_blank\">https://github.com/etcd-io/etcd/releases</a><br></font></p><p><font size=\"4\">git下载太慢，我下载保持在了百度云</font></p><p><font size=\"4\">链接：https://pan.baidu.com/s/1xGbuTDcWy6wmbqLvMxWsRQ<br>提取码：ob9k<br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><p><br></p><h3>9.部署 Etcd 集群 以下在节点 1 上操作，为简化操作，待会将节点 1 生成的所有文件拷贝到节点 2 和节点 3. （1）创建工作目录并解压二进制包</h3><pre><code>mkdir /opt/etcd/{bin,cfg,ssl} -p</code><code>\ntar zxvf etcd-v3.4.14-linux-amd64.tar.gz</code><code>\nmv etcd-v3.4.14-linux-amd64/{etcd,etcdctl} /opt/etcd/bin/</code></pre><h1><br></h1><h3>10.创建etcd.conf （修改对应的master的ip地址）</h3><p><br></p><pre type=\"Bash\"><code>cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF\n<span class=\"hljs-comment\">#[Member]</span>\nETCD_NAME=<span class=\"hljs-string\">\"etcd-1\"</span>\nETCD_DATA_DIR=<span class=\"hljs-string\">\"/var/lib/etcd/default.etcd\"</span>\nETCD_LISTEN_PEER_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2380\"</span>\nETCD_LISTEN_CLIENT_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2379\"</span>\n<span class=\"hljs-comment\">#[Clustering]</span>\nETCD_INITIAL_ADVERTISE_PEER_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2380\"</span>\nETCD_ADVERTISE_CLIENT_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2379\"</span>\nETCD_INITIAL_CLUSTER=<span class=\"hljs-string\">\"etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380\"</span>\nETCD_INITIAL_CLUSTER_TOKEN=<span class=\"hljs-string\">\"etcd-cluster\"</span>\nETCD_INITIAL_CLUSTER_STATE=<span class=\"hljs-string\">\"new\"</span>\nEOF\n</code></pre><p><br></p><p><br></p><pre><code>ETCD_NAME：节点名称，集群中唯一 \nETCD_DATA_DIR：数据目录 \nETCD_LISTEN_PEER_URLS：集群通信监听地址 \nETCD_LISTEN_CLIENT_URLS：客户端访问监听地址 \nETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址 \nETCD_ADVERTISE_CLIENT_URLS：客户端通告地址 \nETCD_INITIAL_CLUSTER：集群节点地址 \nETCD_INITIAL_CLUSTER_TOKEN：集群 Token \nETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new 是新集群，existing 表示加入 已有集群</code></pre><p><br></p><h1><br></h1><h3>11.创建etcd.service</h3><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Etcd<span class=\"hljs-built_in\"> Server\n</span><span class=\"hljs-attribute\">After</span>=network.target\n<span class=\"hljs-attribute\">After</span>=network-online.target\n<span class=\"hljs-attribute\">Wants</span>=network-online.target\n[Service]\n<span class=\"hljs-attribute\">Type</span>=notify\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/etcd/cfg/etcd.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/etcd/bin/etcd \\\n<span class=\"hljs-attribute\">--cert-file</span>=/opt/etcd/ssl/server.pem \\\n<span class=\"hljs-attribute\">--key-file</span>=/opt/etcd/ssl/server-key.pem \\\n<span class=\"hljs-attribute\">--peer-cert-file</span>=/opt/etcd/ssl/server.pem \\\n<span class=\"hljs-attribute\">--peer-key-file</span>=/opt/etcd/ssl/server-key.pem \\\n<span class=\"hljs-attribute\">--trusted-ca-file</span>=/opt/etcd/ssl/ca.pem \\\n<span class=\"hljs-attribute\">--peer-trusted-ca-file</span>=/opt/etcd/ssl/ca.pem \\\n<span class=\"hljs-attribute\">--logger</span>=zap\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">LimitNOFILE</span>=65536\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h1><br></h1><h3>12.拷贝刚才生成的证书 把刚才生成的证书拷贝到配置文件中的路径：</h3><pre><code>cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/</code></pre><h1><br></h1><h3>13.启动并设置开机启动</h3><pre><code>systemctl daemon-reload</code><code>\nsystemctl start etcd  #启动后会卡住因为需要和node节点一起执行改命令</code><code>\nsystemctl enable etcd</code></pre><h1><br></h1><p><br></p><h3>14.将上面节点 1 所有生成的文件拷贝到节点 2 和节点 3</h3><pre><code>scp -r /opt/etcd/ root@192.168.31.72:/opt/\n\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.72:/usr/lib/systemd/system/\n\nscp -r /opt/etcd/ root@192.168.31.73:/opt/\n\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.73:/usr/lib/systemd/system/</code></pre><h1><br></h1><h3>15.然后在节点 2 和节点 3 分别修改 etcd.conf 配置文件中的节点名称和当前服务器 IP：&nbsp;</h3><pre><code>#[Member] ETCD_NAME=\"etcd-1\" # <font color=\"#f9963b\">修改此处，节点 2 改为 etcd-2，节点 3 改为 etcd-3</font></code><code><br></code><code>vi /opt/etcd/cfg/etcd.conf<br></code></pre><h1><br></h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FtZbdoOST74tExca0PM0nEcg3XJA\" style=\"max-width:100%;\"><br></p><h3>16.最后启动 etcd 并设置开机启动，同上。</h3><pre><code>systemctl daemon-reload<br></code><code>\nsystemctl start etcd<br></code><code>\nsystemctl enable etcd</code></pre><h1><br></h1><p><font size=\"4\">需要二边一起执行</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FunUn3qiQzDfbq2p_6VQ0fYO4VZg\"></p><h2>17.查看集群状态</h2><pre><code>/opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=\"https://192.168.248.202:2379,https://192.168.248.220:2379,https://192.168.248.224:2379\" endpoint status --write-out=table</code></pre><h1><img src=\"http://qiniu-picture.xiyanit.cn/Fp7dnD2UfhsfHSjJX9XsVbLN5xfH\"><br></h1><h1><br></h1><h3>18.安装docker&nbsp;以下在所有节点操作。这里采用二进制安装，用 yum 安装也一样 （<font color=\"#c24f4a\">多台节点安装可以采用键盘工具</font>）</h3><pre><code>下载地址：https://download.docker.com/linux/static/stable/x86_64/docker-20.10.3.tgz</code></pre><h1><br></h1><p>百度云下载地址&nbsp;&nbsp;</p><p><font size=\"3\">链接：https://pan.baidu.com/s/1HcdeAAakAIMpDBSbN1ABQg<br>提取码：w93r<br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><p><br></p><pre><code>tar zxvf docker-20.10.3.tgz </code><code><br></code><code>mv docker/* /usr/bin</code></pre><h3><br></h3><h3>19.systemd 管理 docker</h3><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Docker Application Container Engine\n<span class=\"hljs-attribute\">Documentation</span>=https://docs.docker.com\n<span class=\"hljs-attribute\">After</span>=network-online.target firewalld.service\n<span class=\"hljs-attribute\">Wants</span>=network-online.target\n[Service]\n<span class=\"hljs-attribute\">Type</span>=notify\n<span class=\"hljs-attribute\">ExecStart</span>=/usr/bin/dockerd\n<span class=\"hljs-attribute\">ExecReload</span>=/bin/kill -s HUP <span class=\"hljs-variable\">$MAINPID</span>\n<span class=\"hljs-attribute\">LimitNOFILE</span>=infinity\n<span class=\"hljs-attribute\">LimitNPROC</span>=infinity\n<span class=\"hljs-attribute\">LimitCORE</span>=infinity\n<span class=\"hljs-attribute\">TimeoutStartSec</span>=0\n<span class=\"hljs-attribute\">Delegate</span>=<span class=\"hljs-literal\">yes</span>\n<span class=\"hljs-attribute\">KillMode</span>=process\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">StartLimitBurst</span>=3\n<span class=\"hljs-attribute\">StartLimitInterval</span>=60s\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h1><br></h1><h3>20.配置阿里云加速</h3><pre type=\"Bash\"><code>mkdir /etc/docker\ncat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"hljs-keyword\">EOF</span>\n{\n  <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://b9pmyelo.mirror.aliyuncs.com\"</span>]\n}\n<span class=\"hljs-keyword\">EOF</span>\n</code></pre><p><br></p><h1><br></h1><h3>21.启动并设置开机启动</h3><pre><code>systemctl daemon-reload\n\nsystemctl start docker\n\nsystemctl enable docker</code></pre><h1><br></h1><h3>22.查询docker是否成功安装</h3><pre><code>docker -v</code></pre><h1><img src=\"http://qiniu-picture.xiyanit.cn/Fmw_xH0Ei79fDgoyYTIJ_ib4MYd2\"><br></h1><h1><br></h1><h3>23.部署 Master Node</h3><p><font size=\"3\">23.1 生成 kube-apiserver 证书 （1）自签证书颁发机构（CA）</font></p><p><font size=\"3\"><br></font></p><pre type=\"Bash\"><code><span class=\"hljs-built_in\">cd</span> TLS/k8s</code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; ca-<span class=\"hljs-built_in\">config</span>.<span class=\"hljs-keyword\">json </span>&lt;&lt; EOF\n{\n  <span class=\"hljs-string\">\"signing\"</span>: {\n    <span class=\"hljs-string\">\"default\"</span>: {\n      <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>\n    },\n    <span class=\"hljs-string\">\"profiles\"</span>: {\n      <span class=\"hljs-string\">\"kubernetes\"</span>: {\n         <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>,\n         <span class=\"hljs-string\">\"usages\"</span>: [\n            <span class=\"hljs-string\">\"signing\"</span>,\n            <span class=\"hljs-string\">\"key encipherment\"</span>,\n            <span class=\"hljs-string\">\"server auth\"</span>,\n            <span class=\"hljs-string\">\"client auth\"</span>\n        ]\n      }\n    }\n  }\n}\nEOF</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; <span class=\"hljs-keyword\">ca</span>-csr.json &lt;&lt; EOF\n{\n    <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"kubernetes\"</span>,\n    <span class=\"hljs-string\">\"key\"</span>: {\n        <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n        <span class=\"hljs-string\">\"size\"</span>: 2048\n    },\n    <span class=\"hljs-string\">\"names\"</span>: [\n        {\n            <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n            <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>,\n            <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>,\n            <span class=\"hljs-string\">\"O\"</span>: <span class=\"hljs-string\">\"k8s\"</span>,\n            <span class=\"hljs-string\">\"OU\"</span>: <span class=\"hljs-string\">\"System\"</span>\n        }\n    ]\n}\nEOF</code></pre><p><br></p><p><font size=\"4\">23.2生成证书</font><br></p><pre type=\"Bash\"><code>cfssl gencert -initca <span class=\"hljs-keyword\">ca</span>-csr.json | cfssljson -bare <span class=\"hljs-keyword\">ca</span> -</code><code><br></code><code>ls *pem<br></code></pre><p><br></p><p><font size=\"4\">23.3使用自签 CA 签发 kube-apiserver HTTPS 证书 创建证书申请文件：</font></p><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-keyword\">server</span>-csr.json &lt;&lt; EOF\n{\n    \"CN\": \"kubernetes\",\n    \"hosts\": [\n      \"10.0.0.1\",\n      \"127.0.0.1\",\n      \"192.168.1.71\",\n      \"192.168.1.72\",\n      \"192.168.1.73\",\n      \"192.168.1.74\",\n      \"192.168.1.81\",\n      \"192.168.1.82\",\n      \"192.168.1.88\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": <span class=\"hljs-number\">2048</span>\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\nEOF</code></pre><p><br></p><p><br></p><p><font size=\"4\">23.4生成证书：</font></p><pre type=\"Bash\"><code>cfssl gencert <span class=\"hljs-attribute\">-ca</span>=ca.pem <span class=\"hljs-attribute\">-ca-key</span>=ca-key.pem <span class=\"hljs-attribute\">-config</span>=ca-config.json -<span class=\"hljs-attribute\">profile</span>=kubernetes server-csr.json | cfssljson -bare<span class=\"hljs-built_in\"> server</span>\n<br></code><code>\nls server*pem</code></pre><p><br></p><h3>24.从 Github 下载二进制文件</h3><p><a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-%201.18.md#v1183\" target=\"_blank\"><font size=\"3\">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG- 1.20.1.md#v1183</font></a><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fv_p1M2xiYBAKGhbeh-QjmnLRPZU\"><br></p><p><font size=\"4\">git下载太慢我保存在了百度云</font></p><p><font size=\"3\">链接：https://pan.baidu.com/s/1mQPZCxjCnjFxvorkQo9zcA <br>提取码：ue5n <br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><p><br></p><h3>25.解压二进制包</h3><pre><code>mkdir -p /opt/kubernetes/{bin,cfg,ssl,logs}</code><code><br></code><code>tar zxvf kubernetes-server-linux-amd64.tar.gz</code><code>\ncd kubernetes/server/bin</code><code>\ncp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin</code><code>\ncp kubectl /usr/bin/</code></pre><h1><br></h1><h3>26.部署 kube-apiserver</h3><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; EOF\nKUBE_APISERVER_OPTS=\"--logtostderr=false \\\\\n-<span class=\"ruby\">-v=<span class=\"hljs-number\">2</span> \\\\\n</span>-<span class=\"ruby\">-log-dir=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-etcd-servers=https:/</span><span class=\"hljs-regexp\">/192.168.1.71:2379,https:/</span><span class=\"hljs-regexp\">/192.168.1.72:2379,https:/</span><span class=\"hljs-regexp\">/192.168.1.73:2379 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-bind-address=192.168.1.71 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-secure-port=6443 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-advertise-address=192.168.1.71 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-allow-privileged=true \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-service-cluster-ip-range=10.0.0.0/</span><span class=\"hljs-number\">24</span> \\\\\n</span>-<span class=\"ruby\">-enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\\n</span>-<span class=\"ruby\">-authorization-mode=RBAC,Node \\\\\n</span>-<span class=\"ruby\">-enable-bootstrap-token-auth=<span class=\"hljs-literal\">true</span> \\\\\n</span>-<span class=\"ruby\">-token-auth-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/cfg/token</span>.csv \\\\\n</span>-<span class=\"ruby\">-service-node-port-range=<span class=\"hljs-number\">30000</span>-<span class=\"hljs-number\">32767</span> \\\\\n</span>-<span class=\"ruby\">-kubelet-client-certificate=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>.pem \\\\\n</span>-<span class=\"ruby\">-kubelet-client-key=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-tls-cert-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>.pem  \\\\\n</span>-<span class=\"ruby\">-tls-private-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-client-ca-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-service-account-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-etcd-cafile=<span class=\"hljs-regexp\">/opt/etcd</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-etcd-certfile=<span class=\"hljs-regexp\">/opt/etcd</span><span class=\"hljs-regexp\">/ssl/server</span>.pem \\\\\n</span>-<span class=\"ruby\">-etcd-keyfile=<span class=\"hljs-regexp\">/opt/etcd</span><span class=\"hljs-regexp\">/ssl/server</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-audit-log-maxage=<span class=\"hljs-number\">30</span> \\\\\n</span>-<span class=\"ruby\">-audit-log-maxbackup=<span class=\"hljs-number\">3</span> \\\\\n</span>-<span class=\"ruby\">-audit-log-maxsize=<span class=\"hljs-number\">100</span> \\\\\n</span>-<span class=\"ruby\">-audit-log-path=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs/k</span>8s-audit.log<span class=\"hljs-string\">\"\n</span></span>EOF\n</code></pre><p><br></p><p><br></p><p><font size=\"3\">注：上面两个\\ \\ 第一个是转义符，第二个是换行符，使用转义符是为了使用 EOF 保留换 行符。<br>–logtostderr：启用日志<br>—v：日志等级<br>–log-dir：日志目录<br>–etcd-servers：etcd 集群地址<br>–bind-address：监听地址<br>–secure-port：https 安全端口<br>–advertise-address：集群通告地址<br>–allow-privileged：启用授权<br>–service-cluster-ip-range：Service 虚拟 IP 地址段<br>–enable-admission-plugins：准入控制模块<br>–authorization-mode：认证授权，启用 RBAC 授权和节点自管理<br>–enable-bootstrap-token-auth：启用 TLS bootstrap 机制<br>–token-auth-file：bootstrap token 文件<br>–service-node-port-range：Service nodeport 类型默认分配端口范围<br>–kubelet-client-xxx：apiserver 访问 kubelet 客户端证书<br>–tls-xxx-file：apiserver https 证书<br>–etcd-xxxfile：连接 Etcd 集群证书<br>–audit-log-xxx：审计日志</font></p><p><font size=\"3\"><br></font></p><h2 id=\"o5ri6\">27.把刚才生成的证书拷贝到配置文件中的路径：</h2><pre type=\"Bash\"><code>cp ~<span class=\"hljs-regexp\">/TLS/</span>k8s<span class=\"hljs-regexp\">/ca*pem ~/</span>TLS<span class=\"hljs-regexp\">/k8s/</span>server*pem <span class=\"hljs-regexp\">/opt/</span>kubernetes<span class=\"hljs-regexp\">/ssl/</span></code></pre><h2 id=\"afuze\"><br></h2><h2 id=\"afuze\">28.创建上述配置文件中 token 文件</h2><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/<span class=\"hljs-keyword\">token</span>.csv &lt;&lt; <span class=\"hljs-literal\">EOF</span>\nc47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,<span class=\"hljs-number\">10001</span>,<span class=\"hljs-string\">\"system:node-bootstrapper\"</span>\n<span class=\"hljs-literal\">EOF</span></code></pre><p><br></p><p><br></p><p><font size=\"4\">格式：token，用户名，UID，用户组 token 也可自行生成替换：&nbsp;</font></p><pre type=\"Bash\"><code>head -c <span class=\"hljs-number\">16</span> <span class=\"hljs-regexp\">/dev/u</span>random | od -An -t x | tr -d <span class=\"hljs-string\">\' \'</span></code></pre><p><br></p><p><br></p><h2 id=\"zft2c\">29.<span style=\"font-size: 1em;\">systemd 管理 apiserver</span></h2><div><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes API<span class=\"hljs-built_in\"> Server\n</span><span class=\"hljs-attribute\">Documentation</span>=https://github.com/kubernetes/kubernetes\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-apiserver.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-apiserver \\<span class=\"hljs-variable\">$KUBE_APISERVER_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre></div><p><br></p><p><br></p><h2 id=\"6xcfe\">30.<span style=\"font-size: 1em;\">启动并设置开机启动</span></h2><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kube-apiserver</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kube-apiserver</span></code><code><span class=\"hljs-string\"><br></span></code><code><span class=\"hljs-string\">systemctl status kube-apiserver <br></span></code></pre></div><p><br></p><h2 id=\"j8azv\">31.<span style=\"font-size: 1em;\">授权 kubelet-bootstrap 用户允许请求证书</span></h2><div><pre type=\"Bash\"><code>kubectl create clusterrolebinding kubelet-bootstrap \\\n--<span class=\"hljs-attr\">clusterrole=</span>system:<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-bootstrapper</span> \\\n--<span class=\"hljs-attr\">user=</span>kubelet-bootstrap\n</code></pre></div><p><br></p><p><br></p><h2 id=\"nftpt\">32.<span style=\"font-size: 1em;\">部署 kube-controller-manager</span></h2><div><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; EOF\nKUBE_CONTROLLER_MANAGER_OPTS=\"--logtostderr=false \\\\\n-<span class=\"ruby\">-v=<span class=\"hljs-number\">2</span> \\\\\n</span>-<span class=\"ruby\">-log-dir=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-leader-elect=true \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-master=127.0.0.1:8080 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-bind-address=127.0.0.1 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-allocate-node-cidrs=true \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-cluster-cidr=10.244.0.0/</span><span class=\"hljs-number\">16</span> \\\\\n</span>-<span class=\"ruby\">-service-cluster-ip-range=<span class=\"hljs-number\">10.0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">24</span> \\\\\n</span>-<span class=\"ruby\">-cluster-signing-cert-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-cluster-signing-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>-key.pem  \\\\\n</span>-<span class=\"ruby\">-root-ca-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-service-account-private-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-experimental-cluster-signing-duration=<span class=\"hljs-number\">87600</span>h0m0s<span class=\"hljs-string\">\"\n</span></span>EOF\n</code></pre></div><p><br></p><p><font size=\"3\"><br></font></p><p><font size=\"3\">–master：通过本地非安全本地端口 8080 连接 apiserver。 </font></p><p><font size=\"3\">–leader-elect：当该组件启动多个时，自动选举（HA） </font></p><p><font size=\"3\">–cluster-signing-cert-file/–cluster-signing-key-file：自动为 kubelet 颁发证书 </font></p><p><font size=\"3\">的 CA，与 apiserver 保持一致</font></p><p><font size=\"3\"><br></font></p><h2 id=\"jqmw7\"><font size=\"3\">33.</font><span style=\"font-size: 1em;\">systemd 管理 controller-manager</span></h2><div><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes Controller Manager\n<span class=\"hljs-attribute\">Documentation</span>=https://github.com/kubernetes/kubernetes\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-controller-manager.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-controller-manager \\<span class=\"hljs-variable\">$KUBE_CONTROLLER_MANAGER_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre></div><p><br></p><p><br></p><h2 id=\"zmz2o\">34<span style=\"font-size: 1em;\">. 启动并设置开机启动</span></h2><pre type=\"Bash\"><code>systemctl daemon-reload</code><code><br></code><code>systemctl <span class=\"hljs-keyword\">start</span> kube-controller-manager</code><code><br></code><code>systemctl <span class=\"hljs-keyword\">enable</span> kube-controller-manager</code><code><br></code><code>systemctl status kube-controller-manager<br></code></pre><p><br></p><h2 id=\"x1zuv\">35.<span style=\"font-size: 1em;\">部署 kube-scheduler</span></h2><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">cat</span> <span class=\"hljs-string\">&gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; EOF</span>\n<span class=\"hljs-attr\">KUBE_SCHEDULER_OPTS</span>=<span class=\"hljs-string\">\"--logtostderr=false \\\n--v=2 \\\n--log-dir=/opt/kubernetes/logs \\\n--leader-elect \\\n--master=127.0.0.1:8080 \\\n--bind-address=127.0.0.1\"</span>\n<span class=\"hljs-attr\">EOF</span>\n</code></pre></div><p><br></p><p><br></p><p><font size=\"4\">–master：通过本地非安全本地端口 8080 连接 apiserver。 </font></p><p><font size=\"4\">–leader-elect：当该组件启动多个时，自动选举（HA）</font>&nbsp;</p><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes<span class=\"hljs-built_in\"> Scheduler\n</span><span class=\"hljs-attribute\">Documentation</span>=https://github.com/kubernetes/kubernetes\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-scheduler.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-scheduler \\<span class=\"hljs-variable\">$KUBE_SCHEDULER_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h2 id=\"ol4e3\">36.<span style=\"font-size: 1em;\">启动并设置开机启动</span></h2><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kube-scheduler</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kube-scheduler</span></code><code><span class=\"hljs-string\"><br></span></code><code><span class=\"hljs-string\">systemctl status kube-scheduler<br></span></code></pre></div><p><br></p><h2 id=\"qcte9\">37.<span style=\"font-size: 1em;\">查看集群状态</span></h2><p>所有组件都已经启动成功，通过 kubectl 工具查看当前集群组件状态：</p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> cs</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FuX-c-ZkM34kg9n8WsHqZoGHWBmr\" style=\"max-width:100%;\"><br></p><h2 id=\"ox3fr\">38.部署node节点</h2><pre><code>mkdir -p /opt/kubernetes/{bin,cfg,ssl,logs}</code><code><br></code><code>tar zxvf kubernetes-server-linux-amd64.tar.gz</code><code>\ncd kubernetes/server/bin\n\n</code><code>cp kubelet kube-proxy /opt/kubernetes/bin<br></code><code>\ncp kubectl /usr/bin/</code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; EOF\nKUBELET_OPTS=\"--logtostderr=false \\\\\n-<span class=\"ruby\">-v=<span class=\"hljs-number\">2</span> \\\\\n</span>-<span class=\"ruby\">-log-dir=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs \\\\\n</span></span><font color=\"#c24f4a\">-</font><span class=\"ruby\"><span class=\"hljs-regexp\"><font color=\"#c24f4a\">-hostname-override=m1</font> \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-network-plugin=cni \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-kubeconfig=/opt</span><span class=\"hljs-regexp\">/kubernetes/cfg</span><span class=\"hljs-regexp\">/kubelet.kubeconfig \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-bootstrap-kubeconfig=/opt</span><span class=\"hljs-regexp\">/kubernetes/cfg</span><span class=\"hljs-regexp\">/bootstrap.kubeconfig \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-config=/opt</span><span class=\"hljs-regexp\">/kubernetes/cfg</span><span class=\"hljs-regexp\">/kubelet-config.yml \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-cert-dir=/opt</span><span class=\"hljs-regexp\">/kubernetes/ssl</span> \\\\\n</span>-<span class=\"ruby\">-pod-infra-container-image=lizhenliang/pause-<span class=\"hljs-symbol\">amd64:</span><span class=\"hljs-number\">3.0</span><span class=\"hljs-string\">\"\n</span></span>EOF\n</code></pre><p><br></p><p><font size=\"3\">–hostname-override：显示名称，集群中唯一<br>–network-plugin：启用CNI<br>–kubeconfig：空路径，会自动生成，后面用于连接apiserver<br>–bootstrap-kubeconfig：首次启动向apiserver申请证书<br>–config：配置参数文件<br>–cert-dir：kubelet证书生成目录<br>–pod-infra-container-image：管理Pod网络容器的镜像</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-string\">cat</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">/opt/kubernetes/cfg/kubelet-config.yml</span> <span class=\"hljs-string\">&lt;&lt;</span> <span class=\"hljs-string\">EOF</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">KubeletConfiguration</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubelet.config.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10250</span>\n<span class=\"hljs-attr\">readOnlyPort:</span> <span class=\"hljs-number\">10255</span>\n<span class=\"hljs-attr\">cgroupDriver:</span> <span class=\"hljs-string\">cgroupfs</span>\n<span class=\"hljs-attr\">clusterDNS:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.2</span>\n<span class=\"hljs-attr\">clusterDomain:</span> <span class=\"hljs-string\">cluster.local</span> \n<span class=\"hljs-attr\">failSwapOn:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">authentication:</span>\n  <span class=\"hljs-attr\">anonymous:</span>\n    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">webhook:</span>\n    <span class=\"hljs-attr\">cacheTTL:</span> <span class=\"hljs-string\">2m0s</span>\n    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">x509:</span>\n    <span class=\"hljs-attr\">clientCAFile:</span> <span class=\"hljs-string\">/opt/kubernetes/ssl/ca.pem</span> \n<span class=\"hljs-attr\">authorization:</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">Webhook</span>\n  <span class=\"hljs-attr\">webhook:</span>\n    <span class=\"hljs-attr\">cacheAuthorizedTTL:</span> <span class=\"hljs-string\">5m0s</span>\n    <span class=\"hljs-attr\">cacheUnauthorizedTTL:</span> <span class=\"hljs-string\">30s</span>\n<span class=\"hljs-attr\">evictionHard:</span>\n  <span class=\"hljs-attr\">imagefs.available:</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">%</span>\n  <span class=\"hljs-attr\">memory.available:</span> <span class=\"hljs-string\">100Mi</span>\n  <span class=\"hljs-attr\">nodefs.available:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-string\">%</span>\n  <span class=\"hljs-attr\">nodefs.inodesFree:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">%</span>\n<span class=\"hljs-attr\">maxOpenFiles:</span> <span class=\"hljs-number\">1000000</span>\n<span class=\"hljs-attr\">maxPods:</span> <span class=\"hljs-number\">110</span>\n<span class=\"hljs-string\">EOF</span>\n</code></pre><h2><br></h2><h2>39.将master一些配置文件拷贝到node节点上</h2><pre type=\"Bash\"><code>scp -r /opt/kubernetes/ssl root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.181</span>.<span class=\"hljs-number\">134</span><span class=\"hljs-symbol\">:/opt/kubernetes</span></code></pre><p><br></p><h2>40.生成bootstrap.kubeconfig文件</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">KUBE_APISERVER</span>=<span class=\"hljs-string\">\"https://192.168.1.71:6443\"</span> # apiserver IP:PORT\n<span class=\"hljs-attribute\">TOKEN</span>=<span class=\"hljs-string\">\"c47ffb939f5ca36231d9e3121a252940\"</span> # 与token.csv里保持一致\n\n<span class=\"hljs-comment\"># 生成 kubelet bootstrap kubeconfig 配置文件</span>\nkubectl<span class=\"hljs-built_in\"> config </span>set-cluster kubernetes \\\n  <span class=\"hljs-attribute\">--certificate-authority</span>=/opt/kubernetes/ssl/ca.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--server</span>=<span class=\"hljs-variable\">${KUBE_APISERVER}</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-credentials <span class=\"hljs-string\">\"kubelet-bootstrap\"</span> \\\n  <span class=\"hljs-attribute\">--token</span>=<span class=\"hljs-variable\">${TOKEN}</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-context<span class=\"hljs-built_in\"> default </span>\\\n  <span class=\"hljs-attribute\">--cluster</span>=kubernetes \\\n  <span class=\"hljs-attribute\">--user</span>=<span class=\"hljs-string\">\"kubelet-bootstrap\"</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>use-context<span class=\"hljs-built_in\"> default </span><span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\n</code></pre><p><br></p><pre type=\"Bash\"><code><font color=\"#cb4b16\">mv</font> <span class=\"hljs-keyword\">bootstrap.kubeconfig </span>/<span class=\"hljs-meta\">opt</span>/kubernetes/cfg</code></pre><p><br></p><h2 id=\"99gjm\">41.systemd管理kubelet</h2><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes Kubelet\n<span class=\"hljs-attribute\">After</span>=docker.service\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kubelet.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kubelet \\<span class=\"hljs-variable\">$KUBELET_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">LimitNOFILE</span>=65536\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h2 id=\"iw02g\">42.启动并设置开机启动</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kubelet</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kubelet</span></code></pre><p><br></p><h2 id=\"ni2yg\">43.批准kubelet证书申请并加入集群(Master操作)</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 查看kubelet证书请求</span>\nkubectl get csr\nNAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION\n<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span>   <span class=\"hljs-number\">6m</span>3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending\n\n<span class=\"hljs-comment\"># 批准申请</span>\nkubectl certificate approve <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span>\n\n<span class=\"hljs-comment\"># 查看节点</span>\nkubectl get <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fsm6eHAp5dT1mtidXWJOnB4w2m78\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">注：由于网络插件还没有部署，节点会没有准备就绪 NotReady</font><br></p><h2 id=\"urosl\">44、部署kube-proxy</h2><div></div><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; /<span class=\"hljs-keyword\">opt</span>/kubernetes/cfg/kube-proxy.<span class=\"hljs-keyword\">conf</span> &lt;&lt; EOF\nKUBE_PROXY_OPTS=<span class=\"hljs-comment\">\"--logtostderr=false \\\\</span>\n--v=<span class=\"hljs-number\">2</span> \\\\\n--<span class=\"hljs-built_in\">log</span>-dir=/<span class=\"hljs-keyword\">opt</span>/kubernetes/logs \\\\\n--config=/<span class=\"hljs-keyword\">opt</span>/kubernetes/cfg/kube-proxy-config.yml<span class=\"hljs-comment\">\"</span>\nEOF\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-string\">cat</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">/opt/kubernetes/cfg/kube-proxy-config.yml</span> <span class=\"hljs-string\">&lt;&lt;</span> <span class=\"hljs-string\">EOF</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">KubeProxyConfiguration</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubeproxy.config.k8s.io/v1alpha1</span>\n<span class=\"hljs-attr\">bindAddress:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-attr\">metricsBindAddress:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">:10249</span>\n<span class=\"hljs-attr\">clientConnection:</span>\n  <span class=\"hljs-attr\">kubeconfig:</span> <span class=\"hljs-string\">/opt/kubernetes/cfg/kube-proxy.kubeconfig</span>\n<span class=\"hljs-attr\">hostnameOverride:</span> <span class=\"hljs-string\">m1</span>\n<span class=\"hljs-attr\">clusterCIDR:</span> <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/24</span>\n<span class=\"hljs-string\">EOF</span></code></pre><h2 id=\"6jm8r\">45.生成kube-proxy.kubeconfig文件(master生成在传到node)</h2><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 切换工作目录</span>\ncd TLS/k8s\n\n<span class=\"hljs-comment\"># 创建证书请求文件</span>\ncat &gt; kube-proxy-csr.json &lt;&lt; EOF\n{\n  <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"system:kube-proxy\"</span>,\n  <span class=\"hljs-string\">\"hosts\"</span>: [],\n  <span class=\"hljs-string\">\"key\"</span>: {\n    <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n    <span class=\"hljs-string\">\"size\"</span>: 2048\n  },\n  <span class=\"hljs-string\">\"names\"</span>: [\n    {\n      <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n      <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>,\n      <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>,\n      <span class=\"hljs-string\">\"O\"</span>: <span class=\"hljs-string\">\"k8s\"</span>,\n      <span class=\"hljs-string\">\"OU\"</span>: <span class=\"hljs-string\">\"System\"</span>\n    }\n  ]\n}\nEOF\n\n<span class=\"hljs-comment\"># 生成证书</span>\ncfssl gencert <span class=\"hljs-attribute\">-ca</span>=ca.pem <span class=\"hljs-attribute\">-ca-key</span>=ca-key.pem <span class=\"hljs-attribute\">-config</span>=ca-config.json <span class=\"hljs-attribute\">-profile</span>=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</code></pre><p><br></p><pre type=\"Bash\"><code>scp -r /root/TLS/k8s root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.181</span>.<span class=\"hljs-number\">134</span><span class=\"hljs-symbol\">:/opt/TLS/</span></code></pre><p><br></p><h2 id=\"xjw28\">46.生成kubeconfig文件</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">KUBE_APISERVER</span>=<span class=\"hljs-string\">\"<font color=\"#c24f4a\">https://192.168.1.71:6443</font>\"</span>\n\nkubectl<span class=\"hljs-built_in\"> config </span>set-cluster kubernetes \\\n  <span class=\"hljs-attribute\">--certificate-authority</span>=/opt/kubernetes/ssl/ca.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--server</span>=<span class=\"hljs-variable\">${KUBE_APISERVER}</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-credentials kube-proxy \\\n  <span class=\"hljs-attribute\">--client-certificate</span>=./kube-proxy.pem \\\n  <span class=\"hljs-attribute\">--client-key</span>=./kube-proxy-key.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-context<span class=\"hljs-built_in\"> default </span>\\\n  <span class=\"hljs-attribute\">--cluster</span>=kubernetes \\\n  <span class=\"hljs-attribute\">--user</span>=kube-proxy \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>use-context<span class=\"hljs-built_in\"> default </span><span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\n</code></pre><p><br></p><pre type=\"Bash\"><code>cp kube-proxy.kubeconfig <span class=\"hljs-regexp\">/opt/</span>kubernetes<span class=\"hljs-regexp\">/cfg/</span></code></pre><p><br></p><h2 id=\"urqvl\">47.systemd管理kube-proxy</h2><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes<span class=\"hljs-built_in\"> Proxy\n</span><span class=\"hljs-attribute\">After</span>=network.target\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-proxy.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-proxy \\<span class=\"hljs-variable\">$KUBE_PROXY_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">LimitNOFILE</span>=65536\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h2 id=\"vgfq3\">48.启动并设置开机启动</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kube-proxy</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kube-proxy</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">status kube-proxy</span></code></pre><p><br></p><h2 id=\"fcxyd\">49.部署CNI网络</h2><p><font size=\"3\">下载地址：https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz<br></font></p><p><font size=\"3\">node节点操作</font></p><pre type=\"Bash\"><code><span class=\"hljs-symbol\">mkdir</span> /<span class=\"hljs-meta\">opt</span>/cni/<span class=\"hljs-keyword\">bin</span></code><code><span class=\"hljs-keyword\">\n</span><span class=\"hljs-symbol\">tar</span> zxvf cni-plugins-linux-amd64-v0.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">6</span>.tgz -C /<span class=\"hljs-meta\">opt</span>/cni/<span class=\"hljs-keyword\">bin</span></code></pre><p><font size=\"3\"><br></font></p><p><font size=\"3\">master节点操作</font></p><p>链接：https://pan.baidu.com/s/1abu6OwzAgcRdpbEpPPpDnw <br>提取码：hvf3 <br><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f kube-flannel.yml</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FvABBVZAgI20BXq12dJlhs1-uImY\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fgt78UsZiv6BsLo0-fIVY0UGlAHW\" style=\"max-width: 100%;\"><br></p>','<h2>1.修改主机名</h2><p><br><font size=\"4\">k8s-master:</font><br><br></p><pre><code>hostnamectl set-hostname m1</code></pre><p><br></p><p><font size=\"4\">k8s-node1:</font><br><br></p><pre><code>hostnamectl set-hostname n1</code></pre><p><br></p><p><b><font size=\"4\">以下都是二台服务器同时操作请按图片操作打开键盘模式</font></b></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fox1JcLu3VQBEG28wzVNlT-kvIDX\"><b><br></b></p><h2>2.防火墙关闭</h2><pre><code>systemctl stop firewalld\nsystemctl disable firewalld</code></pre><p><br></p><h2>3.关闭selinux</h2><pre><code>setenforce 0 # 临时关闭\nsed -i \'s/SELINUX=enforcing/SELINUX=disabled/g\' /etc/selinux/config # 永久关闭</code></pre><p><br></p><h2>4.关闭swap</h2><pre><code>swapoff -a # 临时关闭；关闭swap主要是为了性能考虑\nsed -ri \'s/.*swap.*/#&amp;/\' /etc/fstab</code></pre><p><font size=\"4\">free # 可以通过这个命令查看swap是否关闭了&nbsp;</font><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpawE4ilhcLt6GRGek7-K9qab9sH\"><br></p><h2><br></h2><p><b><font size=\"4\">时间同步</font></b></p><pre><code>yum install ntpdate -y</code><code>\nntpdate time.windows.com</code></pre><p><br></p><h2>5.将桥接的IPv4流量传递到iptables的链</h2><pre><code>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF</code></pre><p><br></p><pre type=\"Bash\"><code>sysctl <span class=\"hljs-comment\">--system</span></code></pre><p><br></p><h2>6.添加主机名与IP对应的关系 ( master上操作 )</h2><pre><code>vim /etc/hosts</code></pre><p><br></p><pre><code>192.168.181.128 k8s-master\n192.168.181.129 k8s-node-1</code></pre><p><br></p><p><br></p><h2>7.准备 cfssl 证书生成工具 ( master上操作 )</h2><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点</p><pre><code>wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</code><code><br></code><code>wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</code><code><br></code><code>wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</code><code><br></code><code>chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</code><code><br></code><code>mv cfssl_linux-amd64 /usr/local/bin/cfssl</code><code><br></code><code>mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</code><code><br></code><code>mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</code><code><br></code><code>chmod +x /usr/bin/cfssl*<br></code></pre><h3><br></h3><h3>7.1生成 Etcd 证书 （1）自签证书颁发机构（CA） 创建工作目录：</h3><pre><code>mkdir -p ~/TLS/{etcd,k8s}\n\ncd TLS/etcd</code></pre><h1><br></h1><h3>7.2自签 CA</h3><pre type=\"Bash\"><code>cat &gt; ca-<span class=\"hljs-built_in\">config</span>.<span class=\"hljs-keyword\">json </span>&lt;&lt; EOF\n{\n  <span class=\"hljs-string\">\"signing\"</span>: {\n    <span class=\"hljs-string\">\"default\"</span>: {\n      <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>\n    },\n    <span class=\"hljs-string\">\"profiles\"</span>: {\n      <span class=\"hljs-string\">\"www\"</span>: {\n         <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>,\n         <span class=\"hljs-string\">\"usages\"</span>: [\n            <span class=\"hljs-string\">\"signing\"</span>,\n            <span class=\"hljs-string\">\"key encipherment\"</span>,\n            <span class=\"hljs-string\">\"server auth\"</span>,\n            <span class=\"hljs-string\">\"client auth\"</span>\n        ]\n      }\n    }\n  }\n}\nEOF</code></pre><h1><br></h1><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; <span class=\"hljs-keyword\">ca</span>-csr.json &lt;&lt; EOF\n{\n    <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"etcd CA\"</span>,\n    <span class=\"hljs-string\">\"key\"</span>: {\n        <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n        <span class=\"hljs-string\">\"size\"</span>: 2048\n    },\n    <span class=\"hljs-string\">\"names\"</span>: [\n        {\n            <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n            <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>,\n            <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>\n        }\n    ]\n}\nEOF</code></pre><p><br></p><h3>7.3生成证书：</h3><pre><code>cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</code><code><br></code><code><br></code><code>ls *pem<br></code></pre><h3><br></h3><h3>7.4使用自签 CA 签发 Etcd HTTPS 证书 创建证书申请文件：(修改对应的master和node的IP地址)</h3><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-keyword\">server</span>-csr.json &lt;&lt; EOF\n{\n    \"CN\": \"etcd\",\n    \"hosts\": [\n    \"192.168.31.71\",\n    \"192.168.31.72\",\n    \"192.168.31.73\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": <span class=\"hljs-number\">2048</span>\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\"\n        }\n    ]\n}\nEOF</code></pre><p><br></p><h1><br></h1><h3>7.5注：上述文件 hosts 字段中 IP 为所有 etcd 节点的集群内部通信 IP，一个都不能少！为了 方便后期扩容可以多写几个预留的 IP。 生成证书：</h3><pre><code>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server ls server*pem</code></pre><h1><br></h1><h2>8.从 Github 下载二进制文件 下载地址：</h2><p><font size=\"4\"><a href=\"https://github.com/etcd-io/etcd/releases\" target=\"_blank\">https://github.com/etcd-io/etcd/releases</a><br></font></p><p><font size=\"4\">git下载太慢，我下载保持在了百度云</font></p><p><font size=\"4\">链接：https://pan.baidu.com/s/1xGbuTDcWy6wmbqLvMxWsRQ<br>提取码：ob9k<br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><p><br></p><h3>9.部署 Etcd 集群 以下在节点 1 上操作，为简化操作，待会将节点 1 生成的所有文件拷贝到节点 2 和节点 3. （1）创建工作目录并解压二进制包</h3><pre><code>mkdir /opt/etcd/{bin,cfg,ssl} -p</code><code>\ntar zxvf etcd-v3.4.14-linux-amd64.tar.gz</code><code>\nmv etcd-v3.4.14-linux-amd64/{etcd,etcdctl} /opt/etcd/bin/</code></pre><h1><br></h1><h3>10.创建etcd.conf （修改对应的master的ip地址）</h3><p><br></p><pre type=\"Bash\"><code>cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF\n<span class=\"hljs-comment\">#[Member]</span>\nETCD_NAME=<span class=\"hljs-string\">\"etcd-1\"</span>\nETCD_DATA_DIR=<span class=\"hljs-string\">\"/var/lib/etcd/default.etcd\"</span>\nETCD_LISTEN_PEER_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2380\"</span>\nETCD_LISTEN_CLIENT_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2379\"</span>\n<span class=\"hljs-comment\">#[Clustering]</span>\nETCD_INITIAL_ADVERTISE_PEER_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2380\"</span>\nETCD_ADVERTISE_CLIENT_URLS=<span class=\"hljs-string\">\"https://192.168.31.71:2379\"</span>\nETCD_INITIAL_CLUSTER=<span class=\"hljs-string\">\"etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380\"</span>\nETCD_INITIAL_CLUSTER_TOKEN=<span class=\"hljs-string\">\"etcd-cluster\"</span>\nETCD_INITIAL_CLUSTER_STATE=<span class=\"hljs-string\">\"new\"</span>\nEOF\n</code></pre><p><br></p><p><br></p><pre><code>ETCD_NAME：节点名称，集群中唯一 \nETCD_DATA_DIR：数据目录 \nETCD_LISTEN_PEER_URLS：集群通信监听地址 \nETCD_LISTEN_CLIENT_URLS：客户端访问监听地址 \nETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址 \nETCD_ADVERTISE_CLIENT_URLS：客户端通告地址 \nETCD_INITIAL_CLUSTER：集群节点地址 \nETCD_INITIAL_CLUSTER_TOKEN：集群 Token \nETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new 是新集群，existing 表示加入 已有集群</code></pre><p><br></p><h1><br></h1><h3>11.创建etcd.service</h3><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Etcd<span class=\"hljs-built_in\"> Server\n</span><span class=\"hljs-attribute\">After</span>=network.target\n<span class=\"hljs-attribute\">After</span>=network-online.target\n<span class=\"hljs-attribute\">Wants</span>=network-online.target\n[Service]\n<span class=\"hljs-attribute\">Type</span>=notify\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/etcd/cfg/etcd.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/etcd/bin/etcd \\\n<span class=\"hljs-attribute\">--cert-file</span>=/opt/etcd/ssl/server.pem \\\n<span class=\"hljs-attribute\">--key-file</span>=/opt/etcd/ssl/server-key.pem \\\n<span class=\"hljs-attribute\">--peer-cert-file</span>=/opt/etcd/ssl/server.pem \\\n<span class=\"hljs-attribute\">--peer-key-file</span>=/opt/etcd/ssl/server-key.pem \\\n<span class=\"hljs-attribute\">--trusted-ca-file</span>=/opt/etcd/ssl/ca.pem \\\n<span class=\"hljs-attribute\">--peer-trusted-ca-file</span>=/opt/etcd/ssl/ca.pem \\\n<span class=\"hljs-attribute\">--logger</span>=zap\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">LimitNOFILE</span>=65536\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h1><br></h1><h3>12.拷贝刚才生成的证书 把刚才生成的证书拷贝到配置文件中的路径：</h3><pre><code>cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/</code></pre><h1><br></h1><h3>13.启动并设置开机启动</h3><pre><code>systemctl daemon-reload</code><code>\nsystemctl start etcd  #启动后会卡住因为需要和node节点一起执行改命令</code><code>\nsystemctl enable etcd</code></pre><h1><br></h1><p><br></p><h3>14.将上面节点 1 所有生成的文件拷贝到节点 2 和节点 3</h3><pre><code>scp -r /opt/etcd/ root@192.168.31.72:/opt/\n\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.72:/usr/lib/systemd/system/\n\nscp -r /opt/etcd/ root@192.168.31.73:/opt/\n\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.73:/usr/lib/systemd/system/</code></pre><h1><br></h1><h3>15.然后在节点 2 和节点 3 分别修改 etcd.conf 配置文件中的节点名称和当前服务器 IP：&nbsp;</h3><pre><code>#[Member] ETCD_NAME=\"etcd-1\" # <font color=\"#f9963b\">修改此处，节点 2 改为 etcd-2，节点 3 改为 etcd-3</font></code><code><br></code><code>vi /opt/etcd/cfg/etcd.conf<br></code></pre><h1><br></h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FtZbdoOST74tExca0PM0nEcg3XJA\" style=\"max-width:100%;\"><br></p><h3>16.最后启动 etcd 并设置开机启动，同上。</h3><pre><code>systemctl daemon-reload<br></code><code>\nsystemctl start etcd<br></code><code>\nsystemctl enable etcd</code></pre><h1><br></h1><p><font size=\"4\">需要二边一起执行</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FunUn3qiQzDfbq2p_6VQ0fYO4VZg\"></p><h2>17.查看集群状态</h2><pre><code>/opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=\"https://192.168.248.202:2379,https://192.168.248.220:2379,https://192.168.248.224:2379\" endpoint status --write-out=table</code></pre><h1><img src=\"http://qiniu-picture.xiyanit.cn/Fp7dnD2UfhsfHSjJX9XsVbLN5xfH\"><br></h1><h1><br></h1><h3>18.安装docker&nbsp;以下在所有节点操作。这里采用二进制安装，用 yum 安装也一样 （<font color=\"#c24f4a\">多台节点安装可以采用键盘工具</font>）</h3><pre><code>下载地址：https://download.docker.com/linux/static/stable/x86_64/docker-20.10.3.tgz</code></pre><h1><br></h1><p>百度云下载地址&nbsp;&nbsp;</p><p><font size=\"3\">链接：https://pan.baidu.com/s/1HcdeAAakAIMpDBSbN1ABQg<br>提取码：w93r<br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><p><br></p><pre><code>tar zxvf docker-20.10.3.tgz </code><code><br></code><code>mv docker/* /usr/bin</code></pre><h3><br></h3><h3>19.systemd 管理 docker</h3><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Docker Application Container Engine\n<span class=\"hljs-attribute\">Documentation</span>=https://docs.docker.com\n<span class=\"hljs-attribute\">After</span>=network-online.target firewalld.service\n<span class=\"hljs-attribute\">Wants</span>=network-online.target\n[Service]\n<span class=\"hljs-attribute\">Type</span>=notify\n<span class=\"hljs-attribute\">ExecStart</span>=/usr/bin/dockerd\n<span class=\"hljs-attribute\">ExecReload</span>=/bin/kill -s HUP <span class=\"hljs-variable\">$MAINPID</span>\n<span class=\"hljs-attribute\">LimitNOFILE</span>=infinity\n<span class=\"hljs-attribute\">LimitNPROC</span>=infinity\n<span class=\"hljs-attribute\">LimitCORE</span>=infinity\n<span class=\"hljs-attribute\">TimeoutStartSec</span>=0\n<span class=\"hljs-attribute\">Delegate</span>=<span class=\"hljs-literal\">yes</span>\n<span class=\"hljs-attribute\">KillMode</span>=process\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">StartLimitBurst</span>=3\n<span class=\"hljs-attribute\">StartLimitInterval</span>=60s\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h1><br></h1><h3>20.配置阿里云加速</h3><pre type=\"Bash\"><code>mkdir /etc/docker\ncat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"hljs-keyword\">EOF</span>\n{\n  <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://b9pmyelo.mirror.aliyuncs.com\"</span>]\n}\n<span class=\"hljs-keyword\">EOF</span>\n</code></pre><p><br></p><h1><br></h1><h3>21.启动并设置开机启动</h3><pre><code>systemctl daemon-reload\n\nsystemctl start docker\n\nsystemctl enable docker</code></pre><h1><br></h1><h3>22.查询docker是否成功安装</h3><pre><code>docker -v</code></pre><h1><img src=\"http://qiniu-picture.xiyanit.cn/Fmw_xH0Ei79fDgoyYTIJ_ib4MYd2\"><br></h1><h1><br></h1><h3>23.部署 Master Node</h3><p><font size=\"3\">23.1 生成 kube-apiserver 证书 （1）自签证书颁发机构（CA）</font></p><p><font size=\"3\"><br></font></p><pre type=\"Bash\"><code><span class=\"hljs-built_in\">cd</span> TLS/k8s</code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; ca-<span class=\"hljs-built_in\">config</span>.<span class=\"hljs-keyword\">json </span>&lt;&lt; EOF\n{\n  <span class=\"hljs-string\">\"signing\"</span>: {\n    <span class=\"hljs-string\">\"default\"</span>: {\n      <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>\n    },\n    <span class=\"hljs-string\">\"profiles\"</span>: {\n      <span class=\"hljs-string\">\"kubernetes\"</span>: {\n         <span class=\"hljs-string\">\"expiry\"</span>: <span class=\"hljs-string\">\"87600h\"</span>,\n         <span class=\"hljs-string\">\"usages\"</span>: [\n            <span class=\"hljs-string\">\"signing\"</span>,\n            <span class=\"hljs-string\">\"key encipherment\"</span>,\n            <span class=\"hljs-string\">\"server auth\"</span>,\n            <span class=\"hljs-string\">\"client auth\"</span>\n        ]\n      }\n    }\n  }\n}\nEOF</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; <span class=\"hljs-keyword\">ca</span>-csr.json &lt;&lt; EOF\n{\n    <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"kubernetes\"</span>,\n    <span class=\"hljs-string\">\"key\"</span>: {\n        <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n        <span class=\"hljs-string\">\"size\"</span>: 2048\n    },\n    <span class=\"hljs-string\">\"names\"</span>: [\n        {\n            <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n            <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>,\n            <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"Beijing\"</span>,\n            <span class=\"hljs-string\">\"O\"</span>: <span class=\"hljs-string\">\"k8s\"</span>,\n            <span class=\"hljs-string\">\"OU\"</span>: <span class=\"hljs-string\">\"System\"</span>\n        }\n    ]\n}\nEOF</code></pre><p><br></p><p><font size=\"4\">23.2生成证书</font><br></p><pre type=\"Bash\"><code>cfssl gencert -initca <span class=\"hljs-keyword\">ca</span>-csr.json | cfssljson -bare <span class=\"hljs-keyword\">ca</span> -</code><code><br></code><code>ls *pem<br></code></pre><p><br></p><p><font size=\"4\">23.3使用自签 CA 签发 kube-apiserver HTTPS 证书 创建证书申请文件：</font></p><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-keyword\">server</span>-csr.json &lt;&lt; EOF\n{\n    \"CN\": \"kubernetes\",\n    \"hosts\": [\n      \"10.0.0.1\",\n      \"127.0.0.1\",\n      \"192.168.1.71\",\n      \"192.168.1.72\",\n      \"192.168.1.73\",\n      \"192.168.1.74\",\n      \"192.168.1.81\",\n      \"192.168.1.82\",\n      \"192.168.1.88\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": <span class=\"hljs-number\">2048</span>\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\nEOF</code></pre><p><br></p><p><br></p><p><font size=\"4\">23.4生成证书：</font></p><pre type=\"Bash\"><code>cfssl gencert <span class=\"hljs-attribute\">-ca</span>=ca.pem <span class=\"hljs-attribute\">-ca-key</span>=ca-key.pem <span class=\"hljs-attribute\">-config</span>=ca-config.json -<span class=\"hljs-attribute\">profile</span>=kubernetes server-csr.json | cfssljson -bare<span class=\"hljs-built_in\"> server</span>\n<br></code><code>\nls server*pem</code></pre><p><br></p><h3>24.从 Github 下载二进制文件</h3><p><a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-%201.18.md#v1183\" target=\"_blank\"><font size=\"3\">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG- 1.20.1.md#v1183</font></a><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fv_p1M2xiYBAKGhbeh-QjmnLRPZU\"><br></p><p><font size=\"4\">git下载太慢我保存在了百度云</font></p><p><font size=\"3\">链接：https://pan.baidu.com/s/1mQPZCxjCnjFxvorkQo9zcA <br>提取码：ue5n <br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><p><br></p><h3>25.解压二进制包</h3><pre><code>mkdir -p /opt/kubernetes/{bin,cfg,ssl,logs}</code><code><br></code><code>tar zxvf kubernetes-server-linux-amd64.tar.gz</code><code>\ncd kubernetes/server/bin</code><code>\ncp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin</code><code>\ncp kubectl /usr/bin/</code></pre><h1><br></h1><h3>26.部署 kube-apiserver</h3><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; EOF\nKUBE_APISERVER_OPTS=\"--logtostderr=false \\\\\n-<span class=\"ruby\">-v=<span class=\"hljs-number\">2</span> \\\\\n</span>-<span class=\"ruby\">-log-dir=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-etcd-servers=https:/</span><span class=\"hljs-regexp\">/192.168.1.71:2379,https:/</span><span class=\"hljs-regexp\">/192.168.1.72:2379,https:/</span><span class=\"hljs-regexp\">/192.168.1.73:2379 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-bind-address=192.168.1.71 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-secure-port=6443 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-advertise-address=192.168.1.71 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-allow-privileged=true \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-service-cluster-ip-range=10.0.0.0/</span><span class=\"hljs-number\">24</span> \\\\\n</span>-<span class=\"ruby\">-enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\\n</span>-<span class=\"ruby\">-authorization-mode=RBAC,Node \\\\\n</span>-<span class=\"ruby\">-enable-bootstrap-token-auth=<span class=\"hljs-literal\">true</span> \\\\\n</span>-<span class=\"ruby\">-token-auth-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/cfg/token</span>.csv \\\\\n</span>-<span class=\"ruby\">-service-node-port-range=<span class=\"hljs-number\">30000</span>-<span class=\"hljs-number\">32767</span> \\\\\n</span>-<span class=\"ruby\">-kubelet-client-certificate=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>.pem \\\\\n</span>-<span class=\"ruby\">-kubelet-client-key=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-tls-cert-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>.pem  \\\\\n</span>-<span class=\"ruby\">-tls-private-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/server</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-client-ca-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-service-account-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-etcd-cafile=<span class=\"hljs-regexp\">/opt/etcd</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-etcd-certfile=<span class=\"hljs-regexp\">/opt/etcd</span><span class=\"hljs-regexp\">/ssl/server</span>.pem \\\\\n</span>-<span class=\"ruby\">-etcd-keyfile=<span class=\"hljs-regexp\">/opt/etcd</span><span class=\"hljs-regexp\">/ssl/server</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-audit-log-maxage=<span class=\"hljs-number\">30</span> \\\\\n</span>-<span class=\"ruby\">-audit-log-maxbackup=<span class=\"hljs-number\">3</span> \\\\\n</span>-<span class=\"ruby\">-audit-log-maxsize=<span class=\"hljs-number\">100</span> \\\\\n</span>-<span class=\"ruby\">-audit-log-path=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs/k</span>8s-audit.log<span class=\"hljs-string\">\"\n</span></span>EOF\n</code></pre><p><br></p><p><br></p><p><font size=\"3\">注：上面两个\\ \\ 第一个是转义符，第二个是换行符，使用转义符是为了使用 EOF 保留换 行符。<br>–logtostderr：启用日志<br>—v：日志等级<br>–log-dir：日志目录<br>–etcd-servers：etcd 集群地址<br>–bind-address：监听地址<br>–secure-port：https 安全端口<br>–advertise-address：集群通告地址<br>–allow-privileged：启用授权<br>–service-cluster-ip-range：Service 虚拟 IP 地址段<br>–enable-admission-plugins：准入控制模块<br>–authorization-mode：认证授权，启用 RBAC 授权和节点自管理<br>–enable-bootstrap-token-auth：启用 TLS bootstrap 机制<br>–token-auth-file：bootstrap token 文件<br>–service-node-port-range：Service nodeport 类型默认分配端口范围<br>–kubelet-client-xxx：apiserver 访问 kubelet 客户端证书<br>–tls-xxx-file：apiserver https 证书<br>–etcd-xxxfile：连接 Etcd 集群证书<br>–audit-log-xxx：审计日志</font></p><p><font size=\"3\"><br></font></p><h2 id=\"o5ri6\">27.把刚才生成的证书拷贝到配置文件中的路径：</h2><pre type=\"Bash\"><code>cp ~<span class=\"hljs-regexp\">/TLS/</span>k8s<span class=\"hljs-regexp\">/ca*pem ~/</span>TLS<span class=\"hljs-regexp\">/k8s/</span>server*pem <span class=\"hljs-regexp\">/opt/</span>kubernetes<span class=\"hljs-regexp\">/ssl/</span></code></pre><h2 id=\"afuze\"><br></h2><h2 id=\"afuze\">28.创建上述配置文件中 token 文件</h2><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/<span class=\"hljs-keyword\">token</span>.csv &lt;&lt; <span class=\"hljs-literal\">EOF</span>\nc47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,<span class=\"hljs-number\">10001</span>,<span class=\"hljs-string\">\"system:node-bootstrapper\"</span>\n<span class=\"hljs-literal\">EOF</span></code></pre><p><br></p><p><br></p><p><font size=\"4\">格式：token，用户名，UID，用户组 token 也可自行生成替换：&nbsp;</font></p><pre type=\"Bash\"><code>head -c <span class=\"hljs-number\">16</span> <span class=\"hljs-regexp\">/dev/u</span>random | od -An -t x | tr -d <span class=\"hljs-string\">\' \'</span></code></pre><p><br></p><p><br></p><h2 id=\"zft2c\">29.<span style=\"font-size: 1em;\">systemd 管理 apiserver</span></h2><div><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes API<span class=\"hljs-built_in\"> Server\n</span><span class=\"hljs-attribute\">Documentation</span>=https://github.com/kubernetes/kubernetes\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-apiserver.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-apiserver \\<span class=\"hljs-variable\">$KUBE_APISERVER_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre></div><p><br></p><p><br></p><h2 id=\"6xcfe\">30.<span style=\"font-size: 1em;\">启动并设置开机启动</span></h2><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kube-apiserver</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kube-apiserver</span></code><code><span class=\"hljs-string\"><br></span></code><code><span class=\"hljs-string\">systemctl status kube-apiserver <br></span></code></pre></div><p><br></p><h2 id=\"j8azv\">31.<span style=\"font-size: 1em;\">授权 kubelet-bootstrap 用户允许请求证书</span></h2><div><pre type=\"Bash\"><code>kubectl create clusterrolebinding kubelet-bootstrap \\\n--<span class=\"hljs-attr\">clusterrole=</span>system:<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-bootstrapper</span> \\\n--<span class=\"hljs-attr\">user=</span>kubelet-bootstrap\n</code></pre></div><p><br></p><p><br></p><h2 id=\"nftpt\">32.<span style=\"font-size: 1em;\">部署 kube-controller-manager</span></h2><div><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; EOF\nKUBE_CONTROLLER_MANAGER_OPTS=\"--logtostderr=false \\\\\n-<span class=\"ruby\">-v=<span class=\"hljs-number\">2</span> \\\\\n</span>-<span class=\"ruby\">-log-dir=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-leader-elect=true \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-master=127.0.0.1:8080 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-bind-address=127.0.0.1 \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-allocate-node-cidrs=true \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-cluster-cidr=10.244.0.0/</span><span class=\"hljs-number\">16</span> \\\\\n</span>-<span class=\"ruby\">-service-cluster-ip-range=<span class=\"hljs-number\">10.0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">24</span> \\\\\n</span>-<span class=\"ruby\">-cluster-signing-cert-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-cluster-signing-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>-key.pem  \\\\\n</span>-<span class=\"ruby\">-root-ca-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>.pem \\\\\n</span>-<span class=\"ruby\">-service-account-private-key-file=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/ssl/ca</span>-key.pem \\\\\n</span>-<span class=\"ruby\">-experimental-cluster-signing-duration=<span class=\"hljs-number\">87600</span>h0m0s<span class=\"hljs-string\">\"\n</span></span>EOF\n</code></pre></div><p><br></p><p><font size=\"3\"><br></font></p><p><font size=\"3\">–master：通过本地非安全本地端口 8080 连接 apiserver。 </font></p><p><font size=\"3\">–leader-elect：当该组件启动多个时，自动选举（HA） </font></p><p><font size=\"3\">–cluster-signing-cert-file/–cluster-signing-key-file：自动为 kubelet 颁发证书 </font></p><p><font size=\"3\">的 CA，与 apiserver 保持一致</font></p><p><font size=\"3\"><br></font></p><h2 id=\"jqmw7\"><font size=\"3\">33.</font><span style=\"font-size: 1em;\">systemd 管理 controller-manager</span></h2><div><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes Controller Manager\n<span class=\"hljs-attribute\">Documentation</span>=https://github.com/kubernetes/kubernetes\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-controller-manager.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-controller-manager \\<span class=\"hljs-variable\">$KUBE_CONTROLLER_MANAGER_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre></div><p><br></p><p><br></p><h2 id=\"zmz2o\">34<span style=\"font-size: 1em;\">. 启动并设置开机启动</span></h2><pre type=\"Bash\"><code>systemctl daemon-reload</code><code><br></code><code>systemctl <span class=\"hljs-keyword\">start</span> kube-controller-manager</code><code><br></code><code>systemctl <span class=\"hljs-keyword\">enable</span> kube-controller-manager</code><code><br></code><code>systemctl status kube-controller-manager<br></code></pre><p><br></p><h2 id=\"x1zuv\">35.<span style=\"font-size: 1em;\">部署 kube-scheduler</span></h2><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">cat</span> <span class=\"hljs-string\">&gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; EOF</span>\n<span class=\"hljs-attr\">KUBE_SCHEDULER_OPTS</span>=<span class=\"hljs-string\">\"--logtostderr=false \\\n--v=2 \\\n--log-dir=/opt/kubernetes/logs \\\n--leader-elect \\\n--master=127.0.0.1:8080 \\\n--bind-address=127.0.0.1\"</span>\n<span class=\"hljs-attr\">EOF</span>\n</code></pre></div><p><br></p><p><br></p><p><font size=\"4\">–master：通过本地非安全本地端口 8080 连接 apiserver。 </font></p><p><font size=\"4\">–leader-elect：当该组件启动多个时，自动选举（HA）</font>&nbsp;</p><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes<span class=\"hljs-built_in\"> Scheduler\n</span><span class=\"hljs-attribute\">Documentation</span>=https://github.com/kubernetes/kubernetes\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-scheduler.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-scheduler \\<span class=\"hljs-variable\">$KUBE_SCHEDULER_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h2 id=\"ol4e3\">36.<span style=\"font-size: 1em;\">启动并设置开机启动</span></h2><div><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kube-scheduler</span></code><code>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kube-scheduler</span></code><code><span class=\"hljs-string\"><br></span></code><code><span class=\"hljs-string\">systemctl status kube-scheduler<br></span></code></pre></div><p><br></p><h2 id=\"qcte9\">37.<span style=\"font-size: 1em;\">查看集群状态</span></h2><p>所有组件都已经启动成功，通过 kubectl 工具查看当前集群组件状态：</p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> cs</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FuX-c-ZkM34kg9n8WsHqZoGHWBmr\" style=\"max-width:100%;\"><br></p><h2 id=\"ox3fr\">38.部署node节点</h2><pre><code>mkdir -p /opt/kubernetes/{bin,cfg,ssl,logs}</code><code><br></code><code>tar zxvf kubernetes-server-linux-amd64.tar.gz</code><code>\ncd kubernetes/server/bin\n\n</code><code>cp kubelet kube-proxy /opt/kubernetes/bin<br></code><code>\ncp kubectl /usr/bin/</code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; EOF\nKUBELET_OPTS=\"--logtostderr=false \\\\\n-<span class=\"ruby\">-v=<span class=\"hljs-number\">2</span> \\\\\n</span>-<span class=\"ruby\">-log-dir=<span class=\"hljs-regexp\">/opt/kubernetes</span><span class=\"hljs-regexp\">/logs \\\\\n</span></span><font color=\"#c24f4a\">-</font><span class=\"ruby\"><span class=\"hljs-regexp\"><font color=\"#c24f4a\">-hostname-override=m1</font> \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-network-plugin=cni \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-kubeconfig=/opt</span><span class=\"hljs-regexp\">/kubernetes/cfg</span><span class=\"hljs-regexp\">/kubelet.kubeconfig \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-bootstrap-kubeconfig=/opt</span><span class=\"hljs-regexp\">/kubernetes/cfg</span><span class=\"hljs-regexp\">/bootstrap.kubeconfig \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-config=/opt</span><span class=\"hljs-regexp\">/kubernetes/cfg</span><span class=\"hljs-regexp\">/kubelet-config.yml \\\\\n</span></span>-<span class=\"ruby\"><span class=\"hljs-regexp\">-cert-dir=/opt</span><span class=\"hljs-regexp\">/kubernetes/ssl</span> \\\\\n</span>-<span class=\"ruby\">-pod-infra-container-image=lizhenliang/pause-<span class=\"hljs-symbol\">amd64:</span><span class=\"hljs-number\">3.0</span><span class=\"hljs-string\">\"\n</span></span>EOF\n</code></pre><p><br></p><p><font size=\"3\">–hostname-override：显示名称，集群中唯一<br>–network-plugin：启用CNI<br>–kubeconfig：空路径，会自动生成，后面用于连接apiserver<br>–bootstrap-kubeconfig：首次启动向apiserver申请证书<br>–config：配置参数文件<br>–cert-dir：kubelet证书生成目录<br>–pod-infra-container-image：管理Pod网络容器的镜像</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-string\">cat</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">/opt/kubernetes/cfg/kubelet-config.yml</span> <span class=\"hljs-string\">&lt;&lt;</span> <span class=\"hljs-string\">EOF</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">KubeletConfiguration</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubelet.config.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10250</span>\n<span class=\"hljs-attr\">readOnlyPort:</span> <span class=\"hljs-number\">10255</span>\n<span class=\"hljs-attr\">cgroupDriver:</span> <span class=\"hljs-string\">cgroupfs</span>\n<span class=\"hljs-attr\">clusterDNS:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.2</span>\n<span class=\"hljs-attr\">clusterDomain:</span> <span class=\"hljs-string\">cluster.local</span> \n<span class=\"hljs-attr\">failSwapOn:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">authentication:</span>\n  <span class=\"hljs-attr\">anonymous:</span>\n    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">webhook:</span>\n    <span class=\"hljs-attr\">cacheTTL:</span> <span class=\"hljs-string\">2m0s</span>\n    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">x509:</span>\n    <span class=\"hljs-attr\">clientCAFile:</span> <span class=\"hljs-string\">/opt/kubernetes/ssl/ca.pem</span> \n<span class=\"hljs-attr\">authorization:</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">Webhook</span>\n  <span class=\"hljs-attr\">webhook:</span>\n    <span class=\"hljs-attr\">cacheAuthorizedTTL:</span> <span class=\"hljs-string\">5m0s</span>\n    <span class=\"hljs-attr\">cacheUnauthorizedTTL:</span> <span class=\"hljs-string\">30s</span>\n<span class=\"hljs-attr\">evictionHard:</span>\n  <span class=\"hljs-attr\">imagefs.available:</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">%</span>\n  <span class=\"hljs-attr\">memory.available:</span> <span class=\"hljs-string\">100Mi</span>\n  <span class=\"hljs-attr\">nodefs.available:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-string\">%</span>\n  <span class=\"hljs-attr\">nodefs.inodesFree:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">%</span>\n<span class=\"hljs-attr\">maxOpenFiles:</span> <span class=\"hljs-number\">1000000</span>\n<span class=\"hljs-attr\">maxPods:</span> <span class=\"hljs-number\">110</span>\n<span class=\"hljs-string\">EOF</span>\n</code></pre><h2><br></h2><h2>39.将master一些配置文件拷贝到node节点上</h2><pre type=\"Bash\"><code>scp -r /opt/kubernetes/ssl root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.181</span>.<span class=\"hljs-number\">134</span><span class=\"hljs-symbol\">:/opt/kubernetes</span></code></pre><p><br></p><h2>40.生成bootstrap.kubeconfig文件</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">KUBE_APISERVER</span>=<span class=\"hljs-string\">\"https://192.168.1.71:6443\"</span> # apiserver IP:PORT\n<span class=\"hljs-attribute\">TOKEN</span>=<span class=\"hljs-string\">\"c47ffb939f5ca36231d9e3121a252940\"</span> # 与token.csv里保持一致\n\n<span class=\"hljs-comment\"># 生成 kubelet bootstrap kubeconfig 配置文件</span>\nkubectl<span class=\"hljs-built_in\"> config </span>set-cluster kubernetes \\\n  <span class=\"hljs-attribute\">--certificate-authority</span>=/opt/kubernetes/ssl/ca.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--server</span>=<span class=\"hljs-variable\">${KUBE_APISERVER}</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-credentials <span class=\"hljs-string\">\"kubelet-bootstrap\"</span> \\\n  <span class=\"hljs-attribute\">--token</span>=<span class=\"hljs-variable\">${TOKEN}</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-context<span class=\"hljs-built_in\"> default </span>\\\n  <span class=\"hljs-attribute\">--cluster</span>=kubernetes \\\n  <span class=\"hljs-attribute\">--user</span>=<span class=\"hljs-string\">\"kubelet-bootstrap\"</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>use-context<span class=\"hljs-built_in\"> default </span><span class=\"hljs-attribute\">--kubeconfig</span>=bootstrap.kubeconfig\n</code></pre><p><br></p><pre type=\"Bash\"><code><font color=\"#cb4b16\">mv</font> <span class=\"hljs-keyword\">bootstrap.kubeconfig </span>/<span class=\"hljs-meta\">opt</span>/kubernetes/cfg</code></pre><p><br></p><h2 id=\"99gjm\">41.systemd管理kubelet</h2><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes Kubelet\n<span class=\"hljs-attribute\">After</span>=docker.service\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kubelet.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kubelet \\<span class=\"hljs-variable\">$KUBELET_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">LimitNOFILE</span>=65536\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h2 id=\"iw02g\">42.启动并设置开机启动</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kubelet</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kubelet</span></code></pre><p><br></p><h2 id=\"ni2yg\">43.批准kubelet证书申请并加入集群(Master操作)</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 查看kubelet证书请求</span>\nkubectl get csr\nNAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION\n<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span>   <span class=\"hljs-number\">6m</span>3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending\n\n<span class=\"hljs-comment\"># 批准申请</span>\nkubectl certificate approve <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span>\n\n<span class=\"hljs-comment\"># 查看节点</span>\nkubectl get <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fsm6eHAp5dT1mtidXWJOnB4w2m78\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">注：由于网络插件还没有部署，节点会没有准备就绪 NotReady</font><br></p><h2 id=\"urosl\">44、部署kube-proxy</h2><div></div><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; /<span class=\"hljs-keyword\">opt</span>/kubernetes/cfg/kube-proxy.<span class=\"hljs-keyword\">conf</span> &lt;&lt; EOF\nKUBE_PROXY_OPTS=<span class=\"hljs-comment\">\"--logtostderr=false \\\\</span>\n--v=<span class=\"hljs-number\">2</span> \\\\\n--<span class=\"hljs-built_in\">log</span>-dir=/<span class=\"hljs-keyword\">opt</span>/kubernetes/logs \\\\\n--config=/<span class=\"hljs-keyword\">opt</span>/kubernetes/cfg/kube-proxy-config.yml<span class=\"hljs-comment\">\"</span>\nEOF\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-string\">cat</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">/opt/kubernetes/cfg/kube-proxy-config.yml</span> <span class=\"hljs-string\">&lt;&lt;</span> <span class=\"hljs-string\">EOF</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">KubeProxyConfiguration</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubeproxy.config.k8s.io/v1alpha1</span>\n<span class=\"hljs-attr\">bindAddress:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-attr\">metricsBindAddress:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">:10249</span>\n<span class=\"hljs-attr\">clientConnection:</span>\n  <span class=\"hljs-attr\">kubeconfig:</span> <span class=\"hljs-string\">/opt/kubernetes/cfg/kube-proxy.kubeconfig</span>\n<span class=\"hljs-attr\">hostnameOverride:</span> <span class=\"hljs-string\">m1</span>\n<span class=\"hljs-attr\">clusterCIDR:</span> <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/24</span>\n<span class=\"hljs-string\">EOF</span></code></pre><h2 id=\"6jm8r\">45.生成kube-proxy.kubeconfig文件(master生成在传到node)</h2><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 切换工作目录</span>\ncd TLS/k8s\n\n<span class=\"hljs-comment\"># 创建证书请求文件</span>\ncat &gt; kube-proxy-csr.json &lt;&lt; EOF\n{\n  <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"system:kube-proxy\"</span>,\n  <span class=\"hljs-string\">\"hosts\"</span>: [],\n  <span class=\"hljs-string\">\"key\"</span>: {\n    <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n    <span class=\"hljs-string\">\"size\"</span>: 2048\n  },\n  <span class=\"hljs-string\">\"names\"</span>: [\n    {\n      <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n      <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>,\n      <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>,\n      <span class=\"hljs-string\">\"O\"</span>: <span class=\"hljs-string\">\"k8s\"</span>,\n      <span class=\"hljs-string\">\"OU\"</span>: <span class=\"hljs-string\">\"System\"</span>\n    }\n  ]\n}\nEOF\n\n<span class=\"hljs-comment\"># 生成证书</span>\ncfssl gencert <span class=\"hljs-attribute\">-ca</span>=ca.pem <span class=\"hljs-attribute\">-ca-key</span>=ca-key.pem <span class=\"hljs-attribute\">-config</span>=ca-config.json <span class=\"hljs-attribute\">-profile</span>=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</code></pre><p><br></p><pre type=\"Bash\"><code>scp -r /root/TLS/k8s root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.181</span>.<span class=\"hljs-number\">134</span><span class=\"hljs-symbol\">:/opt/TLS/</span></code></pre><p><br></p><h2 id=\"xjw28\">46.生成kubeconfig文件</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">KUBE_APISERVER</span>=<span class=\"hljs-string\">\"<font color=\"#c24f4a\">https://192.168.1.71:6443</font>\"</span>\n\nkubectl<span class=\"hljs-built_in\"> config </span>set-cluster kubernetes \\\n  <span class=\"hljs-attribute\">--certificate-authority</span>=/opt/kubernetes/ssl/ca.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--server</span>=<span class=\"hljs-variable\">${KUBE_APISERVER}</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-credentials kube-proxy \\\n  <span class=\"hljs-attribute\">--client-certificate</span>=./kube-proxy.pem \\\n  <span class=\"hljs-attribute\">--client-key</span>=./kube-proxy-key.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>set-context<span class=\"hljs-built_in\"> default </span>\\\n  <span class=\"hljs-attribute\">--cluster</span>=kubernetes \\\n  <span class=\"hljs-attribute\">--user</span>=kube-proxy \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\nkubectl<span class=\"hljs-built_in\"> config </span>use-context<span class=\"hljs-built_in\"> default </span><span class=\"hljs-attribute\">--kubeconfig</span>=kube-proxy.kubeconfig\n</code></pre><p><br></p><pre type=\"Bash\"><code>cp kube-proxy.kubeconfig <span class=\"hljs-regexp\">/opt/</span>kubernetes<span class=\"hljs-regexp\">/cfg/</span></code></pre><p><br></p><h2 id=\"urqvl\">47.systemd管理kube-proxy</h2><pre type=\"Bash\"><code>cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; EOF\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Kubernetes<span class=\"hljs-built_in\"> Proxy\n</span><span class=\"hljs-attribute\">After</span>=network.target\n[Service]\n<span class=\"hljs-attribute\">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-proxy.conf\n<span class=\"hljs-attribute\">ExecStart</span>=/opt/kubernetes/bin/kube-proxy \\<span class=\"hljs-variable\">$KUBE_PROXY_OPTS</span>\n<span class=\"hljs-attribute\">Restart</span>=on-failure\n<span class=\"hljs-attribute\">LimitNOFILE</span>=65536\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target\nEOF\n</code></pre><p><br></p><h2 id=\"vgfq3\">48.启动并设置开机启动</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">daemon-reload</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start kube-proxy</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kube-proxy</span>\n\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">status kube-proxy</span></code></pre><p><br></p><h2 id=\"fcxyd\">49.部署CNI网络</h2><p><font size=\"3\">下载地址：https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz<br></font></p><p><font size=\"3\">node节点操作</font></p><pre type=\"Bash\"><code><span class=\"hljs-symbol\">mkdir</span> /<span class=\"hljs-meta\">opt</span>/cni/<span class=\"hljs-keyword\">bin</span></code><code><span class=\"hljs-keyword\">\n</span><span class=\"hljs-symbol\">tar</span> zxvf cni-plugins-linux-amd64-v0.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">6</span>.tgz -C /<span class=\"hljs-meta\">opt</span>/cni/<span class=\"hljs-keyword\">bin</span></code></pre><p><font size=\"3\"><br></font></p><p><font size=\"3\">master节点操作</font></p><p>链接：https://pan.baidu.com/s/1abu6OwzAgcRdpbEpPPpDnw <br>提取码：hvf3 <br><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f kube-flannel.yml</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FvABBVZAgI20BXq12dJlhs1-uImY\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fgt78UsZiv6BsLo0-fIVY0UGlAHW\" style=\"max-width: 100%;\"><br></p>','1','8','1','1','1','2021-02-17 11:30:54','2021-02-18 15:59:49'),(53,'http://qiniu-picture.xiyanit.cn/FuDEx6ovUY2Ei3uEHi61IQZffF3s','kubernetes 集群 YAML 文件详解','kubernetes,','kubernetes 集群 YAML 文件详解',5,0,0,'1',1,'<h1 id=\"zpfdm\">1、YAML 文件概述 </h1><p>k8s 集群中对资源管理和资源对象编排部署都可以通过声明样式（YAML）文件来解决，也 </p><p>就是可以把需要对资源对象操作编辑到 YAML 格式文件中，我们把这种文件叫做资源清单文 </p><p>件，通过 kubectl 命令直接使用资源清单文件就可以实现对大量的资源对象进行编排部署 </p><p>了。</p><h1 id=\"shf39\">2、YAML 文件书写格式 </h1><h3 id=\"uf04h\">（1）YAML 介绍 </h3><p>YAML ：仍是一种标记语言。为了强调这种语言以数据做为中心，而不是以标记语言为重点。 </p><p>YAML 是一个可读性高，用来表达数据序列的格式。 </p><h3 id=\"sm5hq\">（2）YAML 基本语法 </h3><p>* 使用空格做为缩进 </p><p>* 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 </p><p>* 低版本缩进时不允许使用 Tab 键，只允许使用空格 </p><p>* 使用#标识注释，从这个字符一直到行尾，都会被解释器忽略 </p><h3 id=\"0bnjp\">（3）YAML 支持的数据结构 </h3><p>* 对象 </p><p>键值对的集合，又称为映射(mapping) / 哈希（hashes） / 字典（dictionary）</p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fp1cC1cCzKOMpEexQB4a1cytO4-l\" style=\"max-width:100%;\"><br></p><h3 id=\"wv9fd\">（4）<span style=\"font-size: 1em;\">spec 主要对象</span></h3><div><img src=\"http://qiniu-picture.xiyanit.cn/FnGbhjr6awsqQm3FixHaTMN-siRM\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FgNeHW5Ww-yBX3kzuDCWd4CjvrIn\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FpAwluo-sES5qIf2eLskQDfgX3C2\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fo563IoTBDXjwWX5g7NFcMBN1JhS\" style=\"max-width: 100%;\"><span style=\"font-size: 1em;\"><br></span></div><h3 id=\"rv0cr\">（5）<span style=\"font-size: 1em;\">额外的参数</span></h3><div><img src=\"http://qiniu-picture.xiyanit.cn/FkBvn3-c_TJkbPBi7Vajo7yPduay\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div>','<h1 id=\"zpfdm\">1、YAML 文件概述 </h1><p>k8s 集群中对资源管理和资源对象编排部署都可以通过声明样式（YAML）文件来解决，也 </p><p>就是可以把需要对资源对象操作编辑到 YAML 格式文件中，我们把这种文件叫做资源清单文 </p><p>件，通过 kubectl 命令直接使用资源清单文件就可以实现对大量的资源对象进行编排部署 </p><p>了。</p><h1 id=\"shf39\">2、YAML 文件书写格式 </h1><h3 id=\"uf04h\">（1）YAML 介绍 </h3><p>YAML ：仍是一种标记语言。为了强调这种语言以数据做为中心，而不是以标记语言为重点。 </p><p>YAML 是一个可读性高，用来表达数据序列的格式。 </p><h3 id=\"sm5hq\">（2）YAML 基本语法 </h3><p>* 使用空格做为缩进 </p><p>* 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 </p><p>* 低版本缩进时不允许使用 Tab 键，只允许使用空格 </p><p>* 使用#标识注释，从这个字符一直到行尾，都会被解释器忽略 </p><h3 id=\"0bnjp\">（3）YAML 支持的数据结构 </h3><p>* 对象 </p><p>键值对的集合，又称为映射(mapping) / 哈希（hashes） / 字典（dictionary）</p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fp1cC1cCzKOMpEexQB4a1cytO4-l\" style=\"max-width:100%;\"><br></p><h3 id=\"wv9fd\">（4）<span style=\"font-size: 1em;\">spec 主要对象</span></h3><div><img src=\"http://qiniu-picture.xiyanit.cn/FnGbhjr6awsqQm3FixHaTMN-siRM\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FgNeHW5Ww-yBX3kzuDCWd4CjvrIn\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FpAwluo-sES5qIf2eLskQDfgX3C2\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/Fo563IoTBDXjwWX5g7NFcMBN1JhS\" style=\"max-width: 100%;\"><span style=\"font-size: 1em;\"><br></span></div><h3 id=\"rv0cr\">（5）<span style=\"font-size: 1em;\">额外的参数</span></h3><div><img src=\"http://qiniu-picture.xiyanit.cn/FkBvn3-c_TJkbPBi7Vajo7yPduay\" style=\"max-width:100%;\"><span style=\"font-size: 1em;\"><br></span></div>','1','8','1','1','1','2021-03-06 12:25:09','2021-03-06 12:33:19'),(54,'http://qiniu-picture.xiyanit.cn/FnsVpmcndwxv8DgLYZcABlgIPbT2','Kubernetes的pod核心技术','k8s,','Kubernetes的pod核心技术',7,0,0,'1',1,'<h1 id=\"b0jj5\">1、Pod 概述&nbsp;</h1><p>Pod 是 k8s 系统中可以创建和管理的最小单元，是资源对象模型中由用户创建或部署的最 小资源对象模型，也是在 k8s 上运行容器化应用的资源对象，其他的资源对象都是用来支 撑或者扩展 Pod 对象功能的，比如控制器对象是用来管控 Pod 对象的，Service 或者 Ingress 资源对象是用来暴露 Pod 引用对象的，PersistentVolume 资源对象是用来为 Pod 提供存储等等，k8s 不会直接处理容器，而是 Pod，Pod 是由一个或多个 container 组成 Pod 是 Kubernetes 的最重要概念，每一个 Pod 都有一个特殊的被称为”根容器“的 Pause 容器。Pause 容器对应的镜 像属于 Kubernetes 平台的一部分，除了 Pause 容器，每个 Pod 还包含一个或多个紧密相关的用户业务容器</p><p><font size=\"4\">（1）Pod vs 应用 每个 Pod 都是应用的一个实例，有专用的 IP&nbsp;</font></p><p><font size=\"4\">（2）Pod vs 容器 一个 Pod 可以有多个容器，彼此间共享网络和存储资源，每个 Pod 中有一个 Pause 容器保 存所有的容器状态， 通过管理 pause 容器，达到管理 pod 中所有容器的效果&nbsp;</font></p><p><font size=\"4\">（3）Pod vs 节点 同一个 Pod 中的容器总会被调度到相同 Node 节点，不同节点间 Pod 的通信基于虚拟二层网 络技术实现<br>（4）Pod vs Pod 普通的 Pod 和静态 Pod</font></p><h1 id=\"9k03m\">&nbsp;2、Pod 特性&nbsp;</h1><p><font size=\"4\">（1）资源共享 一个 Pod 里的多个容器可以共享存储和网络，可以看作一个逻辑的主机。共享的如 namespace,cgroups 或者其他的隔离资源。 多个容器共享同一 network namespace，由此在一个 Pod 里的多个容器共享 Pod 的 IP 和 端口 namespace，所以一个 Pod 内的多个容器之间可以通过 localhost 来进行通信,所需要 注意的是不同容器要注意不要有端口冲突即可。不同的 Pod 有不同的 IP,不同 Pod 内的多 个容器之前通信，不可以使用 IPC（如果没有特殊指定的话）通信，通常情况下使用 Pod 的 IP 进行通信。 一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可 以挂载到该 Pod 里的所有容器的文件系统上。&nbsp;</font></p><p><font size=\"4\">（2）生命周期短暂 Pod 属于生命周期比较短暂的组件，比如，当 Pod 所在节点发生故障，那么该节点上的 Pod 会被调度到其他节点，但需要注意的是，被重新调度的 Pod 是一个全新的 Pod,跟之前的 Pod 没有半毛钱关系。&nbsp;</font></p><p><font size=\"4\">（3）平坦的网络 K8s 集群中的所有 Pod 都在同一个共享网络地址空间中，也就是说每个 Pod 都可以通过其 他 Pod 的 IP 地址来实现访问。</font></p><h1><font size=\"4\" id=\"1w081\">3.设置node节点标签</font></h1><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> nodes k8s-node1 --<span class=\"hljs-built_in\">show</span>-<span class=\"hljs-built_in\">labels</span>;\n\nkubectl <span class=\"hljs-built_in\">get</span> nodes k8s-node1 --<span class=\"hljs-built_in\">show</span>-<span class=\"hljs-built_in\">labels</span>;</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FnkpP1_u39u1gxqWF2scDKaY-29k\" style=\"max-width:100%;\" width=\"934.16\" height=\"1177.1\"><br></p><h1 id=\"9hzgq\">4.污点和污点容忍</h1><p>污点值主要有三个</p><p>NoSchedule&nbsp; &nbsp; &nbsp; &nbsp; 一定不被调度</p><p>PreferNoSchedule&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 尽量不会被调度</p><p>NoExecute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;不会调度，并且还会驱逐Node已有的pod</p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkNt9yXlfv4vDRDNwqboZQ1PiCuj\" style=\"max-width:100%;\"><br></p><p>查看污点</p><pre><code>kubectl describe node k8s-master|grep Taint</code></pre><p><font size=\"4\"><br></font></p><p><font size=\"4\">设置节点污点</font></p><pre type=\"Bash\"><code>kubectl taint <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">k8s-node2</span> <span class=\"hljs-attr\">env_role=</span>yes:PreferNoSchedule</code></pre><p><font size=\"4\"><br></font></p><p><font size=\"4\">删除节点污点</font></p><pre type=\"Bash\"><code>kubectl taint <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">k8s-node2</span> <span class=\"hljs-attr\">env_role=</span>yes:PreferNoSchedule-</code></pre><p><font size=\"4\"><br></font></p>','<h1 id=\"b0jj5\">1、Pod 概述&nbsp;</h1><p>Pod 是 k8s 系统中可以创建和管理的最小单元，是资源对象模型中由用户创建或部署的最 小资源对象模型，也是在 k8s 上运行容器化应用的资源对象，其他的资源对象都是用来支 撑或者扩展 Pod 对象功能的，比如控制器对象是用来管控 Pod 对象的，Service 或者 Ingress 资源对象是用来暴露 Pod 引用对象的，PersistentVolume 资源对象是用来为 Pod 提供存储等等，k8s 不会直接处理容器，而是 Pod，Pod 是由一个或多个 container 组成 Pod 是 Kubernetes 的最重要概念，每一个 Pod 都有一个特殊的被称为”根容器“的 Pause 容器。Pause 容器对应的镜 像属于 Kubernetes 平台的一部分，除了 Pause 容器，每个 Pod 还包含一个或多个紧密相关的用户业务容器</p><p><font size=\"4\">（1）Pod vs 应用 每个 Pod 都是应用的一个实例，有专用的 IP&nbsp;</font></p><p><font size=\"4\">（2）Pod vs 容器 一个 Pod 可以有多个容器，彼此间共享网络和存储资源，每个 Pod 中有一个 Pause 容器保 存所有的容器状态， 通过管理 pause 容器，达到管理 pod 中所有容器的效果&nbsp;</font></p><p><font size=\"4\">（3）Pod vs 节点 同一个 Pod 中的容器总会被调度到相同 Node 节点，不同节点间 Pod 的通信基于虚拟二层网 络技术实现<br>（4）Pod vs Pod 普通的 Pod 和静态 Pod</font></p><h1 id=\"9k03m\">&nbsp;2、Pod 特性&nbsp;</h1><p><font size=\"4\">（1）资源共享 一个 Pod 里的多个容器可以共享存储和网络，可以看作一个逻辑的主机。共享的如 namespace,cgroups 或者其他的隔离资源。 多个容器共享同一 network namespace，由此在一个 Pod 里的多个容器共享 Pod 的 IP 和 端口 namespace，所以一个 Pod 内的多个容器之间可以通过 localhost 来进行通信,所需要 注意的是不同容器要注意不要有端口冲突即可。不同的 Pod 有不同的 IP,不同 Pod 内的多 个容器之前通信，不可以使用 IPC（如果没有特殊指定的话）通信，通常情况下使用 Pod 的 IP 进行通信。 一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可 以挂载到该 Pod 里的所有容器的文件系统上。&nbsp;</font></p><p><font size=\"4\">（2）生命周期短暂 Pod 属于生命周期比较短暂的组件，比如，当 Pod 所在节点发生故障，那么该节点上的 Pod 会被调度到其他节点，但需要注意的是，被重新调度的 Pod 是一个全新的 Pod,跟之前的 Pod 没有半毛钱关系。&nbsp;</font></p><p><font size=\"4\">（3）平坦的网络 K8s 集群中的所有 Pod 都在同一个共享网络地址空间中，也就是说每个 Pod 都可以通过其 他 Pod 的 IP 地址来实现访问。</font></p><h1><font size=\"4\" id=\"1w081\">3.设置node节点标签</font></h1><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> nodes k8s-node1 --<span class=\"hljs-built_in\">show</span>-<span class=\"hljs-built_in\">labels</span>;\n\nkubectl <span class=\"hljs-built_in\">get</span> nodes k8s-node1 --<span class=\"hljs-built_in\">show</span>-<span class=\"hljs-built_in\">labels</span>;</code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FnkpP1_u39u1gxqWF2scDKaY-29k\" style=\"max-width:100%;\" width=\"934.16\" height=\"1177.1\"><br></p><h1 id=\"9hzgq\">4.污点和污点容忍</h1><p>污点值主要有三个</p><p>NoSchedule&nbsp; &nbsp; &nbsp; &nbsp; 一定不被调度</p><p>PreferNoSchedule&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 尽量不会被调度</p><p>NoExecute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;不会调度，并且还会驱逐Node已有的pod</p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkNt9yXlfv4vDRDNwqboZQ1PiCuj\" style=\"max-width:100%;\"><br></p><p>查看污点</p><pre><code>kubectl describe node k8s-master|grep Taint</code></pre><p><font size=\"4\"><br></font></p><p><font size=\"4\">设置节点污点</font></p><pre type=\"Bash\"><code>kubectl taint <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">k8s-node2</span> <span class=\"hljs-attr\">env_role=</span>yes:PreferNoSchedule</code></pre><p><font size=\"4\"><br></font></p><p><font size=\"4\">删除节点污点</font></p><pre type=\"Bash\"><code>kubectl taint <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">k8s-node2</span> <span class=\"hljs-attr\">env_role=</span>yes:PreferNoSchedule-</code></pre><p><font size=\"4\"><br></font></p>','1','8','1','1','1','2021-03-06 18:40:24','2021-03-09 11:23:28'),(55,'http://qiniu-picture.xiyanit.cn/FhnnzaFDcuqdzqef8kvPGRpTr55Y','Kubernetes的Controller核心技术','k8s,','Kubernetes的Controller核心技术',24,0,0,'1',1,'<p>运行容器化应用是Kubernetes最重要的核心功能。为满足不同的业务需要，Kubernetes提供了多种Controller，主要包括Deployment、DaemonSet、Job、CronJob等。<br></p><h1 id=\"d12y6\">1、创建资源的两种方式</h1>创建资源主要有通过命令行配置参数和通过配置文件这两种方式。<br>通过命令行主要是使用kubectl命令来进行创建，主要可能用到的是kubectl run和kubectl create，具体的用法我们可以在命令后面加上–-help参数来查看帮助文档。<br>这种方式的好处就是简单快捷，部署的速度比较快，但是遇到要求比较复杂多样的资源部署，后面就要附带一大串参数，容易出错，所以这种方式一般来说比较适用于小规模的简单资源部署或者是上线前的简单测试<br>通过配置文件则主要是json格式或yaml格式的文件，好处是可以详细配置各种参数，保留的配置文件还可以用到其他的集群上进行大规模的部署操作，缺点就是部署比较麻烦，并且需要一定的门槛<br><h1 id=\"rh5i1\">2.弹性收缩，升级回滚</h1><p><font size=\"4\">nginx.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span></code><code>  #副本数\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">3</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">strategy:</span> <span class=\"hljs-string\">{}</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:1.14</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">resources:</span> <span class=\"hljs-string\">{}</span>\n<span class=\"hljs-attr\">status:</span> <span class=\"hljs-string\">{}</span></code></pre><p><br></p><p><font size=\"4\">执行</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f nginx.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fu5cjsQgRIiMsUR9R-5l-97s8FKU\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">应用升级（采用一个一个的进行升级，方便其它服务不会中断）</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">set</span> image deploy nginx <span class=\"hljs-attribute\">nginx</span>=nginx:1.15</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fik7FOF0MIZVybOTQaW9VEsK7SkO\" style=\"max-width:100%;\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FstVL0VgDjSWYjIoIgjmde1iIvyK\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">查询应用是否升级成功</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl rollout status deploy nginx</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FgacdL9DoJbTOag0HqtN2rUPEGej\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">查看升级历史版本</font><br></p><pre type=\"Bash\"><code>kubectl rollout <span class=\"hljs-keyword\">history</span> <span class=\"hljs-keyword\">deploy</span> nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FjcA3st6zKh1Vjg481YPKRyjq8T6\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">应用回滚上一个版本</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl rollout undo deploy nginx</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FgzIRuq709iR-72apIo6JskvqzPp\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">应用回滚指定版本</font><br></p><pre type=\"Bash\"><code>kubectl  rollout undo <span class=\"hljs-keyword\">deploy</span> nginx <span class=\"hljs-params\">--to-revision=2</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvaA8u0V63vbE0P4-dtmEffyxmhU\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">弹性伸缩</font></p><pre type=\"Bash\"><code>kubectl scale <span class=\"hljs-keyword\">deploy</span> nginx <span class=\"hljs-params\">--replicas=10</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvKZU3uw3U0MZ35W-kD-sAtFjTKM\" style=\"max-width:100%;\"><br></p><h1 id=\"zsotb\">3.无状态应用</h1><h1 id=\"goeqn\">4.守护进程</h1><h1 id=\"qro2g\">5.一次任务和定时任务</h1><h1><img src=\"http://qiniu-picture.xiyanit.cn/FuJ2Sj_OvAH2VkDdyBHg1dgfp_pt\"></h1><h1 id=\"h29xy\">6.进入到pod容器中</h1><pre type=\"Bash\"><code><span class=\"hljs-symbol\">kubectl</span> exec -<span class=\"hljs-keyword\">it </span>nginx-<span class=\"hljs-number\">764</span>b95f4c5-<span class=\"hljs-keyword\">bw5zw </span><span class=\"hljs-keyword\">bash;</span></code></pre><p><br></p>','<p>运行容器化应用是Kubernetes最重要的核心功能。为满足不同的业务需要，Kubernetes提供了多种Controller，主要包括Deployment、DaemonSet、Job、CronJob等。<br></p><h1 id=\"d12y6\">1、创建资源的两种方式</h1>创建资源主要有通过命令行配置参数和通过配置文件这两种方式。<br>通过命令行主要是使用kubectl命令来进行创建，主要可能用到的是kubectl run和kubectl create，具体的用法我们可以在命令后面加上–-help参数来查看帮助文档。<br>这种方式的好处就是简单快捷，部署的速度比较快，但是遇到要求比较复杂多样的资源部署，后面就要附带一大串参数，容易出错，所以这种方式一般来说比较适用于小规模的简单资源部署或者是上线前的简单测试<br>通过配置文件则主要是json格式或yaml格式的文件，好处是可以详细配置各种参数，保留的配置文件还可以用到其他的集群上进行大规模的部署操作，缺点就是部署比较麻烦，并且需要一定的门槛<br><h1 id=\"rh5i1\">2.弹性收缩，升级回滚</h1><p><font size=\"4\">nginx.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span></code><code>  #副本数\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">3</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">strategy:</span> <span class=\"hljs-string\">{}</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:1.14</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">resources:</span> <span class=\"hljs-string\">{}</span>\n<span class=\"hljs-attr\">status:</span> <span class=\"hljs-string\">{}</span></code></pre><p><br></p><p><font size=\"4\">执行</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f nginx.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fu5cjsQgRIiMsUR9R-5l-97s8FKU\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">应用升级（采用一个一个的进行升级，方便其它服务不会中断）</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">set</span> image deploy nginx <span class=\"hljs-attribute\">nginx</span>=nginx:1.15</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fik7FOF0MIZVybOTQaW9VEsK7SkO\" style=\"max-width:100%;\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FstVL0VgDjSWYjIoIgjmde1iIvyK\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">查询应用是否升级成功</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl rollout status deploy nginx</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FgacdL9DoJbTOag0HqtN2rUPEGej\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">查看升级历史版本</font><br></p><pre type=\"Bash\"><code>kubectl rollout <span class=\"hljs-keyword\">history</span> <span class=\"hljs-keyword\">deploy</span> nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FjcA3st6zKh1Vjg481YPKRyjq8T6\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">应用回滚上一个版本</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl rollout undo deploy nginx</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FgzIRuq709iR-72apIo6JskvqzPp\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">应用回滚指定版本</font><br></p><pre type=\"Bash\"><code>kubectl  rollout undo <span class=\"hljs-keyword\">deploy</span> nginx <span class=\"hljs-params\">--to-revision=2</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvaA8u0V63vbE0P4-dtmEffyxmhU\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">弹性伸缩</font></p><pre type=\"Bash\"><code>kubectl scale <span class=\"hljs-keyword\">deploy</span> nginx <span class=\"hljs-params\">--replicas=10</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FvKZU3uw3U0MZ35W-kD-sAtFjTKM\" style=\"max-width:100%;\"><br></p><h1 id=\"zsotb\">3.无状态应用</h1><h1 id=\"goeqn\">4.守护进程</h1><h1 id=\"qro2g\">5.一次任务和定时任务</h1><h1><img src=\"http://qiniu-picture.xiyanit.cn/FuJ2Sj_OvAH2VkDdyBHg1dgfp_pt\"></h1><h1 id=\"h29xy\">6.进入到pod容器中</h1><pre type=\"Bash\"><code><span class=\"hljs-symbol\">kubectl</span> exec -<span class=\"hljs-keyword\">it </span>nginx-<span class=\"hljs-number\">764</span>b95f4c5-<span class=\"hljs-keyword\">bw5zw </span><span class=\"hljs-keyword\">bash;</span></code></pre><p><br></p>','1','8','1','1','1','2021-03-07 11:50:01','2021-03-09 11:23:19'),(56,'http://qiniu-picture.xiyanit.cn/FnlivKbeO_GsbBHiBKdK_POeLq9Y','Kubernetes的Secret和ConfigMap实践','Kubernetes,Linux,','Kubernetes的Secret和ConfigMap实践',11,0,0,'1',1,'<h1>1.<span style=\"font-size: 1em;\" id=\"1rvjl\">Secret</span></h1><div><font size=\"4\"><strong>Secret</strong>解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。</font><span style=\"font-size: 1em;\"><br></span></div><div><h2 id=\"mja4v\">1.1Secret类型</h2><h3 id=\"15wzl\">Secret有三种类型：</h3><font size=\"3\"><font color=\"#c24f4a\">Opaque：</font>base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱。<br><font color=\"#c24f4a\">kubernetes.io/dockerconfigjson：</font>用来存储私有docker registry的认证信息。<br><font color=\"#c24f4a\">kubernetes.io/service-account-token</font>： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/ kubernetes.io/serviceaccount中。</font><h2 id=\"mvase\">1.2Opaque Secret 方式</h2><font size=\"3\">Opaque类型的数据是一个map类型，要求value是base64编码格式：</font><pre type=\"Bash\"><code>echo -n <span class=\"hljs-string\">\"admin\"</span> <span class=\"hljs-string\">| base64</span>\nYWRtaW4=\necho -n <span class=\"hljs-string\">\"1f2d1e2e67df\"</span> <span class=\"hljs-string\">| base64</span>\nMWYyZDFlMmU2N2Rm\n</code></pre></div><h2>1.3&nbsp;<span style=\"font-size: 1em;\">secret.yaml</span></h2><div><pre type=\"Bash\"><code>apiVersion: v1\nkind:<span class=\"hljs-built_in\"> Secret\n</span>metadata:\n  name: mysecret\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  password: MWYyZDFlMmU2N2Rm\n</code></pre></div><p><br></p><p><font size=\"4\">执行</font></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">secret</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><p><br></p><h2 id=\"xz90k\">1.4 secret-var.yaml 以变量的形式</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: mypod\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n  - <span class=\"hljs-attribute\">name</span>: nginx\n    <span class=\"hljs-attribute\">image</span>: nginx\n    <span class=\"hljs-attribute\">env</span>:\n      - <span class=\"hljs-attribute\">name</span>: SECRET_USERNAME\n        <span class=\"hljs-attribute\">valueFrom</span>:\n          <span class=\"hljs-attribute\">secretKeyRef</span>:\n            <span class=\"hljs-attribute\">name</span>: mysecret\n            <span class=\"hljs-attribute\">key</span>: username\n      - <span class=\"hljs-attribute\">name</span>: SECRET_PASSWORD\n        <span class=\"hljs-attribute\">valueFrom</span>:\n          <span class=\"hljs-attribute\">secretKeyRef</span>:\n            <span class=\"hljs-attribute\">name</span>: mysecret\n            <span class=\"hljs-attribute\">key</span>: password\n</code></pre><p><br></p><p><font size=\"4\">执行</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f secret-<span class=\"hljs-built_in\">var</span>.yaml</code></pre><p><br></p><p><font size=\"4\">查看</font></p><pre type=\"Bash\"><code>kubectl exec -it mypod bash<span class=\"hljs-comment\">;</span></code></pre><pre type=\"Bash\"><code><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$SECRET_USERNAME</span>\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$SECRET_PASSWORD</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fg9o-rMSrXTXBl9a3HefwcybL0j5\" style=\"max-width:100%;\"><br></p><p><br></p><h2 id=\"l8ae4\">1.5 secret-vol.yaml 以挂载的方式<br></h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Pod</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mypod</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">containers:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">volumeMounts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">foo</span>\n      <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">\"/etc/foo\"</span>\n      <span class=\"hljs-attr\">readOnly:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">volumes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">foo</span>\n    <span class=\"hljs-attr\">secret:</span>\n      <span class=\"hljs-attr\">secretName:</span> <span class=\"hljs-string\">mysecret</span></code></pre><p><font size=\"4\">运行</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f secret-vol.yaml</code></pre><p><font size=\"4\">查看</font></p><pre type=\"Bash\"><code>kubectl exec -it mypod bash<span class=\"hljs-comment\">;</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FonGua7xrvX7NNnzDyxDuPzRbZ9U\" style=\"max-width:100%;\"><br></p><h2 id=\"5b9v4\">1.6kubernetes.io/dockerconfigjson方式</h2><pre type=\"Bash\"><code>kubectl create<span class=\"hljs-built_in\"> secret </span>docker-registry myregistrykey <span class=\"hljs-attribute\">--docker-server</span>=DOCKER_REGISTRY_SERVER <span class=\"hljs-attribute\">--docker-username</span>=DOCKER_USER <span class=\"hljs-attribute\">--docker-password</span>=DOCKER_PASSWORD <span class=\"hljs-attribute\">--docker-email</span>=DOCKER_EMAIL</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> secret </span>myregistrykey  -o yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FksvG5u6OnOJY4gNzrANadUcySgn\" style=\"max-width:100%;\"><br></p><h2 id=\"7bext\">1.7也可以直接读取<code>~/.dockercfg</code>的内容来创建</h2><pre type=\"Bash\"><code>kubectl create<span class=\"hljs-built_in\"> secret </span>docker-registry myregistrykey \\  <span class=\"hljs-attribute\">--from-file</span>=<span class=\"hljs-string\">\"~/.dockercfg\"</span></code></pre><h2 id=\"r7qte\">1.8在创建Pod的时候，通过<code style=\"font-size: 14px;\">imagePullSecrets</code>来引用刚创建的<code style=\"font-size: 14px;\">myregistrykey</code>:</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: foo\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n    - <span class=\"hljs-attribute\">name</span>: foo\n      <span class=\"hljs-attribute\">image</span>: janedoe/<span class=\"hljs-attribute\">awesomeapp</span>:v1\n  <span class=\"hljs-attribute\">imagePullSecrets</span>:\n    - <span class=\"hljs-attribute\">name</span>: myregistrykey\n</code></pre><h2>1.9&nbsp;<span style=\"font-size: 1em;\">kubernetes.io/service-account-token</span></h2><h3><p>kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中。</p><pre type=\"Bash\"><code>$ kubectl run nginx --image nginx\ndeployment <span class=\"hljs-string\">\"nginx\"</span> created\n$ kubectl <span class=\"hljs-keyword\">get</span> pods\nNAME                     READY     STATUS    RESTARTS   AGE\nnginx<span class=\"hljs-number\">-3137573019</span>-md1u2   <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>       Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">13</span>s\n$ kubectl exec nginx<span class=\"hljs-number\">-3137573019</span>-md1u2 ls /run/secrets/kubernetes.io/serviceaccount\nca.crt\n<span class=\"hljs-keyword\">namespace</span>\n<span class=\"hljs-symbol\">token</span>\n</code></pre></h3><p><br></p><h1 id=\"5kkez\">2.configmap</h1><p>ConfigMaps允许您将配置构件与映像内容解耦，以保持容器化应用程序的可移植性。本文展示如何创建configmap，修改configmap以及如何把configmap应用于pod.<br></p><p><font size=\"4\">2.1redis.properties</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">redis.host</span>=<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\n<span class=\"hljs-attr\">redis.port</span>=<span class=\"hljs-number\">6379</span>\n<span class=\"hljs-attr\">redis.password</span>=<span class=\"hljs-number\">123456</span>\n</code></pre><p><br></p><h2><font size=\"3\" id=\"ddbmi\">2.2创建configmap</font></h2><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> configmap redis-<span class=\"hljs-built_in\">config</span> <span class=\"hljs-comment\">--from-file=redis.properties</span></code></pre><h2 id=\"f1vco\">2.3查询configmap</h2><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> cm</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FpMhLsvnGmh9cQkX0AUFp70qQ0K3\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code>kubectl describe cm redis-<span class=\"hljs-built_in\">config</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FprNVsVvVxK3bKB1q6rbtDXEDdQg\" style=\"max-width:100%;\"><br></p><p><br></p><h2 id=\"ep6pu\">2.3&nbsp;<span style=\"font-size: 1em;\">volumes方式挂载</span></h2><div><font size=\"4\">cm.yaml</font></div><div><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: mypod\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n    - <span class=\"hljs-attribute\">name</span>: busybox\n      <span class=\"hljs-attribute\">image</span>: busybox\n      <span class=\"hljs-attribute\">command</span>: [ <span class=\"hljs-string\">\"/bin/sh\"</span>,<span class=\"hljs-string\">\"-c\"</span>,<span class=\"hljs-string\">\"cat /etc/config/redis.properties\"</span> ]\n      <span class=\"hljs-attribute\">volumeMounts</span>:\n      - <span class=\"hljs-attribute\">name</span>: config-volume\n        <span class=\"hljs-attribute\">mountPath</span>: /etc/<span class=\"hljs-attribute\">config</span>\n    - <span class=\"hljs-attribute\">name</span>: config-volume\n      <span class=\"hljs-attribute\">configMap</span>:\n        <span class=\"hljs-attribute\">name</span>: redis-config\n  <span class=\"hljs-attribute\">restartPolicy</span>: Never\n</code></pre></div><p><br></p><h2 id=\"4bwyl\">2.4运行</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">cm</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl logs mypod</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnDXQpjMjtBFFffe8Y5qH4n4Q2zW\" style=\"max-width:100%;\"><br></p><h2 id=\"gv7gs\">2.5变量形式进行挂载</h2><p>myconfig.yaml</p><pre type=\"Bash\"><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myconfig\n  namespace:<span class=\"hljs-built_in\"> default\n</span>data:\n  special.level: <span class=\"hljs-builtin-name\">info</span>\n  special.type: hello\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">myconfig</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FqHOZk3nKEUKfMAwgAvGmkugwSHE\" style=\"max-width:100%;\"><br></p><p><br></p><p>config-var.yaml</p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: mypod\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n    - <span class=\"hljs-attribute\">name</span>: busybox\n      <span class=\"hljs-attribute\">image</span>: busybox\n      <span class=\"hljs-attribute\">command</span>: [ <span class=\"hljs-string\">\"/bin/sh\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"echo $(LEVEL) $(TYPE)\"</span> ]\n      <span class=\"hljs-attribute\">env</span>:\n        - <span class=\"hljs-attribute\">name</span>: LEVEL\n          <span class=\"hljs-attribute\">valueFrom</span>:\n            <span class=\"hljs-attribute\">configMapKeyRef</span>:\n              <span class=\"hljs-attribute\">name</span>: myconfig\n              <span class=\"hljs-attribute\">key</span>: special.level\n        - <span class=\"hljs-attribute\">name</span>: TYPE\n          <span class=\"hljs-attribute\">valueFrom</span>:\n            <span class=\"hljs-attribute\">configMapKeyRef</span>:\n              <span class=\"hljs-attribute\">name</span>: myconfig\n              <span class=\"hljs-attribute\">key</span>: special.type\n  <span class=\"hljs-attribute\">restartPolicy</span>: Never\n</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> -f <span class=\"hljs-built_in\">config</span>-var.yaml</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fv549zl-8E7_D9Nl2vpR4s1KCyf_\" style=\"max-width:100%;\"><br></p><blockquote><h1 id=\"7688u\">3.Secret与ConfigMap对比</h1><font size=\"4\">相同点：</font><br><br><font color=\"#8baa4a\">key/value的形式<br>属于某个特定的namespace<br>可以导出到环境变量<br>可以通过目录/文件形式挂载(支持挂载所有key和部分key)</font><p><br><font size=\"4\">不同点：</font></p><p><font size=\"4\"><br></font><font color=\"#8baa4a\">Secret可以被ServerAccount关联(使用)<br>Secret可以存储register的鉴权信息，用在ImagePullSecret参数中，用于拉取私有仓库的镜像<br>Secret支持Base64加密<br>Secret分为kubernetes.io/Service Account，kubernetes.io/dockerconfigjson，Opaque三种类型,Configmap不区分类型<br>Secret文件存储在tmpfs文件系统中，Pod删除后Secret文件也会对应的删除。</font><br></p></blockquote>','<h1>1.<span style=\"font-size: 1em;\" id=\"1rvjl\">Secret</span></h1><div><font size=\"4\"><strong>Secret</strong>解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。</font><span style=\"font-size: 1em;\"><br></span></div><div><h2 id=\"mja4v\">1.1Secret类型</h2><h3 id=\"15wzl\">Secret有三种类型：</h3><font size=\"3\"><font color=\"#c24f4a\">Opaque：</font>base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱。<br><font color=\"#c24f4a\">kubernetes.io/dockerconfigjson：</font>用来存储私有docker registry的认证信息。<br><font color=\"#c24f4a\">kubernetes.io/service-account-token</font>： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/ kubernetes.io/serviceaccount中。</font><h2 id=\"mvase\">1.2Opaque Secret 方式</h2><font size=\"3\">Opaque类型的数据是一个map类型，要求value是base64编码格式：</font><pre type=\"Bash\"><code>echo -n <span class=\"hljs-string\">\"admin\"</span> <span class=\"hljs-string\">| base64</span>\nYWRtaW4=\necho -n <span class=\"hljs-string\">\"1f2d1e2e67df\"</span> <span class=\"hljs-string\">| base64</span>\nMWYyZDFlMmU2N2Rm\n</code></pre></div><h2>1.3&nbsp;<span style=\"font-size: 1em;\">secret.yaml</span></h2><div><pre type=\"Bash\"><code>apiVersion: v1\nkind:<span class=\"hljs-built_in\"> Secret\n</span>metadata:\n  name: mysecret\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  password: MWYyZDFlMmU2N2Rm\n</code></pre></div><p><br></p><p><font size=\"4\">执行</font></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">secret</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><p><br></p><h2 id=\"xz90k\">1.4 secret-var.yaml 以变量的形式</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: mypod\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n  - <span class=\"hljs-attribute\">name</span>: nginx\n    <span class=\"hljs-attribute\">image</span>: nginx\n    <span class=\"hljs-attribute\">env</span>:\n      - <span class=\"hljs-attribute\">name</span>: SECRET_USERNAME\n        <span class=\"hljs-attribute\">valueFrom</span>:\n          <span class=\"hljs-attribute\">secretKeyRef</span>:\n            <span class=\"hljs-attribute\">name</span>: mysecret\n            <span class=\"hljs-attribute\">key</span>: username\n      - <span class=\"hljs-attribute\">name</span>: SECRET_PASSWORD\n        <span class=\"hljs-attribute\">valueFrom</span>:\n          <span class=\"hljs-attribute\">secretKeyRef</span>:\n            <span class=\"hljs-attribute\">name</span>: mysecret\n            <span class=\"hljs-attribute\">key</span>: password\n</code></pre><p><br></p><p><font size=\"4\">执行</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f secret-<span class=\"hljs-built_in\">var</span>.yaml</code></pre><p><br></p><p><font size=\"4\">查看</font></p><pre type=\"Bash\"><code>kubectl exec -it mypod bash<span class=\"hljs-comment\">;</span></code></pre><pre type=\"Bash\"><code><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$SECRET_USERNAME</span>\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$SECRET_PASSWORD</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fg9o-rMSrXTXBl9a3HefwcybL0j5\" style=\"max-width:100%;\"><br></p><p><br></p><h2 id=\"l8ae4\">1.5 secret-vol.yaml 以挂载的方式<br></h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Pod</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mypod</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">containers:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">volumeMounts:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">foo</span>\n      <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">\"/etc/foo\"</span>\n      <span class=\"hljs-attr\">readOnly:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">volumes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">foo</span>\n    <span class=\"hljs-attr\">secret:</span>\n      <span class=\"hljs-attr\">secretName:</span> <span class=\"hljs-string\">mysecret</span></code></pre><p><font size=\"4\">运行</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f secret-vol.yaml</code></pre><p><font size=\"4\">查看</font></p><pre type=\"Bash\"><code>kubectl exec -it mypod bash<span class=\"hljs-comment\">;</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FonGua7xrvX7NNnzDyxDuPzRbZ9U\" style=\"max-width:100%;\"><br></p><h2 id=\"5b9v4\">1.6kubernetes.io/dockerconfigjson方式</h2><pre type=\"Bash\"><code>kubectl create<span class=\"hljs-built_in\"> secret </span>docker-registry myregistrykey <span class=\"hljs-attribute\">--docker-server</span>=DOCKER_REGISTRY_SERVER <span class=\"hljs-attribute\">--docker-username</span>=DOCKER_USER <span class=\"hljs-attribute\">--docker-password</span>=DOCKER_PASSWORD <span class=\"hljs-attribute\">--docker-email</span>=DOCKER_EMAIL</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> secret </span>myregistrykey  -o yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FksvG5u6OnOJY4gNzrANadUcySgn\" style=\"max-width:100%;\"><br></p><h2 id=\"7bext\">1.7也可以直接读取<code>~/.dockercfg</code>的内容来创建</h2><pre type=\"Bash\"><code>kubectl create<span class=\"hljs-built_in\"> secret </span>docker-registry myregistrykey \\  <span class=\"hljs-attribute\">--from-file</span>=<span class=\"hljs-string\">\"~/.dockercfg\"</span></code></pre><h2 id=\"r7qte\">1.8在创建Pod的时候，通过<code style=\"font-size: 14px;\">imagePullSecrets</code>来引用刚创建的<code style=\"font-size: 14px;\">myregistrykey</code>:</h2><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: foo\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n    - <span class=\"hljs-attribute\">name</span>: foo\n      <span class=\"hljs-attribute\">image</span>: janedoe/<span class=\"hljs-attribute\">awesomeapp</span>:v1\n  <span class=\"hljs-attribute\">imagePullSecrets</span>:\n    - <span class=\"hljs-attribute\">name</span>: myregistrykey\n</code></pre><h2>1.9&nbsp;<span style=\"font-size: 1em;\">kubernetes.io/service-account-token</span></h2><h3><p>kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中。</p><pre type=\"Bash\"><code>$ kubectl run nginx --image nginx\ndeployment <span class=\"hljs-string\">\"nginx\"</span> created\n$ kubectl <span class=\"hljs-keyword\">get</span> pods\nNAME                     READY     STATUS    RESTARTS   AGE\nnginx<span class=\"hljs-number\">-3137573019</span>-md1u2   <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>       Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">13</span>s\n$ kubectl exec nginx<span class=\"hljs-number\">-3137573019</span>-md1u2 ls /run/secrets/kubernetes.io/serviceaccount\nca.crt\n<span class=\"hljs-keyword\">namespace</span>\n<span class=\"hljs-symbol\">token</span>\n</code></pre></h3><p><br></p><h1 id=\"5kkez\">2.configmap</h1><p>ConfigMaps允许您将配置构件与映像内容解耦，以保持容器化应用程序的可移植性。本文展示如何创建configmap，修改configmap以及如何把configmap应用于pod.<br></p><p><font size=\"4\">2.1redis.properties</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">redis.host</span>=<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\n<span class=\"hljs-attr\">redis.port</span>=<span class=\"hljs-number\">6379</span>\n<span class=\"hljs-attr\">redis.password</span>=<span class=\"hljs-number\">123456</span>\n</code></pre><p><br></p><h2><font size=\"3\" id=\"ddbmi\">2.2创建configmap</font></h2><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> configmap redis-<span class=\"hljs-built_in\">config</span> <span class=\"hljs-comment\">--from-file=redis.properties</span></code></pre><h2 id=\"f1vco\">2.3查询configmap</h2><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> cm</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FpMhLsvnGmh9cQkX0AUFp70qQ0K3\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code>kubectl describe cm redis-<span class=\"hljs-built_in\">config</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FprNVsVvVxK3bKB1q6rbtDXEDdQg\" style=\"max-width:100%;\"><br></p><p><br></p><h2 id=\"ep6pu\">2.3&nbsp;<span style=\"font-size: 1em;\">volumes方式挂载</span></h2><div><font size=\"4\">cm.yaml</font></div><div><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: mypod\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n    - <span class=\"hljs-attribute\">name</span>: busybox\n      <span class=\"hljs-attribute\">image</span>: busybox\n      <span class=\"hljs-attribute\">command</span>: [ <span class=\"hljs-string\">\"/bin/sh\"</span>,<span class=\"hljs-string\">\"-c\"</span>,<span class=\"hljs-string\">\"cat /etc/config/redis.properties\"</span> ]\n      <span class=\"hljs-attribute\">volumeMounts</span>:\n      - <span class=\"hljs-attribute\">name</span>: config-volume\n        <span class=\"hljs-attribute\">mountPath</span>: /etc/<span class=\"hljs-attribute\">config</span>\n    - <span class=\"hljs-attribute\">name</span>: config-volume\n      <span class=\"hljs-attribute\">configMap</span>:\n        <span class=\"hljs-attribute\">name</span>: redis-config\n  <span class=\"hljs-attribute\">restartPolicy</span>: Never\n</code></pre></div><p><br></p><h2 id=\"4bwyl\">2.4运行</h2><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">cm</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl logs mypod</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnDXQpjMjtBFFffe8Y5qH4n4Q2zW\" style=\"max-width:100%;\"><br></p><h2 id=\"gv7gs\">2.5变量形式进行挂载</h2><p>myconfig.yaml</p><pre type=\"Bash\"><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myconfig\n  namespace:<span class=\"hljs-built_in\"> default\n</span>data:\n  special.level: <span class=\"hljs-builtin-name\">info</span>\n  special.type: hello\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">myconfig</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FqHOZk3nKEUKfMAwgAvGmkugwSHE\" style=\"max-width:100%;\"><br></p><p><br></p><p>config-var.yaml</p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">kind</span>: Pod\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: mypod\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">containers</span>:\n    - <span class=\"hljs-attribute\">name</span>: busybox\n      <span class=\"hljs-attribute\">image</span>: busybox\n      <span class=\"hljs-attribute\">command</span>: [ <span class=\"hljs-string\">\"/bin/sh\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"echo $(LEVEL) $(TYPE)\"</span> ]\n      <span class=\"hljs-attribute\">env</span>:\n        - <span class=\"hljs-attribute\">name</span>: LEVEL\n          <span class=\"hljs-attribute\">valueFrom</span>:\n            <span class=\"hljs-attribute\">configMapKeyRef</span>:\n              <span class=\"hljs-attribute\">name</span>: myconfig\n              <span class=\"hljs-attribute\">key</span>: special.level\n        - <span class=\"hljs-attribute\">name</span>: TYPE\n          <span class=\"hljs-attribute\">valueFrom</span>:\n            <span class=\"hljs-attribute\">configMapKeyRef</span>:\n              <span class=\"hljs-attribute\">name</span>: myconfig\n              <span class=\"hljs-attribute\">key</span>: special.type\n  <span class=\"hljs-attribute\">restartPolicy</span>: Never\n</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">create</span> -f <span class=\"hljs-built_in\">config</span>-var.yaml</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fv549zl-8E7_D9Nl2vpR4s1KCyf_\" style=\"max-width:100%;\"><br></p><blockquote><h1 id=\"7688u\">3.Secret与ConfigMap对比</h1><font size=\"4\">相同点：</font><br><br><font color=\"#8baa4a\">key/value的形式<br>属于某个特定的namespace<br>可以导出到环境变量<br>可以通过目录/文件形式挂载(支持挂载所有key和部分key)</font><p><br><font size=\"4\">不同点：</font></p><p><font size=\"4\"><br></font><font color=\"#8baa4a\">Secret可以被ServerAccount关联(使用)<br>Secret可以存储register的鉴权信息，用在ImagePullSecret参数中，用于拉取私有仓库的镜像<br>Secret支持Base64加密<br>Secret分为kubernetes.io/Service Account，kubernetes.io/dockerconfigjson，Opaque三种类型,Configmap不区分类型<br>Secret文件存储在tmpfs文件系统中，Pod删除后Secret文件也会对应的删除。</font><br></p></blockquote>','1','8','1','1','1','2021-03-08 18:52:23','2021-03-09 10:20:33'),(57,'http://qiniu-picture.xiyanit.cn/FhMHrHaTwQ1zXn7ylvIA5Zucl_c1','Kubernetes集群安全机制(RBAC)','Kubernetes,K8s,Linux,','Kubernetes集群安全机制(RBAC)',20,0,0,'1',1,'<h1 id=\"wr9cg\">Kubernetes api-server 安全访问机制</h1><font size=\"3\">kube-apiserver 是 k8s 整个集群的入口，是一个 REST API 服务，提供的 API 实现了 Kubernetes 各类资源对象（如 Pod，RC，Service 等）的增、删、改、查，API Server 也是集群内各个功能模块之间交互和通信的枢纽，是整个集群的总线和数据中心。</font><br><br><p><img src=\"https://img-blog.csdnimg.cn/20190822131030934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5naGFvaGFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p>由此可见 API Server 的重要性了，我们用 kubectl、各种语言提供的客户端库或者发送 REST 请求和集群交互，其实底层都是以 HTTP REST 请求的方式同 API Server 交互，那么访问的安全机制是如何保证的呢，总不能随便来一个请求都能接受并响应吧。API Server 为此提供了一套特有的、灵活的安全机制，每个请求到达 API Server 后都会经过：认证(Authentication)–&gt;授权(Authorization)–&gt;准入控制(Admission Control) 三道安全关卡，通过这三道安全关卡的请求才给予响应：<br><img src=\"https://img-blog.csdnimg.cn/20190822131053725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5naGFvaGFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"2tctl\">认证(Authentication)</h1><font size=\"3\">认证阶段的工作是识别用户身份，支持的认证方式有很多，比如：HTTP Base，HTTP token，TLS，Service Account，OpenID Connect 等，API Server 启动时可以同时指定多种认证方式，会逐个使用这些方法对客户请求认证，只要通过任意一种认证方式，API Server 就会认为 Authentication 成功。高版本的 Kubernetes 默认认证方式是 TLS。在 TLS 认证方案中，每个用户都拥有自己的 X.509 客户端证书，API 服务器通过配置的证书颁发机构（CA）验证客户端证书。<br></font><br><h1 id=\"frc69\">授权(Authorization)</h1><font size=\"3\">授权阶段判断请求是否有相应的权限，授权方式有多种：AlwaysDeny，AlwaysAllow，ABAC，RBAC，Node 等。API Server 启动时如果多种授权模式同时被启用，Kubernetes 将检查所有模块，如果其中一种通过授权，则请求授权通过。 如果所有的模块全部拒绝，则请求被拒绝(HTTP状态码403)。高版本 Kubernetes 默认开启的授权方式是 RBAC 和 Node。</font><br><h1 id=\"mchql\"><br>准入控制(Admission Control)</h1><font size=\"3\">准入控制判断操作是否符合集群要求，准入控制配备有一个“准入控制器”的列表，发送给 API Server 的每个请求都需要通过每个准入控制器的检查，检查不通过，则 API Server 拒绝调用请求，有点像 Web 编程的拦截器的意思。具体细节在这里不进行展开了，如想进一步了解见这里：Using Admission Controllers。<br><br>Kubernetes 认证方式之客户端证书（TLS）<br>通过上一节介绍我们知道 Kubernetes 认证方式有多种，这里我们简单介绍下客户端证书（TLS）认证方式，也叫 HTTPS 双向认证。一般我们访问一个 https 网站，认证是单向的，只有客户端会验证服务端的身份，服务端不会管客户端身份如何。我们来大概看下 HTTPS 握手过程（单向认证）：<br><br>客户端发送 Client Hello 消息给服务端；<br>服务端回复 Server Hello 消息和自身证书给客户端；<br>客户端检查服务端证书的合法性，证书检查通过后根据双方发送的消息生成 Premaster Key，然后用服务端的证书里面的公钥加密 Premaster Key 并发送给服务端 ；<br>服务端通过自己的私钥解密得到 Premaster Key，然后通过双方协商的算法和交换的消息生成 Session Key（后续双方数据加密用的对称密钥，客户端也能通过同样的方法生成同样的 Key），然后回复客户端一个消息表明握手结束，后续发送的消息会以协商的对称密钥加密。</font><br><h1 id=\"d2vx9\">Kubernetes 授权方式之 RBAC 介绍</h1><font size=\"3\">基于角色的访问控制（Role-Based Access Control, 即 RBAC），是 k8s 提供的一种授权策略，也是新版集群默认启用的方式。RBAC 将角色和角色绑定分开，角色指的是一组定义好的操作集群资源的权限，而角色绑定是将角色和用户、组或者服务账号实体绑定，从而赋予这些实体权限。可以看出 RBAC 这种授权方式很灵活，要赋予某个实体权限只需要绑定相应的角色即可。针对 RBAC 机制，k8s 提供了四种 API 资源：<font color=\"#f9963b\">Role、ClusterRole、RoleBinding、ClusterRoleBinding。</font></font><div><br></div><p><font size=\"3\">查看命名空间</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> ns;</code></pre><p><br></p><p><font size=\"3\">创建命名空间</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl create ns roletest</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FoYuxcuQr60uoMbOv26QyZoT3hiQ\"><br></p><p><font size=\"3\">在创建roletest命名空间下pod</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">run</span> nginx <span class=\"hljs-attribute\">--image</span>=nginx -n roletest</code></pre><p><font size=\"3\">查看</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pod -n roletest</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FmnmdaR8ljpUj3UzO5qGQjzmZ-HX\" style=\"max-width:100%;\"><br></p><p><br></p><blockquote><div><font size=\"3\">Role: 只能用于授予对某一单一命名空间中资源的访问权限，因此在定义时必须指定 namespace；<br>以下示例描述了 default 命名空间中的一个 Role 对象的定义，用于授予对 pod 的读访问权限：</font></div><div></div></blockquote><p><br></p><p><font size=\"3\"></font></p><code>角色</code><p><font size=\"3\">rbac-role.yaml</font></p><pre type=\"Bash\"><code>kind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: roletest\n  name: pod-reader\nrules:\n- apiGroups: [<span class=\"hljs-string\">\"\"</span>] # <span class=\"hljs-string\">\"\"</span> indicates the core API<span class=\"hljs-built_in\"> group\n</span>  resources: [<span class=\"hljs-string\">\"pods\"</span>]\n  verbs: [<span class=\"hljs-string\">\"get\"</span>, <span class=\"hljs-string\">\"watch\"</span>, <span class=\"hljs-string\">\"list\"</span>]\n</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl apply -f rbac-<span class=\"hljs-keyword\">role</span>.yaml</code></pre><blockquote><p><font size=\"3\" color=\"#f9963b\">rules.verbs 动作	权限<br>create 创建	写入 Pod 动作/资源<br>update 更新	写入 Pod 动作/资源<br>delete 删除	写入 Pod 动作/资源<br>watch	读取 Pod 动作/资源<br>list 列出	读取 Pod 动作/资源<br>patch	写入 Pod 动作/资源<br>get 查看	读取 Pod 动作/资源</font><br><br></p><p><strong><font color=\"#f9963b\" size=\"3\">resources：[“deployments”,“jobs”,“pods”,“configmaps”,“nodes”] 不管是什么资源控制器都需要加上 s</font></strong><br></p></blockquote><p><br></p><p><font size=\"3\">查看</font></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">role</span> <span class=\"hljs-title\">-n</span> roletest</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fmza9_B3wrCsFYn-t_zq2SZ3qxSa\" style=\"max-width:100%;\"><br></p><p><br></p><p><font size=\"3\">角色绑定</font></p><p><font size=\"3\">rbac-rolebinding.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">RoleBinding</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">read-pods</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">roletest</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">User</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mary</span> <span class=\"hljs-comment\"># Name is case sensitive</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Role</span> <span class=\"hljs-comment\">#this must be Role or ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pod-reader</span> <span class=\"hljs-comment\"># this must match the name of the Role or ClusterRole you wish to bind to</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> apply <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">rbac-rolebinding</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> RoleBinding -n roletest</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnYtrjZuKbv0wFuhKxXF4HN86ohp\" style=\"max-width:100%;\"><br></p><p><br></p><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点</p><pre type=\"Bash\"><code>wget <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pkg.cfssl.org/R1.2/cfssl_linux-amd64</span>\nwget <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span>\nwget <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span>\nchmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64\nmv cfssl_linux-amd64 <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>cfssl\nmv cfssljson_linux-amd64 <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>cfssljson\nmv cfssl-certinfo_linux-amd64 <span class=\"hljs-regexp\">/usr/</span>bin/cfssl-certinfo\nchmod +x <span class=\"hljs-regexp\">/usr/</span>bin/cfssl*\n</code></pre><p><br></p><p><font size=\"3\">创建目录mary</font></p><pre type=\"Bash\"><code>mkdir mary<span class=\"hljs-comment\">;</span>\ncd mary<span class=\"hljs-comment\">;</span></code></pre><p><br></p><p><br></p><pre type=\"Bash\"><code>cat &gt; ca-config.json &lt;&lt; EOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"kubernetes\": {\n         \"expiry\": \"87600h\",\n         \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ]\n      }\n    }\n  }\n}\nEOF\n</code></pre><p><br></p><p>#国家名=User&nbsp; &nbsp; &nbsp;\"CN\": \"mary\",<br></p><p>#组织=Group&nbsp; &nbsp;&nbsp;\"O\": \"k8s\",<br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; <span class=\"hljs-keyword\">ca</span>-csr.json &lt;&lt; EOF</code><code><br></code><code>{\n    \"CN\": \"kubernetes\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"Beijing\",\n            \"ST\": \"Beijing\",\n      	    \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\n</code><code>EOF</code></pre><p><br></p><pre type=\"Bash\"><code>cfssl gencert -initca <span class=\"hljs-keyword\">ca</span>-csr.json | cfssljson -bare <span class=\"hljs-keyword\">ca</span> -\n\n<span class=\"hljs-keyword\">ls</span> *pem\n</code></pre><p><br></p><p><font size=\"3\">脚本执行</font></p><p><font size=\"3\">rabc-user.sh</font></p><pre type=\"Bash\"><code>cat &gt; mary-csr.json &lt;&lt;EOF\n{\n  <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"mary\"</span>,\n  <span class=\"hljs-string\">\"hosts\"</span>: [],\n  <span class=\"hljs-string\">\"key\"</span>: {\n    <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n    <span class=\"hljs-string\">\"size\"</span>: 2048\n  },\n  <span class=\"hljs-string\">\"names\"</span>: [\n    {\n      <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n      <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>,\n      <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>\n    }\n  ]\n}\nEOF\n\ncfssl gencert <span class=\"hljs-attribute\">-ca</span>=ca.pem <span class=\"hljs-attribute\">-ca-key</span>=ca-key.pem <span class=\"hljs-attribute\">-config</span>=ca-config.json <span class=\"hljs-attribute\">-profile</span>=kubernetes mary-csr.json | cfssljson -bare mary \n\nkubectl<span class=\"hljs-built_in\"> config </span>set-cluster kubernetes \\\n  <span class=\"hljs-attribute\">--certificate-authority</span>=ca.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--server</span>=https://192.168.31.63:6443 \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n  \nkubectl<span class=\"hljs-built_in\"> config </span>set-credentials mary \\\n  <span class=\"hljs-attribute\">--client-key</span>=mary-key.pem \\\n  <span class=\"hljs-attribute\">--client-certificate</span>=mary.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n\nkubectl<span class=\"hljs-built_in\"> config </span>set-context<span class=\"hljs-built_in\"> default </span>\\\n  <span class=\"hljs-attribute\">--cluster</span>=kubernetes \\\n  <span class=\"hljs-attribute\">--user</span>=mary \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n\nkubectl<span class=\"hljs-built_in\"> config </span>use-context<span class=\"hljs-built_in\"> default </span><span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">bash </span>rabc-user.sh</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Ft9ejCZ4r1FabGsMUgxM4H46ZOyf\" style=\"max-width:100%;\"><span style=\"font-size: 1em; background-color: rgb(241, 241, 241);\">：</span><br></p><pre type=\"Bash\"><code><span class=\"hljs-built_in\">mkdir</span> -pv /<span class=\"hljs-built_in\">home</span>/mary/.kube\ncp mary-kubeconfig  /<span class=\"hljs-built_in\">home</span>/mary/.kube\nchown mary:mary  -R  /<span class=\"hljs-built_in\">home</span>/mary/.kube</code></pre><p><br></p><p><strong>采用 mary 用户登录 xshell</strong><br></p><pre type=\"Bash\"><code>mv devuser.kubeconfig <span class=\"hljs-built_in\">config</span></code></pre><p><br></p><p>这样<font size=\"3\">就可以切换mary用户测试了</font></p>','<h1 id=\"wr9cg\">Kubernetes api-server 安全访问机制</h1><font size=\"3\">kube-apiserver 是 k8s 整个集群的入口，是一个 REST API 服务，提供的 API 实现了 Kubernetes 各类资源对象（如 Pod，RC，Service 等）的增、删、改、查，API Server 也是集群内各个功能模块之间交互和通信的枢纽，是整个集群的总线和数据中心。</font><br><br><p><img src=\"https://img-blog.csdnimg.cn/20190822131030934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5naGFvaGFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p>由此可见 API Server 的重要性了，我们用 kubectl、各种语言提供的客户端库或者发送 REST 请求和集群交互，其实底层都是以 HTTP REST 请求的方式同 API Server 交互，那么访问的安全机制是如何保证的呢，总不能随便来一个请求都能接受并响应吧。API Server 为此提供了一套特有的、灵活的安全机制，每个请求到达 API Server 后都会经过：认证(Authentication)–&gt;授权(Authorization)–&gt;准入控制(Admission Control) 三道安全关卡，通过这三道安全关卡的请求才给予响应：<br><img src=\"https://img-blog.csdnimg.cn/20190822131053725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5naGFvaGFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><h1 id=\"2tctl\">认证(Authentication)</h1><font size=\"3\">认证阶段的工作是识别用户身份，支持的认证方式有很多，比如：HTTP Base，HTTP token，TLS，Service Account，OpenID Connect 等，API Server 启动时可以同时指定多种认证方式，会逐个使用这些方法对客户请求认证，只要通过任意一种认证方式，API Server 就会认为 Authentication 成功。高版本的 Kubernetes 默认认证方式是 TLS。在 TLS 认证方案中，每个用户都拥有自己的 X.509 客户端证书，API 服务器通过配置的证书颁发机构（CA）验证客户端证书。<br></font><br><h1 id=\"frc69\">授权(Authorization)</h1><font size=\"3\">授权阶段判断请求是否有相应的权限，授权方式有多种：AlwaysDeny，AlwaysAllow，ABAC，RBAC，Node 等。API Server 启动时如果多种授权模式同时被启用，Kubernetes 将检查所有模块，如果其中一种通过授权，则请求授权通过。 如果所有的模块全部拒绝，则请求被拒绝(HTTP状态码403)。高版本 Kubernetes 默认开启的授权方式是 RBAC 和 Node。</font><br><h1 id=\"mchql\"><br>准入控制(Admission Control)</h1><font size=\"3\">准入控制判断操作是否符合集群要求，准入控制配备有一个“准入控制器”的列表，发送给 API Server 的每个请求都需要通过每个准入控制器的检查，检查不通过，则 API Server 拒绝调用请求，有点像 Web 编程的拦截器的意思。具体细节在这里不进行展开了，如想进一步了解见这里：Using Admission Controllers。<br><br>Kubernetes 认证方式之客户端证书（TLS）<br>通过上一节介绍我们知道 Kubernetes 认证方式有多种，这里我们简单介绍下客户端证书（TLS）认证方式，也叫 HTTPS 双向认证。一般我们访问一个 https 网站，认证是单向的，只有客户端会验证服务端的身份，服务端不会管客户端身份如何。我们来大概看下 HTTPS 握手过程（单向认证）：<br><br>客户端发送 Client Hello 消息给服务端；<br>服务端回复 Server Hello 消息和自身证书给客户端；<br>客户端检查服务端证书的合法性，证书检查通过后根据双方发送的消息生成 Premaster Key，然后用服务端的证书里面的公钥加密 Premaster Key 并发送给服务端 ；<br>服务端通过自己的私钥解密得到 Premaster Key，然后通过双方协商的算法和交换的消息生成 Session Key（后续双方数据加密用的对称密钥，客户端也能通过同样的方法生成同样的 Key），然后回复客户端一个消息表明握手结束，后续发送的消息会以协商的对称密钥加密。</font><br><h1 id=\"d2vx9\">Kubernetes 授权方式之 RBAC 介绍</h1><font size=\"3\">基于角色的访问控制（Role-Based Access Control, 即 RBAC），是 k8s 提供的一种授权策略，也是新版集群默认启用的方式。RBAC 将角色和角色绑定分开，角色指的是一组定义好的操作集群资源的权限，而角色绑定是将角色和用户、组或者服务账号实体绑定，从而赋予这些实体权限。可以看出 RBAC 这种授权方式很灵活，要赋予某个实体权限只需要绑定相应的角色即可。针对 RBAC 机制，k8s 提供了四种 API 资源：<font color=\"#f9963b\">Role、ClusterRole、RoleBinding、ClusterRoleBinding。</font></font><div><br></div><p><font size=\"3\">查看命名空间</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> ns;</code></pre><p><br></p><p><font size=\"3\">创建命名空间</font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kubectl create ns roletest</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FoYuxcuQr60uoMbOv26QyZoT3hiQ\"><br></p><p><font size=\"3\">在创建roletest命名空间下pod</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">run</span> nginx <span class=\"hljs-attribute\">--image</span>=nginx -n roletest</code></pre><p><font size=\"3\">查看</font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pod -n roletest</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FmnmdaR8ljpUj3UzO5qGQjzmZ-HX\" style=\"max-width:100%;\"><br></p><p><br></p><blockquote><div><font size=\"3\">Role: 只能用于授予对某一单一命名空间中资源的访问权限，因此在定义时必须指定 namespace；<br>以下示例描述了 default 命名空间中的一个 Role 对象的定义，用于授予对 pod 的读访问权限：</font></div><div></div></blockquote><p><br></p><p><font size=\"3\"></font></p><code>角色</code><p><font size=\"3\">rbac-role.yaml</font></p><pre type=\"Bash\"><code>kind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: roletest\n  name: pod-reader\nrules:\n- apiGroups: [<span class=\"hljs-string\">\"\"</span>] # <span class=\"hljs-string\">\"\"</span> indicates the core API<span class=\"hljs-built_in\"> group\n</span>  resources: [<span class=\"hljs-string\">\"pods\"</span>]\n  verbs: [<span class=\"hljs-string\">\"get\"</span>, <span class=\"hljs-string\">\"watch\"</span>, <span class=\"hljs-string\">\"list\"</span>]\n</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl apply -f rbac-<span class=\"hljs-keyword\">role</span>.yaml</code></pre><blockquote><p><font size=\"3\" color=\"#f9963b\">rules.verbs 动作	权限<br>create 创建	写入 Pod 动作/资源<br>update 更新	写入 Pod 动作/资源<br>delete 删除	写入 Pod 动作/资源<br>watch	读取 Pod 动作/资源<br>list 列出	读取 Pod 动作/资源<br>patch	写入 Pod 动作/资源<br>get 查看	读取 Pod 动作/资源</font><br><br></p><p><strong><font color=\"#f9963b\" size=\"3\">resources：[“deployments”,“jobs”,“pods”,“configmaps”,“nodes”] 不管是什么资源控制器都需要加上 s</font></strong><br></p></blockquote><p><br></p><p><font size=\"3\">查看</font></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">role</span> <span class=\"hljs-title\">-n</span> roletest</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fmza9_B3wrCsFYn-t_zq2SZ3qxSa\" style=\"max-width:100%;\"><br></p><p><br></p><p><font size=\"3\">角色绑定</font></p><p><font size=\"3\">rbac-rolebinding.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">RoleBinding</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">read-pods</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">roletest</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">User</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mary</span> <span class=\"hljs-comment\"># Name is case sensitive</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Role</span> <span class=\"hljs-comment\">#this must be Role or ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pod-reader</span> <span class=\"hljs-comment\"># this must match the name of the Role or ClusterRole you wish to bind to</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> apply <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">rbac-rolebinding</span><span class=\"hljs-selector-class\">.yaml</span></code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> RoleBinding -n roletest</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnYtrjZuKbv0wFuhKxXF4HN86ohp\" style=\"max-width:100%;\"><br></p><p><br></p><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点</p><pre type=\"Bash\"><code>wget <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pkg.cfssl.org/R1.2/cfssl_linux-amd64</span>\nwget <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span>\nwget <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span>\nchmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64\nmv cfssl_linux-amd64 <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>cfssl\nmv cfssljson_linux-amd64 <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>cfssljson\nmv cfssl-certinfo_linux-amd64 <span class=\"hljs-regexp\">/usr/</span>bin/cfssl-certinfo\nchmod +x <span class=\"hljs-regexp\">/usr/</span>bin/cfssl*\n</code></pre><p><br></p><p><font size=\"3\">创建目录mary</font></p><pre type=\"Bash\"><code>mkdir mary<span class=\"hljs-comment\">;</span>\ncd mary<span class=\"hljs-comment\">;</span></code></pre><p><br></p><p><br></p><pre type=\"Bash\"><code>cat &gt; ca-config.json &lt;&lt; EOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"kubernetes\": {\n         \"expiry\": \"87600h\",\n         \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ]\n      }\n    }\n  }\n}\nEOF\n</code></pre><p><br></p><p>#国家名=User&nbsp; &nbsp; &nbsp;\"CN\": \"mary\",<br></p><p>#组织=Group&nbsp; &nbsp;&nbsp;\"O\": \"k8s\",<br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">cat</span> &gt; <span class=\"hljs-keyword\">ca</span>-csr.json &lt;&lt; EOF</code><code><br></code><code>{\n    \"CN\": \"kubernetes\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"Beijing\",\n            \"ST\": \"Beijing\",\n      	    \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\n</code><code>EOF</code></pre><p><br></p><pre type=\"Bash\"><code>cfssl gencert -initca <span class=\"hljs-keyword\">ca</span>-csr.json | cfssljson -bare <span class=\"hljs-keyword\">ca</span> -\n\n<span class=\"hljs-keyword\">ls</span> *pem\n</code></pre><p><br></p><p><font size=\"3\">脚本执行</font></p><p><font size=\"3\">rabc-user.sh</font></p><pre type=\"Bash\"><code>cat &gt; mary-csr.json &lt;&lt;EOF\n{\n  <span class=\"hljs-string\">\"CN\"</span>: <span class=\"hljs-string\">\"mary\"</span>,\n  <span class=\"hljs-string\">\"hosts\"</span>: [],\n  <span class=\"hljs-string\">\"key\"</span>: {\n    <span class=\"hljs-string\">\"algo\"</span>: <span class=\"hljs-string\">\"rsa\"</span>,\n    <span class=\"hljs-string\">\"size\"</span>: 2048\n  },\n  <span class=\"hljs-string\">\"names\"</span>: [\n    {\n      <span class=\"hljs-string\">\"C\"</span>: <span class=\"hljs-string\">\"CN\"</span>,\n      <span class=\"hljs-string\">\"L\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>,\n      <span class=\"hljs-string\">\"ST\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span>\n    }\n  ]\n}\nEOF\n\ncfssl gencert <span class=\"hljs-attribute\">-ca</span>=ca.pem <span class=\"hljs-attribute\">-ca-key</span>=ca-key.pem <span class=\"hljs-attribute\">-config</span>=ca-config.json <span class=\"hljs-attribute\">-profile</span>=kubernetes mary-csr.json | cfssljson -bare mary \n\nkubectl<span class=\"hljs-built_in\"> config </span>set-cluster kubernetes \\\n  <span class=\"hljs-attribute\">--certificate-authority</span>=ca.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--server</span>=https://192.168.31.63:6443 \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n  \nkubectl<span class=\"hljs-built_in\"> config </span>set-credentials mary \\\n  <span class=\"hljs-attribute\">--client-key</span>=mary-key.pem \\\n  <span class=\"hljs-attribute\">--client-certificate</span>=mary.pem \\\n  <span class=\"hljs-attribute\">--embed-certs</span>=<span class=\"hljs-literal\">true</span> \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n\nkubectl<span class=\"hljs-built_in\"> config </span>set-context<span class=\"hljs-built_in\"> default </span>\\\n  <span class=\"hljs-attribute\">--cluster</span>=kubernetes \\\n  <span class=\"hljs-attribute\">--user</span>=mary \\\n  <span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n\nkubectl<span class=\"hljs-built_in\"> config </span>use-context<span class=\"hljs-built_in\"> default </span><span class=\"hljs-attribute\">--kubeconfig</span>=mary-kubeconfig\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-keyword\">bash </span>rabc-user.sh</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Ft9ejCZ4r1FabGsMUgxM4H46ZOyf\" style=\"max-width:100%;\"><span style=\"font-size: 1em; background-color: rgb(241, 241, 241);\">：</span><br></p><pre type=\"Bash\"><code><span class=\"hljs-built_in\">mkdir</span> -pv /<span class=\"hljs-built_in\">home</span>/mary/.kube\ncp mary-kubeconfig  /<span class=\"hljs-built_in\">home</span>/mary/.kube\nchown mary:mary  -R  /<span class=\"hljs-built_in\">home</span>/mary/.kube</code></pre><p><br></p><p><strong>采用 mary 用户登录 xshell</strong><br></p><pre type=\"Bash\"><code>mv devuser.kubeconfig <span class=\"hljs-built_in\">config</span></code></pre><p><br></p><p>这样<font size=\"3\">就可以切换mary用户测试了</font></p>','1','8','1','1','1','2021-03-09 11:22:47','2021-03-09 16:51:14'),(58,'http://qiniu-picture.xiyanit.cn/Fn08pE9KQNA6iHQbR6Bx1UQ7N3CF','Kubernetes的Helm架构与实践','Kubernetes,Helm,','Kubernetes的Helm架构与实践,Helm安装,Helm使用',19,0,0,'1',1,'<h1 id=\"atlfv\">一、概述</h1><font size=\"3\">Helm 是 Kubernetes 的软件包管理工具。本文需要读者对 Docker、Kubernetes 等相关知识有一定的了解。 本文将介绍 Helm 中的相关概念和基本工作原理，并通过一些简单的示例来演示如何使用Helm来安装、升级、回滚一个 Kubernetes 应用。</font><p><img src=\"http://qiniu-picture.xiyanit.cn/FggTkdx8GU6tIuwB_2rr5iwH47xp\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><h1 id=\"fohg9\">2.Helm 是什么？？</h1><font size=\"3\">Helm 是 Kubernetes 的包管理器。包管理器类似于我们在 Ubuntu 中使用的apt、Centos中使用的yum 或者Python中的 pip 一样，能快速查找、下载和安装软件包。Helm 由客户端组件 helm 和服务端组件 Tiller 组成, 能够将一组K8S资源打包统一管理, 是查找、共享和使用为Kubernetes构建的软件的最佳方式。</font><br><br><h1 id=\"sjfft\">3.Helm 解决了什么痛点？</h1><font size=\"3\">在 Kubernetes中部署一个可以使用的应用，需要涉及到很多的 Kubernetes 资源的共同协作。比如你安装一个 WordPress 博客，用到了一些 Kubernetes (下面全部简称k8s)的一些资源对象，包括 Deployment 用于部署应用、Service 提供服务发现、Secret 配置 WordPress 的用户名和密码，可能还需要 pv 和 pvc 来提供持久化服务。并且 WordPress 数据是存储在mariadb里面的，所以需要 mariadb 启动就绪后才能启动 WordPress。这些 k8s 资源过于分散，不方便进行管理，直接通过 kubectl 来管理一个应用，你会发现这十分蛋疼。<br>所以总结以上，我们在 k8s 中部署一个应用，通常面临以下几个问题：<br><br>如何统一管理、配置和更新这些分散的 k8s 的应用资源文件<br>如何分发和复用一套应用模板<br>如何将应用的一系列资源当做一个软件包管理</font><h1 id=\"hqx44\">4.Helm 相关组件及概念</h1><font size=\"3\">Helm 包含两个组件，分别是 helm 客户端 和 Tiller 服务器：<br><br>helm 是一个命令行工具，用于本地开发及管理chart，chart仓库管理等<br>Tiller 是 Helm 的服务端。Tiller 负责接收 Helm 的请求，与 k8s 的 apiserver 交互，根据chart 来生成一个 release 并管理 release<br>chart Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源<br>release 使用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release<br>Repoistory Helm chart 的仓库，Helm 客户端通过 HTTP 协议来访问存储库中 chart 的索引文件和压缩包</font><br><h1 id=\"c7zi4\">5.Helm 原理</h1><font size=\"3\">下面两张图描述了 Helm 的几个关键组件 Helm（客户端）、Tiller（服务器）、Repository（Chart 软件仓库）、Chart（软件包）之间的关系以及它们之间如何通信<br><br></font><p><font size=\"3\">helm 组件通信</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201030113907765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0Mjc2Nzk3,size_16,color_FFFFFF,t_70\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpxR30RukMwc-GPshMAYJnrwXTV_\" style=\"font-size: 1em; max-width: 100%;\" width=\"790\" height=\"463.5\"><font size=\"3\"><br></font></p><p><br></p><h1 id=\"olfej\">6.helm安装</h1><p><a href=\"https://github.com/helm/helm/releases\" target=\"_blank\"><font size=\"3\">https://github.com/helm/helm/releases</font></a><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fmt6GtGKgZrYU-vW1Nx-G_qc7pPT\" style=\"max-width: 100%;\" width=\"886.97\" height=\"484.14\"></p><p><br></p><h2 id=\"a8t9d\">6.1解压</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">tar</span> <span class=\"hljs-string\">-zxvf helm-v3.5.2-linux-amd64.tar.gz</span></code><code>\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">linux-amd64/</span></code><code>\n<span class=\"hljs-attr\">mv</span> <span class=\"hljs-string\">helm /usr/bin/</span></code></pre><p><br></p><p><font size=\"3\">微软仓库（<font color=\"#f9963b\">http://mirror.azure.cn/kubernetes/charts/</font>）这个仓库推荐，基本 </font></p><p><font size=\"3\">上官网有的 chart 这里都有。</font></p><p><font size=\"3\">阿里云仓库（https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts ）</font></p><p><br></p><h2 id=\"gfsih\">6.2仓库设置</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\">#添加仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo add stable http://mirror.azure.cn/kubernetes/charts/</span>\n<span class=\"hljs-comment\">#查看仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo list</span>\n<span class=\"hljs-comment\">#修改仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo update</span>\n<span class=\"hljs-comment\">#删除仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo remove 132486-charts</span></code></pre><h1 id=\"rr8z9\">7.helm 常用命令&nbsp;</h1><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><p>命令</p></th><th><p>描述</p></th></tr><tr><td><p>dependency</p></td><td><p>管理 chart 依赖</p></td></tr><tr><td><p>get</p></td><td><p>下载一个 release。可用子命令：all、hooks、manifest、notes、values</p></td></tr><tr><td><p>history</p></td><td><p>获取 release 历史&nbsp;</p></td></tr><tr><td><p>install</p></td><td><p>获取 release 历史&nbsp;</p></td></tr><tr><td><p>list</p></td><td><p>列出 release</p></td></tr><tr><td><p>package</p></td><td><p>将 chart 目录打包到 chart 存档文件中&nbsp;</p></td></tr><tr><td><p>pull</p></td><td><p>从远程仓库中下载 chart 并解压到本地 # helm pull stable/mysql -- </p><p>untar</p></td></tr><tr><td><p>repo</p></td><td><p>添加，列出，移除，更新和索引 chart 仓库。可用子命令：add、index、 </p><p>list、remove、update</p></td></tr><tr><td><p>rollback</p></td><td><p>从之前版本回滚</p></td></tr><tr><td><p>search</p></td><td><p>根据关键字搜索 chart。可用子命令：hub、repo</p></td></tr><tr><td><p>show</p></td><td><p>查看 chart 详细信息。可用子命令：all、chart、readme、values</p></td></tr><tr><td><p>status</p></td><td><p>显示已命名版本的状态</p></td></tr><tr><td><p>template</p></td><td><p>本地呈现模板</p></td></tr><tr><td><p>uninstall</p></td><td><p>卸载一个 release</p></td></tr><tr><td><p>upgrade</p></td><td><p>更新一个 release</p></td></tr><tr><td><p>version</p></td><td><p>查看 helm 客户端版本</p></td></tr></tbody></table><p><br></p><h1 id=\"q3v9l\">8.<span style=\"font-size: 1em;\">Weave Scope监控安装</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-attribute\">#搜索weave仓库</span></code><code><span class=\"hljs-attribute\">helm search repo weave</span></code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FpZBFBBbmKnKtojVb628gGz2ucpr\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code>#下载远程安装包到本地并解压\nhelm fetch stable/weave-scope\ntar xf weave-scope<span class=\"hljs-number\">-1.1</span><span class=\"hljs-number\">.12</span>.tgz</code></pre><p><br></p><pre type=\"Bash\"><code>#修改ClusterIP为NodePort\nsed -i \"s@<span class=\"hljs-symbol\">\\ </span>type:<span class=\"hljs-symbol\">\\ </span><span class=\"hljs-symbol\">\\\"</span>ClusterIP<span class=\"hljs-symbol\">\\\"</span>@ type: <span class=\"hljs-symbol\">\\\"</span>NodePort<span class=\"hljs-symbol\">\\\"</span>@\" weave-scope/values.yaml</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#创建weave-scope命名空间</span>\nkubectl <span class=\"hljs-keyword\">create</span> namespace weave-<span class=\"hljs-keyword\">scope</span></code></pre><p><br></p><h2 id=\"75ink\">安装验证</h2><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">install</span> -n weave-<span class=\"hljs-keyword\">scope</span> common-service -f weave-<span class=\"hljs-keyword\">scope</span>/values.yaml weave-<span class=\"hljs-keyword\">scope</span>/</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FjC7pw7b7S8ysLja4J-W724dJuDd\" style=\"max-width:100%;\" width=\"1091.97\" height=\"463.45\"><br></p><h2 id=\"syw0y\">验证服务列表</h2><pre type=\"Bash\"><code>helm <span class=\"hljs-built_in\">list</span> -n weave-scope</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FiB4IQ41oDJ5jpTJDmmPopi3bcBu\" style=\"max-width:100%;\" width=\"1133\" height=\"121.48\"><br></p><h2 id=\"z56iy\">验证服务状态</h2><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">status</span> <span class=\"hljs-keyword\">common</span>-service -n weave-scope</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnjhJvoU9IHQdbz7_KQUbjGVI0fK\" style=\"max-width:100%;\"><br></p><h2 id=\"is4n2\">验证pod svc deploy</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FvMDbOiLKIZxTGMP-gV74RCuo8jL\" style=\"max-width:100%;\" width=\"1051.97\" height=\"457.88\"><br></p><h2 id=\"hn7qk\">浏览器输入：http://192.168.118.18:31395</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FoVlcbHFtf_jpfU2f7hTx5MSloxA\" style=\"max-width:100%;\" width=\"1055.97\" height=\"576.38\"><br></p><h2 id=\"ctrmd\">2、查看pod配置</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727181458405-1805362972.png\" width=\"1072\" height=\"397.92\"><br></p><h2 id=\"k3x35\">3、添加删除pod</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727181716564-1363845253.png\"><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727181748464-1935808244.png\"><br></p><h2 id=\"b6fcy\">4、exec shell</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727183206633-1244224295.png\" width=\"1184\" height=\"462.01\"><br></p><h2 id=\"r654l\">&nbsp;5、查看日志</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727183804458-1338836221.png\" width=\"1182\" height=\"456.66\"><br></p><h1 id=\"irp53\">9.创建charts</h1><pre type=\"Bash\"><code><span class=\"hljs-attribute\">helm create nginx</span></code></pre><p><br></p><p><font size=\"3\">目录详解</font></p><blockquote><p>├── charts                          # 目录用于存放所依赖的子chart&nbsp;</p><p>├── Chart.yaml                      # 描述这个 Chart 的相关信息、包括名字、描述信息、版本等</p><p>\n├── templates                       # 模板目录，通常会使用values.yaml配置内容进行填充，板引擎渲染此目录的文件后Tiller将渲染得到的结果 提交给Kubernetes创建响应的对象\n│&nbsp;&nbsp;</p><p>&nbsp;├── deployment.yaml             # deployment 控制器的 Go 模板文件\n│&nbsp;&nbsp;&nbsp;</p><p>├── _helpers.tpl                # 模板助手文件，定义的值可在模板中使用\n│&nbsp;&nbsp;&nbsp;</p><p>├── ingress.yaml                # ingress 的模板文件 \n│&nbsp;&nbsp;</p><p>&nbsp;├── NOTES.txt                   # Chart 部署到集群后的一些信息，例如：如何使用、列出缺省值\n│&nbsp;&nbsp;&nbsp;</p><p>├── serviceaccount.yaml\n│&nbsp;&nbsp;&nbsp;</p><p>├── service.yaml                # service 的 Go 模板文件&nbsp;</p><p>│&nbsp;&nbsp; └── tests\n│&nbsp;&nbsp;     └── test-connection.yaml\n└──</p><p>&nbsp;values.yaml                     # 模板的值文件，这些值会在安装时应用到 GO 模板生成部署文件</p></blockquote><p><br></p><p>也可以打包推送的 charts 仓库共享别人使用。 </p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">nginx/</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FpZNcem3ZgAvdwCXjgGXE1oAPHdv\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FpZNcem3ZgAvdwCXjgGXE1oAPHdv\" style=\"max-width: 100%;\" width=\"-8\" height=\"-0.98\"><br></p><h1>10.自定义charts</h1><p>删除刚刚创建的charts下的templete下的所有文件</p><pre type=\"Bash\"><code><span class=\"hljs-meta-keyword\">/root/</span>nginx/templates</code><code>\nrm -rf *</code></pre><p><br></p><p><font size=\"4\"><b>创建pod和svc</b></font></p><pre type=\"Bash\"><code>kubectl create deploy nginx <span class=\"hljs-attribute\">--image</span>=nginx -o yaml --dry-<span class=\"hljs-builtin-name\">run</span> &gt; nginx.yaml</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl expose deploy nginx <span class=\"hljs-attribute\">--port</span>=80 <span class=\"hljs-attribute\">--type</span>=NodePort -o yaml --dry-<span class=\"hljs-builtin-name\">run</span> &gt; service.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FqdrUQqC4ih0pJo7vwrBwEknWXZg\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">安装nginx</font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">install</span> nginx nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fq7MEDqbqBXiYXISy2wBnSoBik3j\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiaQ-8NOjD6wwpzcQS69_NV4jQ1L\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FlTTfDt2wftZoJYMdgJ25WN59e9N\" style=\"max-width:100%;\"><br></p><h1>11.charts升级</h1><p><font size=\"3\">如果你修改了配置执行如下命令就可以进行升级</font></p><pre type=\"Bash\"><code>helm<span class=\"hljs-built_in\"> upgrade </span>nginx --<span class=\"hljs-builtin-name\">set</span> <span class=\"hljs-attribute\">replicas</span>=3 nginx/</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FoC5w-oSiS3ogF5K8BHrmzki3fjj\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">查看历史版本</font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-built_in\">history</span> nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FmHcGxVQwja7LHEoAYRSXCehu9Pz\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">例如将应用回滚到第一个版本： </font></p><pre type=\"Bash\"><code>helm rollback <span class=\"hljs-symbol\">nginx 1</span></code></pre><p><br></p><p><font size=\"4\">卸载发行版，请使用以下 helm uninstall 命令： </font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">helm uninstall nginx</span></code></pre><p><br></p><p><font size=\"4\">查看历史版本配置信息 </font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-comment\">--revision 1 nginx</span></code></pre><p><br></p><h1 id=\"b140g\">12.<span style=\"font-size: 1em;\">管道与函数</span></h1><div><p><font size=\"3\" color=\"#8baa4a\">其实就是将值传给模板引擎进行渲染，模板引擎还支持对拿到数据进行二 次处理。 例如从.Values 中读取的值变成字符串，可以使用 quote 函数实现</font></p><p><font size=\"3\"><font color=\"#8baa4a\" style=\"\">编辑</font>values.yaml 里面可以配置一些需要动态传递的数据</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjibCBXDp0RPBS62fbKhUoSCO92R\" style=\"max-width:100%;\"><br></p><p><br></p><p><font size=\"4\">修改templates下的nginx.yaml</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiPfCSO1UU2K7xUfjTrYD8ZEtCLw\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20210201164918482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E3NzIzMDQ0MTk=,size_16,color_FFFFFF,t_70\" alt=\"请添加图片描述\"><br></p><p><font size=\"4\">再次运行</font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">install</span> nginx nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo0RwXxPblikahVxFnuPrSZLUuMv\" style=\"max-width:100%;\"><br></p></div>','<h1 id=\"atlfv\">一、概述</h1><font size=\"3\">Helm 是 Kubernetes 的软件包管理工具。本文需要读者对 Docker、Kubernetes 等相关知识有一定的了解。 本文将介绍 Helm 中的相关概念和基本工作原理，并通过一些简单的示例来演示如何使用Helm来安装、升级、回滚一个 Kubernetes 应用。</font><p><img src=\"http://qiniu-picture.xiyanit.cn/FggTkdx8GU6tIuwB_2rr5iwH47xp\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><h1 id=\"fohg9\">2.Helm 是什么？？</h1><font size=\"3\">Helm 是 Kubernetes 的包管理器。包管理器类似于我们在 Ubuntu 中使用的apt、Centos中使用的yum 或者Python中的 pip 一样，能快速查找、下载和安装软件包。Helm 由客户端组件 helm 和服务端组件 Tiller 组成, 能够将一组K8S资源打包统一管理, 是查找、共享和使用为Kubernetes构建的软件的最佳方式。</font><br><br><h1 id=\"sjfft\">3.Helm 解决了什么痛点？</h1><font size=\"3\">在 Kubernetes中部署一个可以使用的应用，需要涉及到很多的 Kubernetes 资源的共同协作。比如你安装一个 WordPress 博客，用到了一些 Kubernetes (下面全部简称k8s)的一些资源对象，包括 Deployment 用于部署应用、Service 提供服务发现、Secret 配置 WordPress 的用户名和密码，可能还需要 pv 和 pvc 来提供持久化服务。并且 WordPress 数据是存储在mariadb里面的，所以需要 mariadb 启动就绪后才能启动 WordPress。这些 k8s 资源过于分散，不方便进行管理，直接通过 kubectl 来管理一个应用，你会发现这十分蛋疼。<br>所以总结以上，我们在 k8s 中部署一个应用，通常面临以下几个问题：<br><br>如何统一管理、配置和更新这些分散的 k8s 的应用资源文件<br>如何分发和复用一套应用模板<br>如何将应用的一系列资源当做一个软件包管理</font><h1 id=\"hqx44\">4.Helm 相关组件及概念</h1><font size=\"3\">Helm 包含两个组件，分别是 helm 客户端 和 Tiller 服务器：<br><br>helm 是一个命令行工具，用于本地开发及管理chart，chart仓库管理等<br>Tiller 是 Helm 的服务端。Tiller 负责接收 Helm 的请求，与 k8s 的 apiserver 交互，根据chart 来生成一个 release 并管理 release<br>chart Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源<br>release 使用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release<br>Repoistory Helm chart 的仓库，Helm 客户端通过 HTTP 协议来访问存储库中 chart 的索引文件和压缩包</font><br><h1 id=\"c7zi4\">5.Helm 原理</h1><font size=\"3\">下面两张图描述了 Helm 的几个关键组件 Helm（客户端）、Tiller（服务器）、Repository（Chart 软件仓库）、Chart（软件包）之间的关系以及它们之间如何通信<br><br></font><p><font size=\"3\">helm 组件通信</font></p><p><img src=\"https://img-blog.csdnimg.cn/20201030113907765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0Mjc2Nzk3,size_16,color_FFFFFF,t_70\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpxR30RukMwc-GPshMAYJnrwXTV_\" style=\"font-size: 1em; max-width: 100%;\" width=\"790\" height=\"463.5\"><font size=\"3\"><br></font></p><p><br></p><h1 id=\"olfej\">6.helm安装</h1><p><a href=\"https://github.com/helm/helm/releases\" target=\"_blank\"><font size=\"3\">https://github.com/helm/helm/releases</font></a><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fmt6GtGKgZrYU-vW1Nx-G_qc7pPT\" style=\"max-width: 100%;\" width=\"886.97\" height=\"484.14\"></p><p><br></p><h2 id=\"a8t9d\">6.1解压</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">tar</span> <span class=\"hljs-string\">-zxvf helm-v3.5.2-linux-amd64.tar.gz</span></code><code>\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">linux-amd64/</span></code><code>\n<span class=\"hljs-attr\">mv</span> <span class=\"hljs-string\">helm /usr/bin/</span></code></pre><p><br></p><p><font size=\"3\">微软仓库（<font color=\"#f9963b\">http://mirror.azure.cn/kubernetes/charts/</font>）这个仓库推荐，基本 </font></p><p><font size=\"3\">上官网有的 chart 这里都有。</font></p><p><font size=\"3\">阿里云仓库（https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts ）</font></p><p><br></p><h2 id=\"gfsih\">6.2仓库设置</h2><pre type=\"Bash\"><code><span class=\"hljs-comment\">#添加仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo add stable http://mirror.azure.cn/kubernetes/charts/</span>\n<span class=\"hljs-comment\">#查看仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo list</span>\n<span class=\"hljs-comment\">#修改仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo update</span>\n<span class=\"hljs-comment\">#删除仓库</span>\n<span class=\"hljs-attr\">helm</span> <span class=\"hljs-string\">repo remove 132486-charts</span></code></pre><h1 id=\"rr8z9\">7.helm 常用命令&nbsp;</h1><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><p>命令</p></th><th><p>描述</p></th></tr><tr><td><p>dependency</p></td><td><p>管理 chart 依赖</p></td></tr><tr><td><p>get</p></td><td><p>下载一个 release。可用子命令：all、hooks、manifest、notes、values</p></td></tr><tr><td><p>history</p></td><td><p>获取 release 历史&nbsp;</p></td></tr><tr><td><p>install</p></td><td><p>获取 release 历史&nbsp;</p></td></tr><tr><td><p>list</p></td><td><p>列出 release</p></td></tr><tr><td><p>package</p></td><td><p>将 chart 目录打包到 chart 存档文件中&nbsp;</p></td></tr><tr><td><p>pull</p></td><td><p>从远程仓库中下载 chart 并解压到本地 # helm pull stable/mysql -- </p><p>untar</p></td></tr><tr><td><p>repo</p></td><td><p>添加，列出，移除，更新和索引 chart 仓库。可用子命令：add、index、 </p><p>list、remove、update</p></td></tr><tr><td><p>rollback</p></td><td><p>从之前版本回滚</p></td></tr><tr><td><p>search</p></td><td><p>根据关键字搜索 chart。可用子命令：hub、repo</p></td></tr><tr><td><p>show</p></td><td><p>查看 chart 详细信息。可用子命令：all、chart、readme、values</p></td></tr><tr><td><p>status</p></td><td><p>显示已命名版本的状态</p></td></tr><tr><td><p>template</p></td><td><p>本地呈现模板</p></td></tr><tr><td><p>uninstall</p></td><td><p>卸载一个 release</p></td></tr><tr><td><p>upgrade</p></td><td><p>更新一个 release</p></td></tr><tr><td><p>version</p></td><td><p>查看 helm 客户端版本</p></td></tr></tbody></table><p><br></p><h1 id=\"q3v9l\">8.<span style=\"font-size: 1em;\">Weave Scope监控安装</span></h1><div><pre type=\"Bash\"><code><span class=\"hljs-attribute\">#搜索weave仓库</span></code><code><span class=\"hljs-attribute\">helm search repo weave</span></code></pre></div><p><img src=\"http://qiniu-picture.xiyanit.cn/FpZBFBBbmKnKtojVb628gGz2ucpr\" style=\"max-width:100%;\"><br></p><pre type=\"Bash\"><code>#下载远程安装包到本地并解压\nhelm fetch stable/weave-scope\ntar xf weave-scope<span class=\"hljs-number\">-1.1</span><span class=\"hljs-number\">.12</span>.tgz</code></pre><p><br></p><pre type=\"Bash\"><code>#修改ClusterIP为NodePort\nsed -i \"s@<span class=\"hljs-symbol\">\\ </span>type:<span class=\"hljs-symbol\">\\ </span><span class=\"hljs-symbol\">\\\"</span>ClusterIP<span class=\"hljs-symbol\">\\\"</span>@ type: <span class=\"hljs-symbol\">\\\"</span>NodePort<span class=\"hljs-symbol\">\\\"</span>@\" weave-scope/values.yaml</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#创建weave-scope命名空间</span>\nkubectl <span class=\"hljs-keyword\">create</span> namespace weave-<span class=\"hljs-keyword\">scope</span></code></pre><p><br></p><h2 id=\"75ink\">安装验证</h2><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">install</span> -n weave-<span class=\"hljs-keyword\">scope</span> common-service -f weave-<span class=\"hljs-keyword\">scope</span>/values.yaml weave-<span class=\"hljs-keyword\">scope</span>/</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FjC7pw7b7S8ysLja4J-W724dJuDd\" style=\"max-width:100%;\" width=\"1091.97\" height=\"463.45\"><br></p><h2 id=\"syw0y\">验证服务列表</h2><pre type=\"Bash\"><code>helm <span class=\"hljs-built_in\">list</span> -n weave-scope</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FiB4IQ41oDJ5jpTJDmmPopi3bcBu\" style=\"max-width:100%;\" width=\"1133\" height=\"121.48\"><br></p><h2 id=\"z56iy\">验证服务状态</h2><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">status</span> <span class=\"hljs-keyword\">common</span>-service -n weave-scope</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FnjhJvoU9IHQdbz7_KQUbjGVI0fK\" style=\"max-width:100%;\"><br></p><h2 id=\"is4n2\">验证pod svc deploy</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FvMDbOiLKIZxTGMP-gV74RCuo8jL\" style=\"max-width:100%;\" width=\"1051.97\" height=\"457.88\"><br></p><h2 id=\"hn7qk\">浏览器输入：http://192.168.118.18:31395</h2><p><img src=\"http://qiniu-picture.xiyanit.cn/FoVlcbHFtf_jpfU2f7hTx5MSloxA\" style=\"max-width:100%;\" width=\"1055.97\" height=\"576.38\"><br></p><h2 id=\"ctrmd\">2、查看pod配置</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727181458405-1805362972.png\" width=\"1072\" height=\"397.92\"><br></p><h2 id=\"k3x35\">3、添加删除pod</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727181716564-1363845253.png\"><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727181748464-1935808244.png\"><br></p><h2 id=\"b6fcy\">4、exec shell</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727183206633-1244224295.png\" width=\"1184\" height=\"462.01\"><br></p><h2 id=\"r654l\">&nbsp;5、查看日志</h2><p><img src=\"https://img2020.cnblogs.com/blog/1075436/202007/1075436-20200727183804458-1338836221.png\" width=\"1182\" height=\"456.66\"><br></p><h1 id=\"irp53\">9.创建charts</h1><pre type=\"Bash\"><code><span class=\"hljs-attribute\">helm create nginx</span></code></pre><p><br></p><p><font size=\"3\">目录详解</font></p><blockquote><p>├── charts                          # 目录用于存放所依赖的子chart&nbsp;</p><p>├── Chart.yaml                      # 描述这个 Chart 的相关信息、包括名字、描述信息、版本等</p><p>\n├── templates                       # 模板目录，通常会使用values.yaml配置内容进行填充，板引擎渲染此目录的文件后Tiller将渲染得到的结果 提交给Kubernetes创建响应的对象\n│&nbsp;&nbsp;</p><p>&nbsp;├── deployment.yaml             # deployment 控制器的 Go 模板文件\n│&nbsp;&nbsp;&nbsp;</p><p>├── _helpers.tpl                # 模板助手文件，定义的值可在模板中使用\n│&nbsp;&nbsp;&nbsp;</p><p>├── ingress.yaml                # ingress 的模板文件 \n│&nbsp;&nbsp;</p><p>&nbsp;├── NOTES.txt                   # Chart 部署到集群后的一些信息，例如：如何使用、列出缺省值\n│&nbsp;&nbsp;&nbsp;</p><p>├── serviceaccount.yaml\n│&nbsp;&nbsp;&nbsp;</p><p>├── service.yaml                # service 的 Go 模板文件&nbsp;</p><p>│&nbsp;&nbsp; └── tests\n│&nbsp;&nbsp;     └── test-connection.yaml\n└──</p><p>&nbsp;values.yaml                     # 模板的值文件，这些值会在安装时应用到 GO 模板生成部署文件</p></blockquote><p><br></p><p>也可以打包推送的 charts 仓库共享别人使用。 </p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">nginx/</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FpZNcem3ZgAvdwCXjgGXE1oAPHdv\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/FpZNcem3ZgAvdwCXjgGXE1oAPHdv\" style=\"max-width: 100%;\" width=\"-8\" height=\"-0.98\"><br></p><h1>10.自定义charts</h1><p>删除刚刚创建的charts下的templete下的所有文件</p><pre type=\"Bash\"><code><span class=\"hljs-meta-keyword\">/root/</span>nginx/templates</code><code>\nrm -rf *</code></pre><p><br></p><p><font size=\"4\"><b>创建pod和svc</b></font></p><pre type=\"Bash\"><code>kubectl create deploy nginx <span class=\"hljs-attribute\">--image</span>=nginx -o yaml --dry-<span class=\"hljs-builtin-name\">run</span> &gt; nginx.yaml</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl expose deploy nginx <span class=\"hljs-attribute\">--port</span>=80 <span class=\"hljs-attribute\">--type</span>=NodePort -o yaml --dry-<span class=\"hljs-builtin-name\">run</span> &gt; service.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FqdrUQqC4ih0pJo7vwrBwEknWXZg\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">安装nginx</font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">install</span> nginx nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fq7MEDqbqBXiYXISy2wBnSoBik3j\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiaQ-8NOjD6wwpzcQS69_NV4jQ1L\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FlTTfDt2wftZoJYMdgJ25WN59e9N\" style=\"max-width:100%;\"><br></p><h1>11.charts升级</h1><p><font size=\"3\">如果你修改了配置执行如下命令就可以进行升级</font></p><pre type=\"Bash\"><code>helm<span class=\"hljs-built_in\"> upgrade </span>nginx --<span class=\"hljs-builtin-name\">set</span> <span class=\"hljs-attribute\">replicas</span>=3 nginx/</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FoC5w-oSiS3ogF5K8BHrmzki3fjj\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">查看历史版本</font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-built_in\">history</span> nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FmHcGxVQwja7LHEoAYRSXCehu9Pz\" style=\"max-width:100%;\"><br></p><p><font size=\"4\">例如将应用回滚到第一个版本： </font></p><pre type=\"Bash\"><code>helm rollback <span class=\"hljs-symbol\">nginx 1</span></code></pre><p><br></p><p><font size=\"4\">卸载发行版，请使用以下 helm uninstall 命令： </font></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">helm uninstall nginx</span></code></pre><p><br></p><p><font size=\"4\">查看历史版本配置信息 </font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-comment\">--revision 1 nginx</span></code></pre><p><br></p><h1 id=\"b140g\">12.<span style=\"font-size: 1em;\">管道与函数</span></h1><div><p><font size=\"3\" color=\"#8baa4a\">其实就是将值传给模板引擎进行渲染，模板引擎还支持对拿到数据进行二 次处理。 例如从.Values 中读取的值变成字符串，可以使用 quote 函数实现</font></p><p><font size=\"3\"><font color=\"#8baa4a\" style=\"\">编辑</font>values.yaml 里面可以配置一些需要动态传递的数据</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjibCBXDp0RPBS62fbKhUoSCO92R\" style=\"max-width:100%;\"><br></p><p><br></p><p><font size=\"4\">修改templates下的nginx.yaml</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FiPfCSO1UU2K7xUfjTrYD8ZEtCLw\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20210201164918482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E3NzIzMDQ0MTk=,size_16,color_FFFFFF,t_70\" alt=\"请添加图片描述\"><br></p><p><font size=\"4\">再次运行</font></p><pre type=\"Bash\"><code>helm <span class=\"hljs-keyword\">install</span> nginx nginx</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo0RwXxPblikahVxFnuPrSZLUuMv\" style=\"max-width:100%;\"><br></p></div>','1','8','1','1','1','2021-03-10 09:28:17','2021-03-11 15:00:58'),(59,'http://qiniu-picture.xiyanit.cn/FsOUEjKFaNLHOCcAgwkm_z71SHt0','Kubernetes持久化存储','Kubernetes,nfs,pv，pvs,','Kubernetes持久化存储，nfs，PV,PVS,NFS持久化存储',34,0,0,'1',1,'<h1>1、Volume</h1><p>在Docker的设计实现中，容器中的数据是临时的，即当容器被销毁时，其中的数据将会丢失。如果需要持久化数据，需要使用Docker数据卷挂载宿主机上的文件或者目录到容器中。在Kubernetes中，当Pod重建的时候，数据是会丢失的，Kubernetes也是通过数据卷挂载来提供Pod数据的持久化的。Kubernetes数据卷是对Docker数据卷的扩展，Kubernetes数据卷是Pod级别的，可以用来实现Pod中容器的文件共享。目前，Kubernetes支持的数据卷类型如下：<br></p><p>1) EmptyDir</p><p>2) HostPath</p><p>3) GCE Persistent Disk</p><p>4) AWS Elastic Block Store</p><p>5) NFS</p><p>6) iSCSI</p><p>7) Flocker</p><p>8) GlusterFS</p><p>9) RBD</p><p>10) Git Repo</p><p>11) Secret</p><p>12) Persistent Volume Claim</p><p>13) Downward API</p><h3>1.1本地数据卷</h3><p>EmptyDir、HostPath这两种类型的数据卷，只能最用于本地文件系统。本地数据卷中的数据只会存在于一台机器上，所以当Pod发生迁移的时候，数据便会丢失。该类型Volume的用途是：Pod中容器间的文件共享、共享宿主机的文件系统。</p><h3><a></a><a></a><a></a>1.1.1 EmptyDir</h3><p>如果Pod配置了EmpyDir数据卷，在Pod的生命周期内都会存在，当Pod被分配到 Node上的时候，会在Node上创建EmptyDir数据卷，并挂载到Pod的容器中。只要Pod 存在，EmpyDir数据卷都会存在（容器删除不会导致EmpyDir数据卷丟失数据），但是如果Pod的生命周期终结（Pod被删除），EmpyDir数据卷也会被删除，并且永久丢失。</p><p>EmpyDir数据卷非常适合实现Pod中容器的文件共享。Pod的设计提供了一个很好的容器组合的模型，容器之间各司其职，通过共享文件目录来完成交互，比如可以通过一个专职日志收集容器，在每个Pod中和业务容器中进行组合，来完成日志的收集和汇总。</p><h3><a></a><a></a><a></a>1.1.2 HostPath</h3><p>HostPath数据卷允许将容器宿主机上的文件系统挂载到Pod中。如果Pod需要使用宿主机上的某些文件，可以使用HostPath。</p><h3><a></a><a></a><a></a>1.2网络数据卷</h3><p>Kubernetes提供了很多类型的数据卷以集成第三方的存储系统，包括一些非常流行的分布式文件系统，也有在IaaS平台上提供的存储支持，这些存储系统都是分布式的，通过网络共享文件系统，因此我们称这一类数据卷为网络数据卷。</p><p>网络数据卷能够满足数据的持久化需求，Pod通过配置使用网络数据卷，每次Pod创建的时候都会将存储系统的远端文件目录挂载到容器中，数据卷中的数据将被水久保存，即使Pod被删除，只是除去挂载数据卷，数据卷中的数据仍然保存在存储系统中，且当新的Pod被创建的时候，仍是挂载同样的数据卷。网络数据卷包含以下几种：NFS、iSCISI、GlusterFS、RBD（Ceph Block Device）、Flocker、AWS Elastic Block Store、GCE Persistent Disk</p><h3><a></a><a></a><a></a>1.3 Persistent Volume和Persistent Volume Claim</h3><p>理解每个存储系统是一件复杂的事情，特别是对于普通用户来说，有时候并不需要关心各种存储实现，只希望能够安全可靠地存储数据。Kubernetes中提供了Persistent Volume和Persistent Volume Claim机制，这是存储消费模式。Persistent Volume是由系统管理员配置创建的一个数据卷（目前支持HostPath、GCE Persistent Disk、AWS Elastic Block Store、NFS、iSCSI、GlusterFS、RBD），它代表了某一类存储插件实现；而对于普通用户来说，通过Persistent Volume Claim可请求并获得合适的Persistent Volume，而无须感知后端的存储实现。Persistent Volume和Persistent Volume Claim的关系其实类似于Pod和Node，Pod消费Node资源，Persistent Volume Claim则消费Persistent Volume资源。Persistent Volume和Persistent Volume Claim相互关联，有着完整的生命周期管理：</p><p><br></p><ol><li><p>准备：系统管理员规划或创建一批Persistent Volume；</p></li><li><p>绑定：用户通过创建Persistent Volume Claim来声明存储请求，Kubernetes发现有存储请求的时候，就去查找符合条件的Persistent Volume（最小满足策略）。找到合适的就绑定上，找不到就一直处于等待状态；</p></li><li><p>使用：创建Pod的时候使用Persistent Volume Claim；</p></li><li><p>释放：当用户删除绑定在Persistent Volume上的Persistent Volume Claim时，Persistent Volume进入释放状态，此时Persistent Volume中还残留着上一个Persistent Volume Claim的数据，状态还不可用；</p></li><li><p>回收：是否的Persistent Volume需要回收才能再次使用。回收策略可以是人工的也可以是Kubernetes自动进行清理（仅支持NFS和HostPath）</p></li></ol><h3><a></a><a></a><a></a>1.4信息数据卷</h3><p>Kubernetes中有一些数据卷，主要用来给容器传递配置信息，我们称之为信息数据卷，比如Secret（处理敏感配置信息，密码、Token等）、Downward API（通过环境变量的方式告诉容器Pod的信息）、Git Repo（将Git仓库下载到Pod中），都是将Pod的信息以文件形式保存，然后以数据卷方式挂载到容器中，容器通过读取文件获取相应的信息。</p><h1>2.通过NFS实现持久化存储</h1><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><p><font size=\"4\">192.168.181.132 单独做台持久化服务器</font></p></th></tr></tbody></table><h3>安装nfs</h3><pre><code>yum install -y nfs-utils</code></pre><h3><a></a><a></a><a></a>新建共享文件夹</h3><pre><code>mkdir /nfsdata</code><code>\nchmod  666 /nfsdata/</code></pre><h3><a></a><a></a><a></a>编辑/etc/exports配置文件</h3><pre><code>systemctl start nfs-server</code><code>\nvim /etc/exports\n</code></pre><h3><br></h3><pre type=\"Bash\"><code>/nfsdata <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.0</span>/<span class=\"hljs-number\">24</span>(rw,no_root_squash,no_all_squash,sync)</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjDwiEtUABI482aizVBCGSD5MHg3\" style=\"max-width:100%;\"><br></p><h3><a></a><a></a><a></a>刷新配置</h3><pre type=\"Bash\"><code><span class=\"hljs-attribute\">exportfs -rv</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FlNAeA2PpIsYAD5eTEI-Mm_yl-g-\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">上传需要挂载的文件，方便等下测试，</font>这个文件自己随便找个</p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fts9oDQ42fJgk4fWbpda-8s-I7Ao\"><br></p><p><br></p><h2>2.2 所有的k8s集群node节点都安装nfs-utils</h2><h3><a></a><a></a><a></a>安装nfs服务</h3><pre><code>yum install -y nfs-utils</code></pre><h2 id=\"b4yig\"><br></h2><h2 id=\"b4yig\">2.3测试</h2><p><font size=\"4\">nfs-nginx.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/usr/share/conf/default.conf/</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">nfs:</span>\n            <span class=\"hljs-attr\">server:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.132</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/nfsdata/</span></code></pre><p><br></p><pre type=\"Bash\"><code>#运行</code><code>kubectl <span class=\"hljs-built_in\">apply</span> -f nfs-nginx.yaml</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#进入容器查询挂载目录下的配置文件是否挂载成功</span>\nkubectl exec -<span class=\"hljs-keyword\">it</span> nginx<span class=\"hljs-number\">-99</span>f6dd6f8-w4fnr bash</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqaH5bZ4an-gNxhC9hF3TBYfqwWo\" style=\"max-width:100%;\"><br></p><h1>2.通过NFS+PV+PVC实现持久化存储（<font color=\"#f9963b\">一般都用这种方式</font>）</h1><p><font size=\"4\">pv-nfs.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">PersistentVolume</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span>  <span class=\"hljs-string\">nfs-pv</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nfs-pv</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">capacity:</span>\n    <span class=\"hljs-attr\">storage:</span> <span class=\"hljs-string\">1Gi</span>\n  <span class=\"hljs-attr\">accessModes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ReadWriteOnce</span>\n  <span class=\"hljs-attr\">persistentVolumeReclaimPolicy:</span> <span class=\"hljs-string\">Recycle</span>\n  <span class=\"hljs-attr\">nfs:</span>\n    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/nfsdata/</span>\n    <span class=\"hljs-attr\">server:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.132</span></code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f <span class=\"hljs-built_in\">pv</span>-nfs.yaml</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> <span class=\"hljs-built_in\">pv</span></code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/2019121918274956.png\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">pvc-nfs.yaml</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kind</span>: PersistentVolumeClaim\n<span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: nfs-pvc\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">accessModes</span>:\n    - ReadWriteOnce\n  <span class=\"hljs-attribute\">resources</span>:\n    <span class=\"hljs-attribute\">requests</span>:\n      <span class=\"hljs-attribute\">storage</span>: <span class=\"hljs-number\">1</span>Gi\n  <span class=\"hljs-attribute\">selector</span>:\n    <span class=\"hljs-attribute\">matchLabels</span>:\n      <span class=\"hljs-attribute\">app</span>: nfs-pv<br></code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f pvc-nfs.yaml</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pvc</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20191219193253349.png\" alt=\"在这里插入图片描述\"><br></p><p><br></p><blockquote><p><font size=\"3\">①&nbsp;capacity&nbsp;指定 PV 的容量为 1G。</font></p><p><font size=\"3\">②&nbsp;accessModes&nbsp;指定访问模式为&nbsp;ReadWriteOnce，支持的访问模式有：</font></p><p><font size=\"3\">ReadWriteOnce – PV 能以 read-write 模式 mount 到单个节点。</font></p><p><font size=\"3\">ReadOnlyMany – PV 能以 read-only 模式 mount 到多个节点。</font></p><p><font size=\"3\">ReadWriteMany – PV 能以 read-write 模式 mount 到多个节点。</font></p><p><font size=\"3\">③&nbsp;persistentVolumeReclaimPolicy&nbsp;指定当 PV 的回收策略为&nbsp;Recycle，支持的策略有：</font></p><p><font size=\"3\">Retain – 需要管理员手工回收。</font></p><p><font size=\"3\">Recycle – 清除 PV 中的数据，效果相当于执行&nbsp;rm -rf /thevolume/*。</font></p><p><font size=\"3\">Delete – 删除 Storage Provider 上的对应存储资源，例如 AWS EBS、GCE PD、Azure Disk、OpenStack Cinder Volume 等。</font></p>④<span style=\"font-size: medium;\">指定 PV 在 NFS 服务器上对应的目录。</span><p><font size=\"3\">　　注意要做storage-provider段要提前建好文件夹</font></p></blockquote><p><br></p><h2 id=\"rbktf\">nfs-nginx.yaml修改</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/usr/share/conf/default.conf/</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">persistentVolumeClaim:</span>\n              <span class=\"hljs-attr\">claimName:</span> <span class=\"hljs-string\">nfs-pvc</span></code></pre><h1 id=\"2lln3\"><font color=\"#c24f4a\"><br></font></h1><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f nfs-nginx.yaml</code></pre></div><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkwPo5Ptlcb8ufbz0cl002cWVa84\" style=\"max-width:100%;\"><br></p><h1 id=\"2lln3\"><font color=\"#c24f4a\">执行的效果和上面不用pv和pvc一样的</font></h1><div><font color=\"#c24f4a\"><br></font></div>','<h1>1、Volume</h1><p>在Docker的设计实现中，容器中的数据是临时的，即当容器被销毁时，其中的数据将会丢失。如果需要持久化数据，需要使用Docker数据卷挂载宿主机上的文件或者目录到容器中。在Kubernetes中，当Pod重建的时候，数据是会丢失的，Kubernetes也是通过数据卷挂载来提供Pod数据的持久化的。Kubernetes数据卷是对Docker数据卷的扩展，Kubernetes数据卷是Pod级别的，可以用来实现Pod中容器的文件共享。目前，Kubernetes支持的数据卷类型如下：<br></p><p>1) EmptyDir</p><p>2) HostPath</p><p>3) GCE Persistent Disk</p><p>4) AWS Elastic Block Store</p><p>5) NFS</p><p>6) iSCSI</p><p>7) Flocker</p><p>8) GlusterFS</p><p>9) RBD</p><p>10) Git Repo</p><p>11) Secret</p><p>12) Persistent Volume Claim</p><p>13) Downward API</p><h3>1.1本地数据卷</h3><p>EmptyDir、HostPath这两种类型的数据卷，只能最用于本地文件系统。本地数据卷中的数据只会存在于一台机器上，所以当Pod发生迁移的时候，数据便会丢失。该类型Volume的用途是：Pod中容器间的文件共享、共享宿主机的文件系统。</p><h3><a></a><a></a><a></a>1.1.1 EmptyDir</h3><p>如果Pod配置了EmpyDir数据卷，在Pod的生命周期内都会存在，当Pod被分配到 Node上的时候，会在Node上创建EmptyDir数据卷，并挂载到Pod的容器中。只要Pod 存在，EmpyDir数据卷都会存在（容器删除不会导致EmpyDir数据卷丟失数据），但是如果Pod的生命周期终结（Pod被删除），EmpyDir数据卷也会被删除，并且永久丢失。</p><p>EmpyDir数据卷非常适合实现Pod中容器的文件共享。Pod的设计提供了一个很好的容器组合的模型，容器之间各司其职，通过共享文件目录来完成交互，比如可以通过一个专职日志收集容器，在每个Pod中和业务容器中进行组合，来完成日志的收集和汇总。</p><h3><a></a><a></a><a></a>1.1.2 HostPath</h3><p>HostPath数据卷允许将容器宿主机上的文件系统挂载到Pod中。如果Pod需要使用宿主机上的某些文件，可以使用HostPath。</p><h3><a></a><a></a><a></a>1.2网络数据卷</h3><p>Kubernetes提供了很多类型的数据卷以集成第三方的存储系统，包括一些非常流行的分布式文件系统，也有在IaaS平台上提供的存储支持，这些存储系统都是分布式的，通过网络共享文件系统，因此我们称这一类数据卷为网络数据卷。</p><p>网络数据卷能够满足数据的持久化需求，Pod通过配置使用网络数据卷，每次Pod创建的时候都会将存储系统的远端文件目录挂载到容器中，数据卷中的数据将被水久保存，即使Pod被删除，只是除去挂载数据卷，数据卷中的数据仍然保存在存储系统中，且当新的Pod被创建的时候，仍是挂载同样的数据卷。网络数据卷包含以下几种：NFS、iSCISI、GlusterFS、RBD（Ceph Block Device）、Flocker、AWS Elastic Block Store、GCE Persistent Disk</p><h3><a></a><a></a><a></a>1.3 Persistent Volume和Persistent Volume Claim</h3><p>理解每个存储系统是一件复杂的事情，特别是对于普通用户来说，有时候并不需要关心各种存储实现，只希望能够安全可靠地存储数据。Kubernetes中提供了Persistent Volume和Persistent Volume Claim机制，这是存储消费模式。Persistent Volume是由系统管理员配置创建的一个数据卷（目前支持HostPath、GCE Persistent Disk、AWS Elastic Block Store、NFS、iSCSI、GlusterFS、RBD），它代表了某一类存储插件实现；而对于普通用户来说，通过Persistent Volume Claim可请求并获得合适的Persistent Volume，而无须感知后端的存储实现。Persistent Volume和Persistent Volume Claim的关系其实类似于Pod和Node，Pod消费Node资源，Persistent Volume Claim则消费Persistent Volume资源。Persistent Volume和Persistent Volume Claim相互关联，有着完整的生命周期管理：</p><p><br></p><ol><li><p>准备：系统管理员规划或创建一批Persistent Volume；</p></li><li><p>绑定：用户通过创建Persistent Volume Claim来声明存储请求，Kubernetes发现有存储请求的时候，就去查找符合条件的Persistent Volume（最小满足策略）。找到合适的就绑定上，找不到就一直处于等待状态；</p></li><li><p>使用：创建Pod的时候使用Persistent Volume Claim；</p></li><li><p>释放：当用户删除绑定在Persistent Volume上的Persistent Volume Claim时，Persistent Volume进入释放状态，此时Persistent Volume中还残留着上一个Persistent Volume Claim的数据，状态还不可用；</p></li><li><p>回收：是否的Persistent Volume需要回收才能再次使用。回收策略可以是人工的也可以是Kubernetes自动进行清理（仅支持NFS和HostPath）</p></li></ol><h3><a></a><a></a><a></a>1.4信息数据卷</h3><p>Kubernetes中有一些数据卷，主要用来给容器传递配置信息，我们称之为信息数据卷，比如Secret（处理敏感配置信息，密码、Token等）、Downward API（通过环境变量的方式告诉容器Pod的信息）、Git Repo（将Git仓库下载到Pod中），都是将Pod的信息以文件形式保存，然后以数据卷方式挂载到容器中，容器通过读取文件获取相应的信息。</p><h1>2.通过NFS实现持久化存储</h1><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><p><font size=\"4\">192.168.181.132 单独做台持久化服务器</font></p></th></tr></tbody></table><h3>安装nfs</h3><pre><code>yum install -y nfs-utils</code></pre><h3><a></a><a></a><a></a>新建共享文件夹</h3><pre><code>mkdir /nfsdata</code><code>\nchmod  666 /nfsdata/</code></pre><h3><a></a><a></a><a></a>编辑/etc/exports配置文件</h3><pre><code>systemctl start nfs-server</code><code>\nvim /etc/exports\n</code></pre><h3><br></h3><pre type=\"Bash\"><code>/nfsdata <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.0</span>/<span class=\"hljs-number\">24</span>(rw,no_root_squash,no_all_squash,sync)</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjDwiEtUABI482aizVBCGSD5MHg3\" style=\"max-width:100%;\"><br></p><h3><a></a><a></a><a></a>刷新配置</h3><pre type=\"Bash\"><code><span class=\"hljs-attribute\">exportfs -rv</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FlNAeA2PpIsYAD5eTEI-Mm_yl-g-\" style=\"max-width:100%;\"><br></p><p><font size=\"3\">上传需要挂载的文件，方便等下测试，</font>这个文件自己随便找个</p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fts9oDQ42fJgk4fWbpda-8s-I7Ao\"><br></p><p><br></p><h2>2.2 所有的k8s集群node节点都安装nfs-utils</h2><h3><a></a><a></a><a></a>安装nfs服务</h3><pre><code>yum install -y nfs-utils</code></pre><h2 id=\"b4yig\"><br></h2><h2 id=\"b4yig\">2.3测试</h2><p><font size=\"4\">nfs-nginx.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/usr/share/conf/default.conf/</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">nfs:</span>\n            <span class=\"hljs-attr\">server:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.132</span>\n            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/nfsdata/</span></code></pre><p><br></p><pre type=\"Bash\"><code>#运行</code><code>kubectl <span class=\"hljs-built_in\">apply</span> -f nfs-nginx.yaml</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#进入容器查询挂载目录下的配置文件是否挂载成功</span>\nkubectl exec -<span class=\"hljs-keyword\">it</span> nginx<span class=\"hljs-number\">-99</span>f6dd6f8-w4fnr bash</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FqaH5bZ4an-gNxhC9hF3TBYfqwWo\" style=\"max-width:100%;\"><br></p><h1>2.通过NFS+PV+PVC实现持久化存储（<font color=\"#f9963b\">一般都用这种方式</font>）</h1><p><font size=\"4\">pv-nfs.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">PersistentVolume</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span>  <span class=\"hljs-string\">nfs-pv</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nfs-pv</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">capacity:</span>\n    <span class=\"hljs-attr\">storage:</span> <span class=\"hljs-string\">1Gi</span>\n  <span class=\"hljs-attr\">accessModes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ReadWriteOnce</span>\n  <span class=\"hljs-attr\">persistentVolumeReclaimPolicy:</span> <span class=\"hljs-string\">Recycle</span>\n  <span class=\"hljs-attr\">nfs:</span>\n    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/nfsdata/</span>\n    <span class=\"hljs-attr\">server:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.181</span><span class=\"hljs-number\">.132</span></code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f <span class=\"hljs-built_in\">pv</span>-nfs.yaml</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> <span class=\"hljs-built_in\">pv</span></code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/2019121918274956.png\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"4\">pvc-nfs.yaml</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-attribute\">kind</span>: PersistentVolumeClaim\n<span class=\"hljs-attribute\">apiVersion</span>: v1\n<span class=\"hljs-attribute\">metadata</span>:\n  <span class=\"hljs-attribute\">name</span>: nfs-pvc\n<span class=\"hljs-attribute\">spec</span>:\n  <span class=\"hljs-attribute\">accessModes</span>:\n    - ReadWriteOnce\n  <span class=\"hljs-attribute\">resources</span>:\n    <span class=\"hljs-attribute\">requests</span>:\n      <span class=\"hljs-attribute\">storage</span>: <span class=\"hljs-number\">1</span>Gi\n  <span class=\"hljs-attribute\">selector</span>:\n    <span class=\"hljs-attribute\">matchLabels</span>:\n      <span class=\"hljs-attribute\">app</span>: nfs-pv<br></code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f pvc-nfs.yaml</code></pre><p><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> pvc</code></pre><p><br></p><p><img src=\"https://img-blog.csdnimg.cn/20191219193253349.png\" alt=\"在这里插入图片描述\"><br></p><p><br></p><blockquote><p><font size=\"3\">①&nbsp;capacity&nbsp;指定 PV 的容量为 1G。</font></p><p><font size=\"3\">②&nbsp;accessModes&nbsp;指定访问模式为&nbsp;ReadWriteOnce，支持的访问模式有：</font></p><p><font size=\"3\">ReadWriteOnce – PV 能以 read-write 模式 mount 到单个节点。</font></p><p><font size=\"3\">ReadOnlyMany – PV 能以 read-only 模式 mount 到多个节点。</font></p><p><font size=\"3\">ReadWriteMany – PV 能以 read-write 模式 mount 到多个节点。</font></p><p><font size=\"3\">③&nbsp;persistentVolumeReclaimPolicy&nbsp;指定当 PV 的回收策略为&nbsp;Recycle，支持的策略有：</font></p><p><font size=\"3\">Retain – 需要管理员手工回收。</font></p><p><font size=\"3\">Recycle – 清除 PV 中的数据，效果相当于执行&nbsp;rm -rf /thevolume/*。</font></p><p><font size=\"3\">Delete – 删除 Storage Provider 上的对应存储资源，例如 AWS EBS、GCE PD、Azure Disk、OpenStack Cinder Volume 等。</font></p>④<span style=\"font-size: medium;\">指定 PV 在 NFS 服务器上对应的目录。</span><p><font size=\"3\">　　注意要做storage-provider段要提前建好文件夹</font></p></blockquote><p><br></p><h2 id=\"rbktf\">nfs-nginx.yaml修改</h2><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/usr/share/conf/default.conf/</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span>\n      <span class=\"hljs-attr\">volumes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">conf</span>\n          <span class=\"hljs-attr\">persistentVolumeClaim:</span>\n              <span class=\"hljs-attr\">claimName:</span> <span class=\"hljs-string\">nfs-pvc</span></code></pre><h1 id=\"2lln3\"><font color=\"#c24f4a\"><br></font></h1><div><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f nfs-nginx.yaml</code></pre></div><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FkwPo5Ptlcb8ufbz0cl002cWVa84\" style=\"max-width:100%;\"><br></p><h1 id=\"2lln3\"><font color=\"#c24f4a\">执行的效果和上面不用pv和pvc一样的</font></h1><div><font color=\"#c24f4a\"><br></font></div>','1','8','1','1','1','2021-03-11 15:19:30','2021-03-11 21:11:56'),(60,'http://qiniu-picture.xiyanit.cn/Fl8qNvsaJOKW3J7Xa8f6G8BeIPOj','Kubernetes监控平台搭建','Kubernetes,Prometheus,Grafana,','Kubernetes监控平台搭建，Prometheus，Grafana，监控平台',13,0,0,'1',1,'<blockquote><p><font size=\"3\">开源软件 cAdvisor（Container Advisor）用于监控所在节点的容器运行状态，当前已经 </font></p><p><font size=\"3\">被默认集成到 kubelet 组件内，默认使用 tcp 4194 端口。在大规模容器集群，一般使用 </font></p><p><font size=\"3\">Heapster+Influxdb+Grafana 平台实现集群性能数据的采集，存储与展示。</font></p></blockquote><blockquote><p><font size=\"3\"><br></font></p><p><font size=\"3\">Heapster：集群中各 node 节点的 cAdvisor 的数据采集汇聚系统，通过调用 node 上 </font></p><p><font size=\"3\">kubelet 的 api，再通过 kubelet 调用 cAdvisor 的 api 来采集所在节点上所有容器的性能 </font></p><p><font size=\"3\">数据。Heapster 对性能数据进行聚合，并将结果保存到后端存储系统，heapster 支持多种 </font></p><p><font size=\"3\">后端存储系统，如 memory，Influxdb 等。 </font></p><p><font size=\"3\">Influxdb：分布式时序数据库（每条记录有带有时间戳属性），主要用于实时数据采集， </font></p><p><font size=\"3\">时间跟踪记录，存储时间图表，原始数据等。Influxdb 提供 rest api 用于数据的存储与 </font></p><p><font size=\"3\">查询。 </font></p><p><font size=\"3\">Grafana：通过 dashboard 将 Influxdb 中的时序数据展现成图表或曲线等形式，便于查看 </font></p><p><font size=\"3\">集群运行状态。 </font></p><p><font size=\"3\">Heapster，Influxdb，Grafana 均以 Pod 的形式启动与运行</font></p></blockquote><p><br></p><h1 id=\"n5dxn\">1.<span style=\"font-size: 1em;\">prometheus部署</span></h1><div><p><font size=\"4\" color=\"#000000\"><b style=\"\">node-exporter.yaml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">prom/node-exporter</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">9100</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9100</span>\n    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31672</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n</code></pre><p><font size=\"4\" color=\"#000000\"><b style=\"\"><br></b></font></p><pre type=\"Bash\"><code>kubectl apply -f  <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-exporter</span>.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FjMVsfouHCTG2Dw4EK9SXVS8OtT0\" style=\"max-width:100%;\"><font size=\"4\" color=\"#000000\"><b style=\"\"><br></b></font></p><p><br></p><p><font size=\"4\" color=\"#000000\"><b style=\"\">rbac-setup.yaml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">prom/node-exporter</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">9100</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9100</span>\n    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31672</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n</code></pre><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><pre type=\"Bash\"><code>kubectl apply -f  rbac-<span class=\"hljs-built_in\">setup</span>.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FtlSXUmmOO1JvdE8Vj2qr1PCXAwq\" style=\"font-size: 1em; max-width: 100%;\"><br></p><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><p><font size=\"4\" color=\"#000000\"><b>configmap.yaml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ConfigMap</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus-config</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">data:</span>\n  <span class=\"hljs-attr\">prometheus.yml:</span> <span class=\"hljs-string\">|\n    global:\n      scrape_interval:     15s\n      evaluation_interval: 15s\n    scrape_configs:\n</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-apiservers\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">endpoints</span>\n      <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">https</span>\n      <span class=\"hljs-attr\">tls_config:</span>\n        <span class=\"hljs-attr\">ca_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span>\n      <span class=\"hljs-attr\">bearer_token_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace,</span> <span class=\"hljs-string\">__meta_kubernetes_service_name,</span> <span class=\"hljs-string\">__meta_kubernetes_endpoint_port_name]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">default;kubernetes;https</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-nodes\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">node</span>\n      <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">https</span>\n      <span class=\"hljs-attr\">tls_config:</span>\n        <span class=\"hljs-attr\">ca_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span>\n      <span class=\"hljs-attr\">bearer_token_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_node_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">kubernetes.default.svc:443</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_node_name]</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">/api/v1/nodes/${1}/proxy/metrics</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-cadvisor\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">node</span>\n      <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">https</span>\n      <span class=\"hljs-attr\">tls_config:</span>\n        <span class=\"hljs-attr\">ca_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span>\n      <span class=\"hljs-attr\">bearer_token_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_node_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">kubernetes.default.svc:443</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_node_name]</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">/api/v1/nodes/${1}/proxy/metrics/cadvisor</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-service-endpoints\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">endpoints</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_scheme]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__scheme__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(https?)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_path]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__address__,</span> <span class=\"hljs-string\">__meta_kubernetes_service_annotation_prometheus_io_port]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">([^:]+)(?::\\d+)?;(\\d+)</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">$1:$2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_service_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_name]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_name</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-services\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">service</span>\n      <span class=\"hljs-attr\">metrics_path:</span> <span class=\"hljs-string\">/probe</span>\n      <span class=\"hljs-attr\">params:</span>\n        <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">[http_2xx]</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_probe]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__address__]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__param_target</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">blackbox-exporter.example.com:9115</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__param_target]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">instance</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_service_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_name]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_name</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-ingresses\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">ingress</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_ingress_annotation_prometheus_io_probe]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+);(.+);(.+)</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">${1}://${2}${3}</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__param_target</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">blackbox-exporter.example.com:9115</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__param_target]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">instance</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_ingress_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_ingress_name]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_name</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-pods\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">pod</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_pod_annotation_prometheus_io_path]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__address__,</span> <span class=\"hljs-string\">__meta_kubernetes_pod_annotation_prometheus_io_port]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">([^:]+)(?::\\d+)?;(\\d+)</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">$1:$2</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_pod_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_pod_name]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_pod_name</span>\n</code></pre><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f  configmap.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FgY-NZg1TAqpJ98keh3iQKC0dFYZ\" style=\"max-width:100%;\"><font size=\"4\" color=\"#000000\"><b><br></b></font></p><p><font size=\"4\" color=\"#000000\"><b>prometheus.deploy.yml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus-deployment</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">prom/prometheus</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"/bin/prometheus\"</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"--config.file=/etc/prometheus/prometheus.yml\"</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"--storage.tsdb.path=/prometheus\"</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"--storage.tsdb.retention=24h\"</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">9090</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">\"/prometheus\"</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">data</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">\"/etc/prometheus\"</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config-volume</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">100m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">100Mi</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">500m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">2500Mi</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">prometheus</span>    \n      <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">data</span>\n        <span class=\"hljs-attr\">emptyDir:</span> <span class=\"hljs-string\">{}</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config-volume</span>\n        <span class=\"hljs-attr\">configMap:</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus-config</span>   \n</code></pre><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">apply</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">prometheus</span><span class=\"hljs-selector-class\">.deploy</span><span class=\"hljs-selector-class\">.yml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fm19sLTjy-U0sGNwKVA5sQiyLBqN\" style=\"max-width:100%;\"><font size=\"4\" color=\"#000000\"><b><br></b></font></p><p><font size=\"4\" color=\"#000000\"><b>prometheus.svc.yml</b></font></p></div><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9090</span>\n    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">9090</span>\n    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">30003</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">apply</span> <span class=\"hljs-selector-tag\">-f</span> <span style=\"font-size: 1em; background-color: rgb(255, 255, 255);\">prometheus.svc.yml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Frf7N-Sub9nqdMC8TU4JV-LG_Jq3\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FtvQI8IDhEYgze92MaXhQ3FoJgTU\" style=\"max-width:100%;\"><br></p><h2 id=\"xqaja\">浏览器访问</h2><p><a href=\"http://192.168.181.139:30003/\" target=\"_blank\"><font size=\"4\">http://192.168.181.139:30003/</font></a><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi1YTKdbaybl2e5PcImDC1euo-Hn\" style=\"max-width:100%;\" width=\"1246.97\" height=\"473.63\"><br></p><h2 id=\"8gihl\">2.搭建<span style=\"font-size: 1em;\">grafana</span></h2><div><p><font size=\"4\">grafana-deploy.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n   <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">monitoring-grafana</span>\n   <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n   <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span>\n   <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n   <span class=\"hljs-attr\">template:</span>\n     <span class=\"hljs-attr\">metadata:</span>\n       <span class=\"hljs-attr\">labels:</span>\n         <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">monitoring</span>\n         <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span>\n     <span class=\"hljs-attr\">spec:</span>\n       <span class=\"hljs-attr\">containers:</span>\n       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">grafana</span>\n         <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">grafana/grafana</span>\n         <span class=\"hljs-attr\">ports:</span>\n         <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">3000</span>\n           <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n         <span class=\"hljs-attr\">env:</span>\n         <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">INFLUXDB_HOST</span>\n           <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">monitoring-influxdb</span>\n         <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">GF_INSTALL_PLUGINS</span>\n           <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">grafana-kubernetes-app</span></code></pre><p><font size=\"4\"><br></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f grafana-deploy.yaml</code></pre><p><font size=\"4\">grafana-svc.yaml</font></p><pre type=\"Bash\"><code>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n   <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">monitoring-grafana</span>\n   <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n   <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">core</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3000</span>\n      <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31000</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span></code></pre><p><font size=\"4\"><br></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f grafana-svc.yaml</code></pre><p><br></p></div><p><font size=\"4\">访问：<a href=\"http://192.168.181.139:31000/\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">http://192.168.181.139:31000/</a></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FsTkaKlDq27Axs8v8WVcTyByLP9a\" style=\"max-width:100%;\" width=\"918.97\" height=\"501.6\"><br></p><p><br></p><h1 id=\"upkjl\">3.设置数据源</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FuvhzPHX3oYb7o-LSeMadgLYndHb\" style=\"max-width:100%;\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhxvmuS5A-WLacCfqmyq9nwB_FNx\" style=\"max-width:100%;\" width=\"1184.97\" height=\"646.77\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FgiHJlZ1NUb-XshIL0djSuNWVEJ7\" style=\"max-width:100%;\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FizMmNKZaXXmRfgUD3cx-YFRPHLK\" style=\"max-width:100%;\" width=\"957\" height=\"625.73\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhTrrFzHJU7l8YMBK-yl-qMsvl9y\" style=\"max-width:100%;\" width=\"934.97\" height=\"510.34\"><br></p>','<blockquote><p><font size=\"3\">开源软件 cAdvisor（Container Advisor）用于监控所在节点的容器运行状态，当前已经 </font></p><p><font size=\"3\">被默认集成到 kubelet 组件内，默认使用 tcp 4194 端口。在大规模容器集群，一般使用 </font></p><p><font size=\"3\">Heapster+Influxdb+Grafana 平台实现集群性能数据的采集，存储与展示。</font></p></blockquote><blockquote><p><font size=\"3\"><br></font></p><p><font size=\"3\">Heapster：集群中各 node 节点的 cAdvisor 的数据采集汇聚系统，通过调用 node 上 </font></p><p><font size=\"3\">kubelet 的 api，再通过 kubelet 调用 cAdvisor 的 api 来采集所在节点上所有容器的性能 </font></p><p><font size=\"3\">数据。Heapster 对性能数据进行聚合，并将结果保存到后端存储系统，heapster 支持多种 </font></p><p><font size=\"3\">后端存储系统，如 memory，Influxdb 等。 </font></p><p><font size=\"3\">Influxdb：分布式时序数据库（每条记录有带有时间戳属性），主要用于实时数据采集， </font></p><p><font size=\"3\">时间跟踪记录，存储时间图表，原始数据等。Influxdb 提供 rest api 用于数据的存储与 </font></p><p><font size=\"3\">查询。 </font></p><p><font size=\"3\">Grafana：通过 dashboard 将 Influxdb 中的时序数据展现成图表或曲线等形式，便于查看 </font></p><p><font size=\"3\">集群运行状态。 </font></p><p><font size=\"3\">Heapster，Influxdb，Grafana 均以 Pod 的形式启动与运行</font></p></blockquote><p><br></p><h1 id=\"n5dxn\">1.<span style=\"font-size: 1em;\">prometheus部署</span></h1><div><p><font size=\"4\" color=\"#000000\"><b style=\"\">node-exporter.yaml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">prom/node-exporter</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">9100</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9100</span>\n    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31672</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n</code></pre><p><font size=\"4\" color=\"#000000\"><b style=\"\"><br></b></font></p><pre type=\"Bash\"><code>kubectl apply -f  <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-exporter</span>.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FjMVsfouHCTG2Dw4EK9SXVS8OtT0\" style=\"max-width:100%;\"><font size=\"4\" color=\"#000000\"><b style=\"\"><br></b></font></p><p><br></p><p><font size=\"4\" color=\"#000000\"><b style=\"\">rbac-setup.yaml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">prom/node-exporter</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">9100</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-exporter</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9100</span>\n    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31672</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">node-exporter</span>\n</code></pre><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><pre type=\"Bash\"><code>kubectl apply -f  rbac-<span class=\"hljs-built_in\">setup</span>.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FtlSXUmmOO1JvdE8Vj2qr1PCXAwq\" style=\"font-size: 1em; max-width: 100%;\"><br></p><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><p><font size=\"4\" color=\"#000000\"><b>configmap.yaml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ConfigMap</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus-config</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">data:</span>\n  <span class=\"hljs-attr\">prometheus.yml:</span> <span class=\"hljs-string\">|\n    global:\n      scrape_interval:     15s\n      evaluation_interval: 15s\n    scrape_configs:\n</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-apiservers\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">endpoints</span>\n      <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">https</span>\n      <span class=\"hljs-attr\">tls_config:</span>\n        <span class=\"hljs-attr\">ca_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span>\n      <span class=\"hljs-attr\">bearer_token_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace,</span> <span class=\"hljs-string\">__meta_kubernetes_service_name,</span> <span class=\"hljs-string\">__meta_kubernetes_endpoint_port_name]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">default;kubernetes;https</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-nodes\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">node</span>\n      <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">https</span>\n      <span class=\"hljs-attr\">tls_config:</span>\n        <span class=\"hljs-attr\">ca_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span>\n      <span class=\"hljs-attr\">bearer_token_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_node_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">kubernetes.default.svc:443</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_node_name]</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">/api/v1/nodes/${1}/proxy/metrics</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-cadvisor\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">node</span>\n      <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">https</span>\n      <span class=\"hljs-attr\">tls_config:</span>\n        <span class=\"hljs-attr\">ca_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span>\n      <span class=\"hljs-attr\">bearer_token_file:</span> <span class=\"hljs-string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_node_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">kubernetes.default.svc:443</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_node_name]</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">/api/v1/nodes/${1}/proxy/metrics/cadvisor</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-service-endpoints\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">endpoints</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_scheme]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__scheme__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(https?)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_path]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__address__,</span> <span class=\"hljs-string\">__meta_kubernetes_service_annotation_prometheus_io_port]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">([^:]+)(?::\\d+)?;(\\d+)</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">$1:$2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_service_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_name]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_name</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-services\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">service</span>\n      <span class=\"hljs-attr\">metrics_path:</span> <span class=\"hljs-string\">/probe</span>\n      <span class=\"hljs-attr\">params:</span>\n        <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">[http_2xx]</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_annotation_prometheus_io_probe]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__address__]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__param_target</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">blackbox-exporter.example.com:9115</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__param_target]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">instance</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_service_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_service_name]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_name</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-ingresses\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">ingress</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_ingress_annotation_prometheus_io_probe]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+);(.+);(.+)</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">${1}://${2}${3}</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__param_target</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">blackbox-exporter.example.com:9115</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__param_target]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">instance</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_ingress_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_ingress_name]</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_name</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">\'kubernetes-pods\'</span>\n      <span class=\"hljs-attr\">kubernetes_sd_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">pod</span>\n      <span class=\"hljs-attr\">relabel_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">keep</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_pod_annotation_prometheus_io_path]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__metrics_path__</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__address__,</span> <span class=\"hljs-string\">__meta_kubernetes_pod_annotation_prometheus_io_port]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">([^:]+)(?::\\d+)?;(\\d+)</span>\n        <span class=\"hljs-attr\">replacement:</span> <span class=\"hljs-string\">$1:$2</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">__address__</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">labelmap</span>\n        <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">__meta_kubernetes_pod_label_(.+)</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_namespace]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_namespace</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">source_labels:</span> <span class=\"hljs-string\">[__meta_kubernetes_pod_name]</span>\n        <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">replace</span>\n        <span class=\"hljs-attr\">target_label:</span> <span class=\"hljs-string\">kubernetes_pod_name</span>\n</code></pre><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f  configmap.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FgY-NZg1TAqpJ98keh3iQKC0dFYZ\" style=\"max-width:100%;\"><font size=\"4\" color=\"#000000\"><b><br></b></font></p><p><font size=\"4\" color=\"#000000\"><b>prometheus.deploy.yml</b></font></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus-deployment</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">prom/prometheus</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus</span>\n        <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"/bin/prometheus\"</span>\n        <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"--config.file=/etc/prometheus/prometheus.yml\"</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"--storage.tsdb.path=/prometheus\"</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"--storage.tsdb.retention=24h\"</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">9090</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n        <span class=\"hljs-attr\">volumeMounts:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">\"/prometheus\"</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">data</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">\"/etc/prometheus\"</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config-volume</span>\n        <span class=\"hljs-attr\">resources:</span>\n          <span class=\"hljs-attr\">requests:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">100m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">100Mi</span>\n          <span class=\"hljs-attr\">limits:</span>\n            <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">500m</span>\n            <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">2500Mi</span>\n      <span class=\"hljs-attr\">serviceAccountName:</span> <span class=\"hljs-string\">prometheus</span>    \n      <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">data</span>\n        <span class=\"hljs-attr\">emptyDir:</span> <span class=\"hljs-string\">{}</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config-volume</span>\n        <span class=\"hljs-attr\">configMap:</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus-config</span>   \n</code></pre><p><font size=\"4\" color=\"#000000\"><b><br></b></font></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">apply</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">prometheus</span><span class=\"hljs-selector-class\">.deploy</span><span class=\"hljs-selector-class\">.yml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fm19sLTjy-U0sGNwKVA5sQiyLBqN\" style=\"max-width:100%;\"><font size=\"4\" color=\"#000000\"><b><br></b></font></p><p><font size=\"4\" color=\"#000000\"><b>prometheus.svc.yml</b></font></p></div><pre type=\"Bash\"><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">prometheus</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9090</span>\n    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">9090</span>\n    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">30003</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">prometheus</span>\n</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">apply</span> <span class=\"hljs-selector-tag\">-f</span> <span style=\"font-size: 1em; background-color: rgb(255, 255, 255);\">prometheus.svc.yml</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Frf7N-Sub9nqdMC8TU4JV-LG_Jq3\" style=\"max-width:100%;\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FtvQI8IDhEYgze92MaXhQ3FoJgTU\" style=\"max-width:100%;\"><br></p><h2 id=\"xqaja\">浏览器访问</h2><p><a href=\"http://192.168.181.139:30003/\" target=\"_blank\"><font size=\"4\">http://192.168.181.139:30003/</font></a><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fi1YTKdbaybl2e5PcImDC1euo-Hn\" style=\"max-width:100%;\" width=\"1246.97\" height=\"473.63\"><br></p><h2 id=\"8gihl\">2.搭建<span style=\"font-size: 1em;\">grafana</span></h2><div><p><font size=\"4\">grafana-deploy.yaml</font></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n   <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">monitoring-grafana</span>\n   <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n   <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span>\n   <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n   <span class=\"hljs-attr\">template:</span>\n     <span class=\"hljs-attr\">metadata:</span>\n       <span class=\"hljs-attr\">labels:</span>\n         <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">monitoring</span>\n         <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span>\n     <span class=\"hljs-attr\">spec:</span>\n       <span class=\"hljs-attr\">containers:</span>\n       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">grafana</span>\n         <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">grafana/grafana</span>\n         <span class=\"hljs-attr\">ports:</span>\n         <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">3000</span>\n           <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n         <span class=\"hljs-attr\">env:</span>\n         <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">INFLUXDB_HOST</span>\n           <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">monitoring-influxdb</span>\n         <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">GF_INSTALL_PLUGINS</span>\n           <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">grafana-kubernetes-app</span></code></pre><p><font size=\"4\"><br></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f grafana-deploy.yaml</code></pre><p><font size=\"4\">grafana-svc.yaml</font></p><pre type=\"Bash\"><code>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n   <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">monitoring-grafana</span>\n   <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n   <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">core</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3000</span>\n      <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">31000</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">k8s-app:</span> <span class=\"hljs-string\">grafana</span></code></pre><p><font size=\"4\"><br></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f grafana-svc.yaml</code></pre><p><br></p></div><p><font size=\"4\">访问：<a href=\"http://192.168.181.139:31000/\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">http://192.168.181.139:31000/</a></font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FsTkaKlDq27Axs8v8WVcTyByLP9a\" style=\"max-width:100%;\" width=\"918.97\" height=\"501.6\"><br></p><p><br></p><h1 id=\"upkjl\">3.设置数据源</h1><p><img src=\"http://qiniu-picture.xiyanit.cn/FuvhzPHX3oYb7o-LSeMadgLYndHb\" style=\"max-width:100%;\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhxvmuS5A-WLacCfqmyq9nwB_FNx\" style=\"max-width:100%;\" width=\"1184.97\" height=\"646.77\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FgiHJlZ1NUb-XshIL0djSuNWVEJ7\" style=\"max-width:100%;\"><br></p><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FizMmNKZaXXmRfgUD3cx-YFRPHLK\" style=\"max-width:100%;\" width=\"957\" height=\"625.73\"><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FhTrrFzHJU7l8YMBK-yl-qMsvl9y\" style=\"max-width:100%;\" width=\"934.97\" height=\"510.34\"><br></p>','1','8','1','1','1','2021-03-11 21:13:46','2021-03-12 14:34:53'),(61,'http://qiniu-picture.xiyanit.cn/FslOuGpeN8PCeU6ZHnV9VIGNBF6k','高可用Kubernetes集群 (kubeadm搭建方式)','Kubernetes,kubeadm,高可用,','高可用Kubernetes集群 (kubeadm搭建方式)，多master，多node，高可用，集群',46,1,0,'1',1,'<h1>1、集群拓扑图</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/25397269-91168ead6b25bbce.png?imageMogr2/auto-orient/strip|imageView2/2/w/875/format/webp\"><br></p><h2>部署方式</h2><blockquote><p><font size=\"3\">（1）minikube<br>minikube可以在本地运行Kubernetes的工具，minikube可以在个人计算机（包括Windows，macOS和Linux PC）上运行一个单节点Kubernetes集群，以便您可以试用Kubernetes或进行日常开发工作；<br>https://kubernetes.io/docs/tutorials/hello-minikube/<br>（2）kind<br>Kind和minikube类似的工具，让你在本地计算机上运行Kubernetes，此工具需要安装并配置Docker；<br>https://kind.sigs.k8s.io/<br>（3）kubeadm<br>Kubeadm是一个K8s部署工具，提供kubeadm init 和 kubeadm join两个操作命令，可以快速部署一个Kubernetes集群；<br>官方地址：<br>https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/<br>https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/<br>（4）二进制包<br>从Github下载发行版的二进制包，手动部署安装每个组件，组成Kubernetes集群，步骤比较繁琐，但是能让你对各个组件有更清晰的认识；<br>（5）yum安装<br>通过yum安装Kubernetes的每个组件，组成Kubernetes集群，不过yum源里面的k8s版本已经比较老了，所以这种方式用得也比较少了；<br>（6）第三方工具<br>有一些大神封装了一些工具，利用这些工具进行k8s环境的安装；<br>（7）花钱购买<br>直接购买类似阿里云这样的公有云平台k8s，一键搞定；</font></p></blockquote><h1>一、K8S集群搭建（v1.20.1&nbsp; kubeadm部署方式）</h1><p><font size=\"3\">Kubernetes（简称K8S）是开源的容器集群管理系统，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。它既是一款容器编排工具，也是全新的基于容器技术的分布式架构领先方案。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等功能，提高了大规模容器集群管理的便捷性。</font><br><br></p><h2>1.安装要求</h2><p><font size=\"3\">一台或多台机器，操作系统 CentOS7.x-86_x64<br>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多<br>集群中所有机器之间网络互通<br>可以访问外网，需要拉取镜像<br>禁止swap分区</font></p><p><br></p><p><font size=\"3\">配置环境需要组件我整理了</font></p><p><font size=\"3\">链接：https://pan.baidu.com/s/124SrYHRqK6AevApON-OO4w<br>提取码：ivdl<br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><h2>2.环境</h2><pre><code>master1 192.168.18.128</code><code><br></code><code>master2 192.168.18.129\nnode1 192.168.18.130\nnode2 192.168.18.131</code><code><br></code><code>k8s-vip 192.168.18.132 #虚拟ip<br></code></pre><p><br></p><h2>3.修改主机名</h2><p><br><font size=\"3\">master1:&nbsp;&nbsp;192.168.18.128</font><br><br></p><pre><code>hostnamectl set-hostname master1</code></pre><p><br></p><p><font size=\"3\">master2:&nbsp;&nbsp;192.168.18.129</font><br><br></p><pre><code>hostnamectl set-hostname master2</code></pre><p><br></p><p><font size=\"3\">node1:&nbsp;&nbsp;192.168.18.130</font><br><br></p><pre><code>hostnamectl set-hostname node1</code></pre><p><br></p><p><font size=\"3\">node2:&nbsp;&nbsp;192.168.18.131</font><br><br></p><pre><code>hostnamectl set-hostname node2</code></pre><p><br></p><p><font color=\"#f9963b\" size=\"5\">设置完重启服务器</font></p><p><font size=\"4\" color=\"#f9963b\"><br></font></p><p><b><font color=\"#f9963b\" size=\"4\">以下都是四台服务器同时操作请按图片操作打开键盘模式</font></b></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fox1JcLu3VQBEG28wzVNlT-kvIDX\"><b><br></b></p><h2>4.防火墙关闭</h2><pre><code>systemctl stop firewalld\nsystemctl disable firewalld</code></pre><p><br></p><h2>5.关闭selinux</h2><pre><code>sed -i \'s/SELINUX=enforcing/SELINUX=disabled/g\' /etc/selinux/config # 永久关闭<br></code><code>setenforce 0 # 临时关闭<br></code></pre><p><br></p><h2>6.关闭swap</h2><pre><code>swapoff -a # 临时关闭；关闭swap主要是为了性能考虑\nsed -ri \'s/.*swap.*/#&amp;/\' /etc/fstab</code></pre><p>free # 可以通过这个命令查看swap是否关闭了&nbsp;<br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpawE4ilhcLt6GRGek7-K9qab9sH\"><br></p><h2>7.添加主机名与IP对应的关系</h2><p><br></p><pre type=\"Bash\"><code>cat &gt;&gt; /etc/hosts &lt;&lt; EOF\n<span class=\"hljs-number\">192.168.18.132</span>    master.k8s.io    k8s-vip\n<span class=\"hljs-number\">192.168.18.128</span>    master01.k8s.io  master<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">192.168.18.129</span>    master02.k8s.io  master<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">192.168.18.130</span>    node01.k8s.io    node<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">192.168.18.131</span>    node02.k8s.io    node<span class=\"hljs-number\">2</span>\nEOF</code></pre><p><br></p><p><b><font size=\"4\" color=\"#f9963b\">时间同步</font></b></p><pre><code>yum install ntpdate -y</code><code>\nntpdate time.windows.com</code></pre><p><br></p><h2>8.将桥接的IPv4流量传递到iptables的链</h2><pre><code>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF</code></pre><p><br></p><pre><code>sysctl --system</code></pre><p><br></p><h2>9. 所有master节点部署keepalived</h2><h3>9.1 安装相关包和keepalived</h3><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">install</span> -y conntrack-tools libseccomp libtool-ltdl\n\nyum <span class=\"hljs-keyword\">install</span> -y keepalived</code></pre><p><br></p><h3>9.2配置master节点</h3><p><b><font size=\"3\" color=\"#f9963b\">master1节点配置</font></b></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">cat</span> <span class=\"hljs-string\">&gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span>\n<span class=\"hljs-comment\">! Configuration File for keepalived</span>\n\n<span class=\"hljs-attr\">global_defs</span> <span class=\"hljs-string\">{</span>\n   <span class=\"hljs-attr\">router_id</span> <span class=\"hljs-string\">k8s</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_script</span> <span class=\"hljs-string\">check_haproxy {</span>\n    <span class=\"hljs-attr\">script</span> <span class=\"hljs-string\">\"killall -0 haproxy\"</span>\n    <span class=\"hljs-attr\">interval</span> <span class=\"hljs-string\">3</span>\n    <span class=\"hljs-attr\">weight</span> <span class=\"hljs-string\">-2</span>\n    <span class=\"hljs-attr\">fall</span> <span class=\"hljs-string\">10</span>\n    <span class=\"hljs-attr\">rise</span> <span class=\"hljs-string\">2</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_instance</span> <span class=\"hljs-string\">VI_1 {</span>\n    <span class=\"hljs-attr\">state</span> <span class=\"hljs-string\">MASTER </span>\n    <span class=\"hljs-attr\">interface</span> <span class=\"hljs-string\">ens33 </span>\n    <span class=\"hljs-attr\">virtual_router_id</span> <span class=\"hljs-string\">51</span>\n    <span class=\"hljs-attr\">priority</span> <span class=\"hljs-string\">250</span>\n    <span class=\"hljs-attr\">advert_int</span> <span class=\"hljs-string\">1</span>\n    <span class=\"hljs-attr\">authentication</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">auth_type</span> <span class=\"hljs-string\">PASS</span>\n        <span class=\"hljs-attr\">auth_pass</span> <span class=\"hljs-string\">ceb1b3ec013d66163d6ab</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">virtual_ipaddress</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">192.168.18.132</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">track_script</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">check_haproxy</span>\n    <span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">EOF</span></code></pre><p><br></p><p><font size=\"3\" color=\"#f9963b\"><b>master2节点配置</b></font><b><font size=\"3\"><br></font></b></p><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">cat</span> <span class=\"hljs-string\">&gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span>\n<span class=\"hljs-comment\">! Configuration File for keepalived</span>\n\n<span class=\"hljs-attr\">global_defs</span> <span class=\"hljs-string\">{</span>\n   <span class=\"hljs-attr\">router_id</span> <span class=\"hljs-string\">k8s</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_script</span> <span class=\"hljs-string\">check_haproxy {</span>\n    <span class=\"hljs-attr\">script</span> <span class=\"hljs-string\">\"killall -0 haproxy\"</span>\n    <span class=\"hljs-attr\">interval</span> <span class=\"hljs-string\">3</span>\n    <span class=\"hljs-attr\">weight</span> <span class=\"hljs-string\">-2</span>\n    <span class=\"hljs-attr\">fall</span> <span class=\"hljs-string\">10</span>\n    <span class=\"hljs-attr\">rise</span> <span class=\"hljs-string\">2</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_instance</span> <span class=\"hljs-string\">VI_1 {</span>\n    <span class=\"hljs-attr\">state</span> <span class=\"hljs-string\">BACKUP </span>\n    <span class=\"hljs-attr\">interface</span> <span class=\"hljs-string\">ens33 </span>\n    <span class=\"hljs-attr\">virtual_router_id</span> <span class=\"hljs-string\">51</span>\n    <span class=\"hljs-attr\">priority</span> <span class=\"hljs-string\">200</span>\n    <span class=\"hljs-attr\">advert_int</span> <span class=\"hljs-string\">1</span>\n    <span class=\"hljs-attr\">authentication</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">auth_type</span> <span class=\"hljs-string\">PASS</span>\n        <span class=\"hljs-attr\">auth_pass</span> <span class=\"hljs-string\">ceb1b3ec013d66163d6ab</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">virtual_ipaddress</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">192.168.18.132</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">track_script</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">check_haproxy</span>\n    <span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">EOF</span></code></pre><h3>9.3 启动和检查</h3><p><font size=\"3\" color=\"#c24f4a\">在两台master节点都执行</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">#</span><span class=\"bash\"> 启动keepalived</span>\n<span class=\"bash\">systemctl start keepalived.service</span>\n# 设置开机启动\n<span class=\"bash\">systemctl <span class=\"hljs-built_in\">enable</span> keepalived.service</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看启动状态</span>\n<span class=\"bash\">systemctl status keepalived.service</span></code></pre><p><font size=\"3\">启动后查看master1的网卡信息</font><br></p><pre type=\"Bash\"><code>ip a s e<span class=\"hljs-symbol\">ns33</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FrkK-c5PNFR5pNfJt_yVJAVR5Hmf\" style=\"max-width:100%;\"><br></p><h2><br></h2><h2>10. 部署haproxy (二台master节点执行)</h2><h3>10.1 安装</h3><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">install</span> -y haproxy</code></pre><p><br></p><h3>10.2 配置</h3><h2><p><font size=\"4\"><font color=\"#f9963b\">两台master节点的配置均相同</font>，配置中声明了后端代理的两个master节点服务器，指定了haproxy运行的端口为16443等，因此16443端口为集群的入口</font></p><p><font size=\"4\"><br></font></p><pre type=\"Bash\"><code><font size=\"3\">cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt; EOF\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># Global settings</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\nglobal\n    # <span class=\"hljs-keyword\">to</span> have these messages end up <span class=\"hljs-keyword\">in</span> /var/log/haproxy.log you will\n    # need <span class=\"hljs-keyword\">to</span>:\n    # 1) configure syslog <span class=\"hljs-keyword\">to</span> accept<span class=\"hljs-built_in\"> network </span>log events.  This is done\n    #    by adding the <span class=\"hljs-string\">\'-r\'</span> option <span class=\"hljs-keyword\">to</span> the SYSLOGD_OPTIONS <span class=\"hljs-keyword\">in</span>\n    #    /etc/sysconfig/syslog\n    # 2) configure local2 events <span class=\"hljs-keyword\">to</span> go <span class=\"hljs-keyword\">to</span> the /var/log/haproxy.log\n    #   file. A line like the following can be added <span class=\"hljs-keyword\">to</span>\n    #   /etc/sysconfig/syslog\n    #\n    #    local2.*                       /var/log/haproxy.log\n    #\n    log         127.0.0.1 local2\n    \n    chroot      /var/lib/haproxy\n    pidfile     /var/run/haproxy.pid\n    maxconn     4000\n   <span class=\"hljs-built_in\"> user </span>       haproxy\n   <span class=\"hljs-built_in\"> group </span>      haproxy\n    daemon \n       \n    # turn on stats unix socket\n    stats socket /var/lib/haproxy/stats\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># common defaults that all the \'listen\' and \'backend\' sections will</span>\n<span class=\"hljs-comment\"># use if not designated in their block</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------  </span>\ndefaults\n    mode                    http\n    log                     global\n    option                  httplog\n    option                  dontlognull\n    option http-server-close\n    option forwardfor       except 127.0.0.0/8\n    option                  redispatch\n    retries                 3\n    timeout http-request    10s\n    timeout<span class=\"hljs-built_in\"> queue </span>          1m\n    timeout connect         10s\n    timeout<span class=\"hljs-built_in\"> client </span>         1m\n    timeout<span class=\"hljs-built_in\"> server </span>         1m\n    timeout http-keep-alive 10s\n    timeout check           10s\n    maxconn                 3000\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># kubernetes apiserver frontend which proxys to the backends</span>\n<span class=\"hljs-comment\">#--------------------------------------------------------------------- </span>\nfrontend kubernetes-apiserver\n    mode                 tcp\n    bind                 *:16443\n    option               tcplog\n    default_backend      kubernetes-apiserver    \n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># round robin balancing between the various backends</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\nbackend kubernetes-apiserver\n    mode        tcp\n    balance     roundrobin\n   <span class=\"hljs-built_in\"> server </span>     master01.k8s.io   192.168.18.128:6443 check\n   <span class=\"hljs-built_in\"> server </span>     master02.k8s.io   192.168.18.129:6443 check\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># collection haproxy statistics message</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\nlisten stats\n    bind                 *:1080\n    stats auth           admin:awesomePassword\n    stats refresh        5s\n    stats realm          HAProxy\\ Statistics\n    stats uri            /admin?stats\nEOF</font></code></pre></h2><h3>10.3 启动和检查</h3><p><font size=\"3\">两台master都启动(<font color=\"#c24f4a\">使用键盘工具可以同时一起执行</font>)</font></p><p><font size=\"4\" color=\"#f9963b\">192.168.18.128 先启动</font></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 开启haproxy</span>\nsystemctl <span class=\"hljs-literal\">start</span> haproxy</code></pre><p><br></p><p><font size=\"4\" color=\"#f9963b\">192.168.18.129 在启动</font></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 开启haproxy</span>\nsystemctl <span class=\"hljs-literal\">start</span> haproxy</code></pre><p><br></p><p><font color=\"#f9963b\" size=\"4\">二台服务器启动后在继续后面的二条命令</font></p><pre type=\"Bash\"><code># 设置开机启动\nsystemctl enable haproxy\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看启动状态</span>\n<span class=\"bash\">systemctl status haproxy</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FqCY83Uuqu7PAPr250p0iXkw4t3W\" style=\"max-width:100%;\" width=\"894\" height=\"295.37\"><br></p><p><br></p><h2 id=\"l663a\"><font color=\"#f9963b\">10.4如果启动出现如下情况卸载haproxy进行重新安装在重新启动</font></h2><p><img src=\"http://qiniu-picture.xiyanit.cn/Fqg-cVYpc9t-eWeHz1eVFiFbY3zW\" style=\"max-width:100%;\" width=\"935.16\" height=\"295.6\"><br></p><h2>11. <font color=\"#f9963b\">所有节点</font>安装Docker/kubeadm/kubelet</h2><p><font size=\"3\">Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</font></p><h3>11.1 安装Docker</h3><pre type=\"Bash\"><code>wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O/etc/yum.repos.d/docker-ce.repo<br></code><code><br></code><code>yum -y install docker-ce-19.03.9-3.el7<br></code><code>\nsystemctl enable docker &amp;&amp; systemctl start docker</code><code>\ndocker --<span class=\"hljs-keyword\">version</span><br></code></pre><p><br></p><h3>11.2 添加阿里云YUM软件源</h3><pre type=\"Bash\"><code>cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"hljs-keyword\">EOF</span>\n{\n  <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://goieqwi4.mirror.aliyuncs.com\"</span>]\n}\n<span class=\"hljs-keyword\">EOF</span></code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-regexp\">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=<span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/repos</span><span class=\"hljs-regexp\">/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/yum-key.gpg https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/rpm-package-key.gpg\nEOF</span></code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#重启docker</span>\n<span class=\"hljs-attribute\">systemctl</span> restart docker</code></pre><p><br></p><blockquote><h2 id=\"xg0wm\">11.3 安装kubeadm，kubelet和kubectl（所有节点都安装）</h2><p><br></p><p><font size=\"3\">kubelet # 运行在 Cluster 所有节点上，负责启动 Pod 和容器<br><br>kubeadm # 用于初始化 Cluster<br><br>kubectl # 是 Kubernetes 命令行工具。通过 kubectl 可以部署和管理应用，查看各种资源，创建、删除和更新各种组件<br></font></p><font size=\"3\"><br>由于版本更新频繁，这里指定版本号部署：</font></blockquote><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 这里安装最新的v1.20.1</span>\nyum install -y kubelet-1.20.1 kubeadm-1.20.1 kubectl-1.20.1\n<span class=\"hljs-comment\"># 此时，还不能启动kubelet，因为此时配置还不能，现在仅仅可以设置开机自启动</span>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kubelet</span></code></pre><p><br></p><p><br></p><h2>12. 部署Kubernetes Master</h2><h3>12.1 创建kubeadm配置文件</h3><p><font size=\"4\" style=\"color: rgb(249, 150, 59);\">在具有vip的master上操作，</font><font size=\"5\" style=\"\" color=\"#7b5ba1\">这里为master1</font></p><pre type=\"Bash\"><code>mkdir <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/kubernetes/m</span>anifests -p</code></pre><p><br></p><pre type=\"Bash\"><code>cd <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/kubernetes/m</span>anifests<span class=\"hljs-regexp\">/</span></code></pre><p><br></p><pre type=\"Bash\"><code>vi kubeadm-<span class=\"hljs-built_in\">config</span>.yaml</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiServer:</span>\n  <span class=\"hljs-attr\">certSANs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master1</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master2</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master.k8s.io</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.18.132</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.</span>18.128\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.18.129</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n  <span class=\"hljs-attr\">extraArgs:</span>\n    <span class=\"hljs-attr\">authorization-mode:</span> <span class=\"hljs-string\">Node,RBAC</span>\n  <span class=\"hljs-attr\">timeoutForControlPlane:</span> <span class=\"hljs-string\">4m0s</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubeadm.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">certificatesDir:</span> <span class=\"hljs-string\">/etc/kubernetes/pki</span>\n<span class=\"hljs-attr\">clusterName:</span> <span class=\"hljs-string\">kubernetes</span>\n<span class=\"hljs-attr\">controlPlaneEndpoint:</span> <span class=\"hljs-string\">\"master.k8s.io:16443\"</span>\n<span class=\"hljs-attr\">controllerManager:</span> <span class=\"hljs-string\">{}</span>\n<span class=\"hljs-attr\">dns:</span> \n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">CoreDNS</span>\n<span class=\"hljs-attr\">etcd:</span>\n  <span class=\"hljs-attr\">local:</span>    \n    <span class=\"hljs-attr\">dataDir:</span> <span class=\"hljs-string\">/var/lib/etcd</span>\n<span class=\"hljs-attr\">imageRepository:</span> <span class=\"hljs-string\">registry.aliyuncs.com/google_containers</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterConfiguration</span>\n<span class=\"hljs-attr\">kubernetesVersion:</span> <span class=\"hljs-string\">v1.20.1</span>\n<span class=\"hljs-attr\">networking:</span> \n  <span class=\"hljs-attr\">dnsDomain:</span> <span class=\"hljs-string\">cluster.local</span>  \n  <span class=\"hljs-attr\">podSubnet:</span> <span class=\"hljs-number\">10.244</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/16</span>\n  <span class=\"hljs-attr\">serviceSubnet:</span> <span class=\"hljs-number\">10.1</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/16</span>\n<span class=\"hljs-attr\">scheduler:</span> <span class=\"hljs-string\">{}</span></code></pre><p><br></p><p><br></p><h3>12.2 在<font color=\"#c24f4a\">master1</font>节点执行</h3><pre type=\"Bash\"><code>kubeadm init --<span class=\"hljs-built_in\">config</span> kubeadm-<span class=\"hljs-built_in\">config</span>.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FhJckGZ8UJtm-ERISgxed-aU8rZ4\" width=\"1250\" height=\"682.29\"><font size=\"3\"><br></font></p><p><font size=\"3\"><br></font></p><p>出现启动不起来的话执行如下命令再次init初始化</p><pre><code>#重启kubeadm<br></code><code>kubeadm reset</code></pre><p><font size=\"3\"><br></font></p><p><font size=\"3\">按照提示配置环境变量，使用kubectl工具</font><br></p><pre type=\"Bash\"><code>mkdir -p $HOME/.kube</code><code><br></code><code>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</code><code>\nsudo chown $(id -u):$(id -g) $HOME/.kube/config<br></code><code><span class=\"hljs-built_in\">\n</span>kubectl <span class=\"hljs-builtin-name\">get</span> nodes</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> pods -n kube-system</code><code><br></code></pre><p><strong><font size=\"3\">按照提示保存以下内容，一会要使用：</font></strong><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubeadm</span> <span class=\"hljs-selector-tag\">join</span> <span class=\"hljs-selector-tag\">master</span><span class=\"hljs-selector-class\">.k8s</span><span class=\"hljs-selector-class\">.io</span><span class=\"hljs-selector-pseudo\">:16443</span> <span class=\"hljs-selector-tag\">--token</span> dxfk7f.nljvs04qf8mm3fgo \\\n    --discovery-token-ca-cert-hash sha256:73d0ac5b260d52d2e29eb0dc77b2c7ac6215ba10506c5dc1372158b5531e6e84 \\\n    <span class=\"hljs-selector-tag\">--control-plane</span> </code></pre><p><br></p><p><font size=\"3\">查看集群状态</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> cs\n\nkubectl <span class=\"hljs-builtin-name\">get</span> pods -n kube-system</code></pre><p><br></p><h2>13.安装集群网络</h2><p><font size=\"3\">从官方地址获取到flannel的yaml，在master1上执行&nbsp;</font></p><pre type=\"Bash\"><code>wget -c https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/coreos/</span>flannel<span class=\"hljs-regexp\">/master/</span>Documentation<span class=\"hljs-regexp\">/kube-flannel.yml</span></code></pre><p><br></p><p><font size=\"4\" color=\"#c24f4a\">报错文件解决</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200427195817259.jpg\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"3\">进入网站：<font color=\"#f9963b\">https://site.ip138.com/raw.Githubusercontent.com/</font></font><br><br><font size=\"3\">输入<font color=\"#f9963b\">raw.githubusercontent.com</font><br>查询其相关的IP地址:</font><br><img src=\"http://qiniu-picture.xiyanit.cn/FnuJHK-i6l2zEyu8X42_Tq4rXQEW\" style=\"max-width:100%;\" width=\"696\" height=\"414.53\"><br><font size=\"4\">在Ubuntu终端输入：<br>sudo vi /etc/hosts</font><br><br><font size=\"4\">选择上面一个添加内容即可：<br>比如：<br><a href=\"https://site.ip138.com/185.199.111.133/\" target=\"_blank\">185.199.111.133</a>&nbsp;raw.githubusercontent.com<br>或者<br><a href=\"https://site.ip138.com/185.199.111.133/\" target=\"_blank\">185.199.109.133</a>&nbsp;raw.githubusercontent.com</font><br><br><font size=\"4\">然后保存，退出<br><br>然后再次执行</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjKjsotGGsOsc0UfWepZjhEqid_e\" style=\"max-width:100%;\"><br></p><p><font size=\"3\"><br></font></p><p><font size=\"3\">修改镜像，不要会出现失败的现象</font></p><pre type=\"Bash\"><code>quay.io/coreos/flannel:v0<span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.0</span>-amd64</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo6ZVfS41PIWAhLc_WtlCLwa7C1T\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><br></p><p><font size=\"3\">安装flannel网络，<font color=\"#f9963b\">执行需要时间请耐心等待</font></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f kube-flannel.yml </code></pre><p><font size=\"3\"><br></font></p><p><font size=\"3\">检查<br></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> pods -n kube-<span class=\"hljs-keyword\">system</span></code><code><span class=\"hljs-keyword\"><br></span></code><code><span class=\"hljs-keyword\">kubectl get nodes<br></span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fru9g_G86saznCgz6XIU2kwoEMVj\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><h2><br>14、master2节点加入集群</h2><h3>14.1 复制密钥及相关文件</h3><p><font size=\"3\">从master1复制密钥及相关文件到master2</font><br></p><pre type=\"Bash\"><code>ssh root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span> mkdir -p /etc/kubernetes/pki/etcd\n\nscp /etc/kubernetes/admin.conf root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span><span class=\"hljs-symbol\">:/etc/kubernetes</span>\n   \nscp /etc/kubernetes/pki/{ca.*,sa.*,front-proxy-ca.*} root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span><span class=\"hljs-symbol\">:/etc/kubernetes/pki</span>\n   \nscp /etc/kubernetes/pki/etcd/ca.* root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span><span class=\"hljs-symbol\">:/etc/kubernetes/pki/etcd</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fsk-Sd6iD--OB1XHl31_ygG3Uik9\" style=\"max-width:100%;\" width=\"939\" height=\"536.68\"><font size=\"3\"><br></font></p><p><font size=\"3\"><br></font></p><h3>14.2 master2加入集群</h3><p><font size=\"4\">执行在master1上init后输出的join命令,需要带上参数<code style=\"\"><font color=\"#f9963b\">--control-plane</font></code>表示把master控制节点加入集群</font></p><pre type=\"Bash\"><code>kubeadm join master.k8s.io:16443 --token 88j8wr.yh2xbehma91953w1 --discovery-token-ca-cert-hash sha256:7fe1dc775ab7e54c54189615a5762fbce5135e132e5c0b83da2ffb2d54013efc --control-plane\n</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fh6u3HrfzP7_bDb63Z_AKjRq8TbK\" style=\"max-width:100%;\" width=\"848\" height=\"484.87\"><br></p><p><br></p><pre type=\"Bash\"><code>mkdir -p <span class=\"hljs-variable\">$HOME</span>/.kube</code><code>\nsudo cp -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube<span class=\"hljs-built_in\">/config</span></code><code><span class=\"hljs-built_in\">\n</span>sudo chown $(id -u):$(id -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config</code></pre><p><br></p><p><br></p><p>检查状态<br></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">node</span>\n\n<span class=\"hljs-title\">kubectl</span> get pods --all-namespaces</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fvd-q8k_eWDG1h7FsC3ifrOJQr0Z\" style=\"max-width:100%;\"><br></p><h2>15. 加入Kubernetes Node</h2><p><font size=\"4\">在node1，node2上执行</font></p><p><font size=\"4\">向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：唯一不同的地方是少了--control-plane这个命令</font></p><p><font size=\"4\">这个命令可以创建新的令牌&nbsp;</font><span style=\"font-size: 1em;\"></span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">kubeadm </span><span class=\"hljs-built_in\" style=\"font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">token</span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\"> </span><span class=\"hljs-keyword\" style=\"font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">create</span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\"> --</span><span class=\"hljs-keyword\" style=\"font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">print</span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">-join-command</span></p><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubeadm</span> <span class=\"hljs-selector-tag\">join</span> <span class=\"hljs-selector-tag\">master</span><span class=\"hljs-selector-class\">.k8s</span><span class=\"hljs-selector-class\">.io</span><span class=\"hljs-selector-pseudo\">:16443</span> <span class=\"hljs-selector-tag\">--token</span> <span class=\"hljs-selector-tag\">dxfk7f</span><span class=\"hljs-selector-class\">.nljvs04qf8mm3fgo</span> \\\n    <span class=\"hljs-selector-tag\">--discovery-token-ca-cert-hash</span> <span class=\"hljs-selector-tag\">sha256</span><span class=\"hljs-selector-pseudo\">:73d0ac5b260d52d2e29eb0dc77b2c7ac6215ba10506c5dc1372158b5531e6e84</span></code></pre><h3><strong id=\"x11vm\">集群网络重新安装，因为添加了新的node节点，<font color=\"#f9963b\">如果出现下载失败可以持续执行以下操作，直到下载成功</font>（<font color=\"#f9963b\">master1执行</font>）</strong></h3><div><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">delete</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">kube-flannel</span><span class=\"hljs-selector-class\">.yml</span>\n\n<span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">apply</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">kube-flannel</span><span class=\"hljs-selector-class\">.yml</span></code></pre></div><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fpy4C2p4UQqPgW7Ut1eS-rcVE-aL\" style=\"max-width:100%;\"><br></p><p><br></p><p><font size=\"3\">检查状态</font></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">node</span>\n\n<span class=\"hljs-title\">kubectl</span> get pods --all-namespaces</code></pre><h2><br></h2><p><img src=\"http://qiniu-picture.xiyanit.cn/Fgq3oIOuZCN58iEuhoTj8Om6c0E9\" style=\"max-width:100%;\"><br></p><h2>16. 测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><pre type=\"Bash\"><code>kubectl create deployment nginx <span class=\"hljs-attribute\">--image</span>=nginx</code><code>\nkubectl expose deployment nginx <span class=\"hljs-attribute\">--port</span>=80 <span class=\"hljs-attribute\">--type</span>=NodePort</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> pod,svc</code></pre><p><font size=\"4\"><br></font></p><p><font size=\"4\">访问地址：<a href=\"http://NodeIP:Port\">http://NodeIP:Port</a></font></p>','<h1>1、集群拓扑图</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/25397269-91168ead6b25bbce.png?imageMogr2/auto-orient/strip|imageView2/2/w/875/format/webp\"><br></p><h2>部署方式</h2><blockquote><p><font size=\"3\">（1）minikube<br>minikube可以在本地运行Kubernetes的工具，minikube可以在个人计算机（包括Windows，macOS和Linux PC）上运行一个单节点Kubernetes集群，以便您可以试用Kubernetes或进行日常开发工作；<br>https://kubernetes.io/docs/tutorials/hello-minikube/<br>（2）kind<br>Kind和minikube类似的工具，让你在本地计算机上运行Kubernetes，此工具需要安装并配置Docker；<br>https://kind.sigs.k8s.io/<br>（3）kubeadm<br>Kubeadm是一个K8s部署工具，提供kubeadm init 和 kubeadm join两个操作命令，可以快速部署一个Kubernetes集群；<br>官方地址：<br>https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/<br>https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/<br>（4）二进制包<br>从Github下载发行版的二进制包，手动部署安装每个组件，组成Kubernetes集群，步骤比较繁琐，但是能让你对各个组件有更清晰的认识；<br>（5）yum安装<br>通过yum安装Kubernetes的每个组件，组成Kubernetes集群，不过yum源里面的k8s版本已经比较老了，所以这种方式用得也比较少了；<br>（6）第三方工具<br>有一些大神封装了一些工具，利用这些工具进行k8s环境的安装；<br>（7）花钱购买<br>直接购买类似阿里云这样的公有云平台k8s，一键搞定；</font></p></blockquote><h1>一、K8S集群搭建（v1.20.1&nbsp; kubeadm部署方式）</h1><p><font size=\"3\">Kubernetes（简称K8S）是开源的容器集群管理系统，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。它既是一款容器编排工具，也是全新的基于容器技术的分布式架构领先方案。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等功能，提高了大规模容器集群管理的便捷性。</font><br><br></p><h2>1.安装要求</h2><p><font size=\"3\">一台或多台机器，操作系统 CentOS7.x-86_x64<br>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多<br>集群中所有机器之间网络互通<br>可以访问外网，需要拉取镜像<br>禁止swap分区</font></p><p><br></p><p><font size=\"3\">配置环境需要组件我整理了</font></p><p><font size=\"3\">链接：https://pan.baidu.com/s/124SrYHRqK6AevApON-OO4w<br>提取码：ivdl<br>复制这段内容后打开百度网盘手机App，操作更方便哦</font></p><h2>2.环境</h2><pre><code>master1 192.168.18.128</code><code><br></code><code>master2 192.168.18.129\nnode1 192.168.18.130\nnode2 192.168.18.131</code><code><br></code><code>k8s-vip 192.168.18.132 #虚拟ip<br></code></pre><p><br></p><h2>3.修改主机名</h2><p><br><font size=\"3\">master1:&nbsp;&nbsp;192.168.18.128</font><br><br></p><pre><code>hostnamectl set-hostname master1</code></pre><p><br></p><p><font size=\"3\">master2:&nbsp;&nbsp;192.168.18.129</font><br><br></p><pre><code>hostnamectl set-hostname master2</code></pre><p><br></p><p><font size=\"3\">node1:&nbsp;&nbsp;192.168.18.130</font><br><br></p><pre><code>hostnamectl set-hostname node1</code></pre><p><br></p><p><font size=\"3\">node2:&nbsp;&nbsp;192.168.18.131</font><br><br></p><pre><code>hostnamectl set-hostname node2</code></pre><p><br></p><p><font color=\"#f9963b\" size=\"5\">设置完重启服务器</font></p><p><font size=\"4\" color=\"#f9963b\"><br></font></p><p><b><font color=\"#f9963b\" size=\"4\">以下都是四台服务器同时操作请按图片操作打开键盘模式</font></b></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fox1JcLu3VQBEG28wzVNlT-kvIDX\"><b><br></b></p><h2>4.防火墙关闭</h2><pre><code>systemctl stop firewalld\nsystemctl disable firewalld</code></pre><p><br></p><h2>5.关闭selinux</h2><pre><code>sed -i \'s/SELINUX=enforcing/SELINUX=disabled/g\' /etc/selinux/config # 永久关闭<br></code><code>setenforce 0 # 临时关闭<br></code></pre><p><br></p><h2>6.关闭swap</h2><pre><code>swapoff -a # 临时关闭；关闭swap主要是为了性能考虑\nsed -ri \'s/.*swap.*/#&amp;/\' /etc/fstab</code></pre><p>free # 可以通过这个命令查看swap是否关闭了&nbsp;<br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FpawE4ilhcLt6GRGek7-K9qab9sH\"><br></p><h2>7.添加主机名与IP对应的关系</h2><p><br></p><pre type=\"Bash\"><code>cat &gt;&gt; /etc/hosts &lt;&lt; EOF\n<span class=\"hljs-number\">192.168.18.132</span>    master.k8s.io    k8s-vip\n<span class=\"hljs-number\">192.168.18.128</span>    master01.k8s.io  master<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">192.168.18.129</span>    master02.k8s.io  master<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">192.168.18.130</span>    node01.k8s.io    node<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">192.168.18.131</span>    node02.k8s.io    node<span class=\"hljs-number\">2</span>\nEOF</code></pre><p><br></p><p><b><font size=\"4\" color=\"#f9963b\">时间同步</font></b></p><pre><code>yum install ntpdate -y</code><code>\nntpdate time.windows.com</code></pre><p><br></p><h2>8.将桥接的IPv4流量传递到iptables的链</h2><pre><code>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF</code></pre><p><br></p><pre><code>sysctl --system</code></pre><p><br></p><h2>9. 所有master节点部署keepalived</h2><h3>9.1 安装相关包和keepalived</h3><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">install</span> -y conntrack-tools libseccomp libtool-ltdl\n\nyum <span class=\"hljs-keyword\">install</span> -y keepalived</code></pre><p><br></p><h3>9.2配置master节点</h3><p><b><font size=\"3\" color=\"#f9963b\">master1节点配置</font></b></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">cat</span> <span class=\"hljs-string\">&gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span>\n<span class=\"hljs-comment\">! Configuration File for keepalived</span>\n\n<span class=\"hljs-attr\">global_defs</span> <span class=\"hljs-string\">{</span>\n   <span class=\"hljs-attr\">router_id</span> <span class=\"hljs-string\">k8s</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_script</span> <span class=\"hljs-string\">check_haproxy {</span>\n    <span class=\"hljs-attr\">script</span> <span class=\"hljs-string\">\"killall -0 haproxy\"</span>\n    <span class=\"hljs-attr\">interval</span> <span class=\"hljs-string\">3</span>\n    <span class=\"hljs-attr\">weight</span> <span class=\"hljs-string\">-2</span>\n    <span class=\"hljs-attr\">fall</span> <span class=\"hljs-string\">10</span>\n    <span class=\"hljs-attr\">rise</span> <span class=\"hljs-string\">2</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_instance</span> <span class=\"hljs-string\">VI_1 {</span>\n    <span class=\"hljs-attr\">state</span> <span class=\"hljs-string\">MASTER </span>\n    <span class=\"hljs-attr\">interface</span> <span class=\"hljs-string\">ens33 </span>\n    <span class=\"hljs-attr\">virtual_router_id</span> <span class=\"hljs-string\">51</span>\n    <span class=\"hljs-attr\">priority</span> <span class=\"hljs-string\">250</span>\n    <span class=\"hljs-attr\">advert_int</span> <span class=\"hljs-string\">1</span>\n    <span class=\"hljs-attr\">authentication</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">auth_type</span> <span class=\"hljs-string\">PASS</span>\n        <span class=\"hljs-attr\">auth_pass</span> <span class=\"hljs-string\">ceb1b3ec013d66163d6ab</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">virtual_ipaddress</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">192.168.18.132</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">track_script</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">check_haproxy</span>\n    <span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">EOF</span></code></pre><p><br></p><p><font size=\"3\" color=\"#f9963b\"><b>master2节点配置</b></font><b><font size=\"3\"><br></font></b></p><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">cat</span> <span class=\"hljs-string\">&gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF </span>\n<span class=\"hljs-comment\">! Configuration File for keepalived</span>\n\n<span class=\"hljs-attr\">global_defs</span> <span class=\"hljs-string\">{</span>\n   <span class=\"hljs-attr\">router_id</span> <span class=\"hljs-string\">k8s</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_script</span> <span class=\"hljs-string\">check_haproxy {</span>\n    <span class=\"hljs-attr\">script</span> <span class=\"hljs-string\">\"killall -0 haproxy\"</span>\n    <span class=\"hljs-attr\">interval</span> <span class=\"hljs-string\">3</span>\n    <span class=\"hljs-attr\">weight</span> <span class=\"hljs-string\">-2</span>\n    <span class=\"hljs-attr\">fall</span> <span class=\"hljs-string\">10</span>\n    <span class=\"hljs-attr\">rise</span> <span class=\"hljs-string\">2</span>\n<span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">vrrp_instance</span> <span class=\"hljs-string\">VI_1 {</span>\n    <span class=\"hljs-attr\">state</span> <span class=\"hljs-string\">BACKUP </span>\n    <span class=\"hljs-attr\">interface</span> <span class=\"hljs-string\">ens33 </span>\n    <span class=\"hljs-attr\">virtual_router_id</span> <span class=\"hljs-string\">51</span>\n    <span class=\"hljs-attr\">priority</span> <span class=\"hljs-string\">200</span>\n    <span class=\"hljs-attr\">advert_int</span> <span class=\"hljs-string\">1</span>\n    <span class=\"hljs-attr\">authentication</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">auth_type</span> <span class=\"hljs-string\">PASS</span>\n        <span class=\"hljs-attr\">auth_pass</span> <span class=\"hljs-string\">ceb1b3ec013d66163d6ab</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">virtual_ipaddress</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">192.168.18.132</span>\n    <span class=\"hljs-attr\">}</span>\n    <span class=\"hljs-attr\">track_script</span> <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">check_haproxy</span>\n    <span class=\"hljs-attr\">}</span>\n\n<span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">EOF</span></code></pre><h3>9.3 启动和检查</h3><p><font size=\"3\" color=\"#c24f4a\">在两台master节点都执行</font><br></p><pre type=\"Bash\"><code><span class=\"hljs-meta\">#</span><span class=\"bash\"> 启动keepalived</span>\n<span class=\"bash\">systemctl start keepalived.service</span>\n# 设置开机启动\n<span class=\"bash\">systemctl <span class=\"hljs-built_in\">enable</span> keepalived.service</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看启动状态</span>\n<span class=\"bash\">systemctl status keepalived.service</span></code></pre><p><font size=\"3\">启动后查看master1的网卡信息</font><br></p><pre type=\"Bash\"><code>ip a s e<span class=\"hljs-symbol\">ns33</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FrkK-c5PNFR5pNfJt_yVJAVR5Hmf\" style=\"max-width:100%;\"><br></p><h2><br></h2><h2>10. 部署haproxy (二台master节点执行)</h2><h3>10.1 安装</h3><pre type=\"Bash\"><code>yum <span class=\"hljs-keyword\">install</span> -y haproxy</code></pre><p><br></p><h3>10.2 配置</h3><h2><p><font size=\"4\"><font color=\"#f9963b\">两台master节点的配置均相同</font>，配置中声明了后端代理的两个master节点服务器，指定了haproxy运行的端口为16443等，因此16443端口为集群的入口</font></p><p><font size=\"4\"><br></font></p><pre type=\"Bash\"><code><font size=\"3\">cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt; EOF\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># Global settings</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\nglobal\n    # <span class=\"hljs-keyword\">to</span> have these messages end up <span class=\"hljs-keyword\">in</span> /var/log/haproxy.log you will\n    # need <span class=\"hljs-keyword\">to</span>:\n    # 1) configure syslog <span class=\"hljs-keyword\">to</span> accept<span class=\"hljs-built_in\"> network </span>log events.  This is done\n    #    by adding the <span class=\"hljs-string\">\'-r\'</span> option <span class=\"hljs-keyword\">to</span> the SYSLOGD_OPTIONS <span class=\"hljs-keyword\">in</span>\n    #    /etc/sysconfig/syslog\n    # 2) configure local2 events <span class=\"hljs-keyword\">to</span> go <span class=\"hljs-keyword\">to</span> the /var/log/haproxy.log\n    #   file. A line like the following can be added <span class=\"hljs-keyword\">to</span>\n    #   /etc/sysconfig/syslog\n    #\n    #    local2.*                       /var/log/haproxy.log\n    #\n    log         127.0.0.1 local2\n    \n    chroot      /var/lib/haproxy\n    pidfile     /var/run/haproxy.pid\n    maxconn     4000\n   <span class=\"hljs-built_in\"> user </span>       haproxy\n   <span class=\"hljs-built_in\"> group </span>      haproxy\n    daemon \n       \n    # turn on stats unix socket\n    stats socket /var/lib/haproxy/stats\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># common defaults that all the \'listen\' and \'backend\' sections will</span>\n<span class=\"hljs-comment\"># use if not designated in their block</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------  </span>\ndefaults\n    mode                    http\n    log                     global\n    option                  httplog\n    option                  dontlognull\n    option http-server-close\n    option forwardfor       except 127.0.0.0/8\n    option                  redispatch\n    retries                 3\n    timeout http-request    10s\n    timeout<span class=\"hljs-built_in\"> queue </span>          1m\n    timeout connect         10s\n    timeout<span class=\"hljs-built_in\"> client </span>         1m\n    timeout<span class=\"hljs-built_in\"> server </span>         1m\n    timeout http-keep-alive 10s\n    timeout check           10s\n    maxconn                 3000\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># kubernetes apiserver frontend which proxys to the backends</span>\n<span class=\"hljs-comment\">#--------------------------------------------------------------------- </span>\nfrontend kubernetes-apiserver\n    mode                 tcp\n    bind                 *:16443\n    option               tcplog\n    default_backend      kubernetes-apiserver    \n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># round robin balancing between the various backends</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\nbackend kubernetes-apiserver\n    mode        tcp\n    balance     roundrobin\n   <span class=\"hljs-built_in\"> server </span>     master01.k8s.io   192.168.18.128:6443 check\n   <span class=\"hljs-built_in\"> server </span>     master02.k8s.io   192.168.18.129:6443 check\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\n<span class=\"hljs-comment\"># collection haproxy statistics message</span>\n<span class=\"hljs-comment\">#---------------------------------------------------------------------</span>\nlisten stats\n    bind                 *:1080\n    stats auth           admin:awesomePassword\n    stats refresh        5s\n    stats realm          HAProxy\\ Statistics\n    stats uri            /admin?stats\nEOF</font></code></pre></h2><h3>10.3 启动和检查</h3><p><font size=\"3\">两台master都启动(<font color=\"#c24f4a\">使用键盘工具可以同时一起执行</font>)</font></p><p><font size=\"4\" color=\"#f9963b\">192.168.18.128 先启动</font></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 开启haproxy</span>\nsystemctl <span class=\"hljs-literal\">start</span> haproxy</code></pre><p><br></p><p><font size=\"4\" color=\"#f9963b\">192.168.18.129 在启动</font></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 开启haproxy</span>\nsystemctl <span class=\"hljs-literal\">start</span> haproxy</code></pre><p><br></p><p><font color=\"#f9963b\" size=\"4\">二台服务器启动后在继续后面的二条命令</font></p><pre type=\"Bash\"><code># 设置开机启动\nsystemctl enable haproxy\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看启动状态</span>\n<span class=\"bash\">systemctl status haproxy</span></code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FqCY83Uuqu7PAPr250p0iXkw4t3W\" style=\"max-width:100%;\" width=\"894\" height=\"295.37\"><br></p><p><br></p><h2 id=\"l663a\"><font color=\"#f9963b\">10.4如果启动出现如下情况卸载haproxy进行重新安装在重新启动</font></h2><p><img src=\"http://qiniu-picture.xiyanit.cn/Fqg-cVYpc9t-eWeHz1eVFiFbY3zW\" style=\"max-width:100%;\" width=\"935.16\" height=\"295.6\"><br></p><h2>11. <font color=\"#f9963b\">所有节点</font>安装Docker/kubeadm/kubelet</h2><p><font size=\"3\">Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</font></p><h3>11.1 安装Docker</h3><pre type=\"Bash\"><code>wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O/etc/yum.repos.d/docker-ce.repo<br></code><code><br></code><code>yum -y install docker-ce-19.03.9-3.el7<br></code><code>\nsystemctl enable docker &amp;&amp; systemctl start docker</code><code>\ndocker --<span class=\"hljs-keyword\">version</span><br></code></pre><p><br></p><h3>11.2 添加阿里云YUM软件源</h3><pre type=\"Bash\"><code>cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"hljs-keyword\">EOF</span>\n{\n  <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://goieqwi4.mirror.aliyuncs.com\"</span>]\n}\n<span class=\"hljs-keyword\">EOF</span></code></pre><p><br></p><pre type=\"Bash\"><code>cat &gt; <span class=\"hljs-regexp\">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=<span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/repos</span><span class=\"hljs-regexp\">/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/yum-key.gpg https:/</span><span class=\"hljs-regexp\">/mirrors.aliyun.com/kubernetes</span><span class=\"hljs-regexp\">/yum/doc</span><span class=\"hljs-regexp\">/rpm-package-key.gpg\nEOF</span></code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\">#重启docker</span>\n<span class=\"hljs-attribute\">systemctl</span> restart docker</code></pre><p><br></p><blockquote><h2 id=\"xg0wm\">11.3 安装kubeadm，kubelet和kubectl（所有节点都安装）</h2><p><br></p><p><font size=\"3\">kubelet # 运行在 Cluster 所有节点上，负责启动 Pod 和容器<br><br>kubeadm # 用于初始化 Cluster<br><br>kubectl # 是 Kubernetes 命令行工具。通过 kubectl 可以部署和管理应用，查看各种资源，创建、删除和更新各种组件<br></font></p><font size=\"3\"><br>由于版本更新频繁，这里指定版本号部署：</font></blockquote><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-comment\"># 这里安装最新的v1.20.1</span>\nyum install -y kubelet-1.20.1 kubeadm-1.20.1 kubectl-1.20.1\n<span class=\"hljs-comment\"># 此时，还不能启动kubelet，因为此时配置还不能，现在仅仅可以设置开机自启动</span>\n<span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable kubelet</span></code></pre><p><br></p><p><br></p><h2>12. 部署Kubernetes Master</h2><h3>12.1 创建kubeadm配置文件</h3><p><font size=\"4\" style=\"color: rgb(249, 150, 59);\">在具有vip的master上操作，</font><font size=\"5\" style=\"\" color=\"#7b5ba1\">这里为master1</font></p><pre type=\"Bash\"><code>mkdir <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/kubernetes/m</span>anifests -p</code></pre><p><br></p><pre type=\"Bash\"><code>cd <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/kubernetes/m</span>anifests<span class=\"hljs-regexp\">/</span></code></pre><p><br></p><pre type=\"Bash\"><code>vi kubeadm-<span class=\"hljs-built_in\">config</span>.yaml</code></pre><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-attr\">apiServer:</span>\n  <span class=\"hljs-attr\">certSANs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master1</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master2</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master.k8s.io</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.18.132</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.</span>18.128\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.18.129</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n  <span class=\"hljs-attr\">extraArgs:</span>\n    <span class=\"hljs-attr\">authorization-mode:</span> <span class=\"hljs-string\">Node,RBAC</span>\n  <span class=\"hljs-attr\">timeoutForControlPlane:</span> <span class=\"hljs-string\">4m0s</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubeadm.k8s.io/v1beta1</span>\n<span class=\"hljs-attr\">certificatesDir:</span> <span class=\"hljs-string\">/etc/kubernetes/pki</span>\n<span class=\"hljs-attr\">clusterName:</span> <span class=\"hljs-string\">kubernetes</span>\n<span class=\"hljs-attr\">controlPlaneEndpoint:</span> <span class=\"hljs-string\">\"master.k8s.io:16443\"</span>\n<span class=\"hljs-attr\">controllerManager:</span> <span class=\"hljs-string\">{}</span>\n<span class=\"hljs-attr\">dns:</span> \n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">CoreDNS</span>\n<span class=\"hljs-attr\">etcd:</span>\n  <span class=\"hljs-attr\">local:</span>    \n    <span class=\"hljs-attr\">dataDir:</span> <span class=\"hljs-string\">/var/lib/etcd</span>\n<span class=\"hljs-attr\">imageRepository:</span> <span class=\"hljs-string\">registry.aliyuncs.com/google_containers</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterConfiguration</span>\n<span class=\"hljs-attr\">kubernetesVersion:</span> <span class=\"hljs-string\">v1.20.1</span>\n<span class=\"hljs-attr\">networking:</span> \n  <span class=\"hljs-attr\">dnsDomain:</span> <span class=\"hljs-string\">cluster.local</span>  \n  <span class=\"hljs-attr\">podSubnet:</span> <span class=\"hljs-number\">10.244</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/16</span>\n  <span class=\"hljs-attr\">serviceSubnet:</span> <span class=\"hljs-number\">10.1</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/16</span>\n<span class=\"hljs-attr\">scheduler:</span> <span class=\"hljs-string\">{}</span></code></pre><p><br></p><p><br></p><h3>12.2 在<font color=\"#c24f4a\">master1</font>节点执行</h3><pre type=\"Bash\"><code>kubeadm init --<span class=\"hljs-built_in\">config</span> kubeadm-<span class=\"hljs-built_in\">config</span>.yaml</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/FhJckGZ8UJtm-ERISgxed-aU8rZ4\" width=\"1250\" height=\"682.29\"><font size=\"3\"><br></font></p><p><font size=\"3\"><br></font></p><p>出现启动不起来的话执行如下命令再次init初始化</p><pre><code>#重启kubeadm<br></code><code>kubeadm reset</code></pre><p><font size=\"3\"><br></font></p><p><font size=\"3\">按照提示配置环境变量，使用kubectl工具</font><br></p><pre type=\"Bash\"><code>mkdir -p $HOME/.kube</code><code><br></code><code>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</code><code>\nsudo chown $(id -u):$(id -g) $HOME/.kube/config<br></code><code><span class=\"hljs-built_in\">\n</span>kubectl <span class=\"hljs-builtin-name\">get</span> nodes</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> pods -n kube-system</code><code><br></code></pre><p><strong><font size=\"3\">按照提示保存以下内容，一会要使用：</font></strong><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubeadm</span> <span class=\"hljs-selector-tag\">join</span> <span class=\"hljs-selector-tag\">master</span><span class=\"hljs-selector-class\">.k8s</span><span class=\"hljs-selector-class\">.io</span><span class=\"hljs-selector-pseudo\">:16443</span> <span class=\"hljs-selector-tag\">--token</span> dxfk7f.nljvs04qf8mm3fgo \\\n    --discovery-token-ca-cert-hash sha256:73d0ac5b260d52d2e29eb0dc77b2c7ac6215ba10506c5dc1372158b5531e6e84 \\\n    <span class=\"hljs-selector-tag\">--control-plane</span> </code></pre><p><br></p><p><font size=\"3\">查看集群状态</font><br></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-builtin-name\">get</span> cs\n\nkubectl <span class=\"hljs-builtin-name\">get</span> pods -n kube-system</code></pre><p><br></p><h2>13.安装集群网络</h2><p><font size=\"3\">从官方地址获取到flannel的yaml，在master1上执行&nbsp;</font></p><pre type=\"Bash\"><code>wget -c https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/coreos/</span>flannel<span class=\"hljs-regexp\">/master/</span>Documentation<span class=\"hljs-regexp\">/kube-flannel.yml</span></code></pre><p><br></p><p><font size=\"4\" color=\"#c24f4a\">报错文件解决</font></p><p><img src=\"https://img-blog.csdnimg.cn/20200427195817259.jpg\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"3\">进入网站：<font color=\"#f9963b\">https://site.ip138.com/raw.Githubusercontent.com/</font></font><br><br><font size=\"3\">输入<font color=\"#f9963b\">raw.githubusercontent.com</font><br>查询其相关的IP地址:</font><br><img src=\"http://qiniu-picture.xiyanit.cn/FnuJHK-i6l2zEyu8X42_Tq4rXQEW\" style=\"max-width:100%;\" width=\"696\" height=\"414.53\"><br><font size=\"4\">在Ubuntu终端输入：<br>sudo vi /etc/hosts</font><br><br><font size=\"4\">选择上面一个添加内容即可：<br>比如：<br><a href=\"https://site.ip138.com/185.199.111.133/\" target=\"_blank\">185.199.111.133</a>&nbsp;raw.githubusercontent.com<br>或者<br><a href=\"https://site.ip138.com/185.199.111.133/\" target=\"_blank\">185.199.109.133</a>&nbsp;raw.githubusercontent.com</font><br><br><font size=\"4\">然后保存，退出<br><br>然后再次执行</font></p><p><img src=\"http://qiniu-picture.xiyanit.cn/FjKjsotGGsOsc0UfWepZjhEqid_e\" style=\"max-width:100%;\"><br></p><p><font size=\"3\"><br></font></p><p><font size=\"3\">修改镜像，不要会出现失败的现象</font></p><pre type=\"Bash\"><code>quay.io/coreos/flannel:v0<span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.0</span>-amd64</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fo6ZVfS41PIWAhLc_WtlCLwa7C1T\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><p><br></p><p><font size=\"3\">安装flannel网络，<font color=\"#f9963b\">执行需要时间请耐心等待</font></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">apply</span> -f kube-flannel.yml </code></pre><p><font size=\"3\"><br></font></p><p><font size=\"3\">检查<br></font></p><pre type=\"Bash\"><code>kubectl <span class=\"hljs-built_in\">get</span> pods -n kube-<span class=\"hljs-keyword\">system</span></code><code><span class=\"hljs-keyword\"><br></span></code><code><span class=\"hljs-keyword\">kubectl get nodes<br></span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fru9g_G86saznCgz6XIU2kwoEMVj\" style=\"max-width:100%;\"><font size=\"3\"><br></font></p><h2><br>14、master2节点加入集群</h2><h3>14.1 复制密钥及相关文件</h3><p><font size=\"3\">从master1复制密钥及相关文件到master2</font><br></p><pre type=\"Bash\"><code>ssh root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span> mkdir -p /etc/kubernetes/pki/etcd\n\nscp /etc/kubernetes/admin.conf root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span><span class=\"hljs-symbol\">:/etc/kubernetes</span>\n   \nscp /etc/kubernetes/pki/{ca.*,sa.*,front-proxy-ca.*} root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span><span class=\"hljs-symbol\">:/etc/kubernetes/pki</span>\n   \nscp /etc/kubernetes/pki/etcd/ca.* root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.18</span>.<span class=\"hljs-number\">129</span><span class=\"hljs-symbol\">:/etc/kubernetes/pki/etcd</span></code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fsk-Sd6iD--OB1XHl31_ygG3Uik9\" style=\"max-width:100%;\" width=\"939\" height=\"536.68\"><font size=\"3\"><br></font></p><p><font size=\"3\"><br></font></p><h3>14.2 master2加入集群</h3><p><font size=\"4\">执行在master1上init后输出的join命令,需要带上参数<code style=\"\"><font color=\"#f9963b\">--control-plane</font></code>表示把master控制节点加入集群</font></p><pre type=\"Bash\"><code>kubeadm join master.k8s.io:16443 --token 88j8wr.yh2xbehma91953w1 --discovery-token-ca-cert-hash sha256:7fe1dc775ab7e54c54189615a5762fbce5135e132e5c0b83da2ffb2d54013efc --control-plane\n</code></pre><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fh6u3HrfzP7_bDb63Z_AKjRq8TbK\" style=\"max-width:100%;\" width=\"848\" height=\"484.87\"><br></p><p><br></p><pre type=\"Bash\"><code>mkdir -p <span class=\"hljs-variable\">$HOME</span>/.kube</code><code>\nsudo cp -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube<span class=\"hljs-built_in\">/config</span></code><code><span class=\"hljs-built_in\">\n</span>sudo chown $(id -u):$(id -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config</code></pre><p><br></p><p><br></p><p>检查状态<br></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">node</span>\n\n<span class=\"hljs-title\">kubectl</span> get pods --all-namespaces</code></pre><p><img src=\"http://qiniu-picture.xiyanit.cn/Fvd-q8k_eWDG1h7FsC3ifrOJQr0Z\" style=\"max-width:100%;\"><br></p><h2>15. 加入Kubernetes Node</h2><p><font size=\"4\">在node1，node2上执行</font></p><p><font size=\"4\">向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：唯一不同的地方是少了--control-plane这个命令</font></p><p><font size=\"4\">这个命令可以创建新的令牌&nbsp;</font><span style=\"font-size: 1em;\"></span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">kubeadm </span><span class=\"hljs-built_in\" style=\"font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">token</span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\"> </span><span class=\"hljs-keyword\" style=\"font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">create</span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\"> --</span><span class=\"hljs-keyword\" style=\"font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">print</span><span style=\"background-color: rgb(241, 241, 241); font-family: Consolas, Menlo, Courier, monospace; font-size: 1em;\">-join-command</span></p><p><br></p><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubeadm</span> <span class=\"hljs-selector-tag\">join</span> <span class=\"hljs-selector-tag\">master</span><span class=\"hljs-selector-class\">.k8s</span><span class=\"hljs-selector-class\">.io</span><span class=\"hljs-selector-pseudo\">:16443</span> <span class=\"hljs-selector-tag\">--token</span> <span class=\"hljs-selector-tag\">dxfk7f</span><span class=\"hljs-selector-class\">.nljvs04qf8mm3fgo</span> \\\n    <span class=\"hljs-selector-tag\">--discovery-token-ca-cert-hash</span> <span class=\"hljs-selector-tag\">sha256</span><span class=\"hljs-selector-pseudo\">:73d0ac5b260d52d2e29eb0dc77b2c7ac6215ba10506c5dc1372158b5531e6e84</span></code></pre><h3><strong id=\"x11vm\">集群网络重新安装，因为添加了新的node节点，<font color=\"#f9963b\">如果出现下载失败可以持续执行以下操作，直到下载成功</font>（<font color=\"#f9963b\">master1执行</font>）</strong></h3><div><pre type=\"Bash\"><code><span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">delete</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">kube-flannel</span><span class=\"hljs-selector-class\">.yml</span>\n\n<span class=\"hljs-selector-tag\">kubectl</span> <span class=\"hljs-selector-tag\">apply</span> <span class=\"hljs-selector-tag\">-f</span> <span class=\"hljs-selector-tag\">kube-flannel</span><span class=\"hljs-selector-class\">.yml</span></code></pre></div><p><br></p><p><img src=\"http://qiniu-picture.xiyanit.cn/Fpy4C2p4UQqPgW7Ut1eS-rcVE-aL\" style=\"max-width:100%;\"><br></p><p><br></p><p><font size=\"3\">检查状态</font></p><pre type=\"Bash\"><code>kubectl get <span class=\"hljs-keyword\">node</span>\n\n<span class=\"hljs-title\">kubectl</span> get pods --all-namespaces</code></pre><h2><br></h2><p><img src=\"http://qiniu-picture.xiyanit.cn/Fgq3oIOuZCN58iEuhoTj8Om6c0E9\" style=\"max-width:100%;\"><br></p><h2>16. 测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><pre type=\"Bash\"><code>kubectl create deployment nginx <span class=\"hljs-attribute\">--image</span>=nginx</code><code>\nkubectl expose deployment nginx <span class=\"hljs-attribute\">--port</span>=80 <span class=\"hljs-attribute\">--type</span>=NodePort</code><code>\nkubectl <span class=\"hljs-builtin-name\">get</span> pod,svc</code></pre><p><font size=\"4\"><br></font></p><p><font size=\"4\">访问地址：<a href=\"http://NodeIP:Port\">http://NodeIP:Port</a></font></p>','1','8','1','1','1','2021-03-12 15:09:23','2021-03-15 10:57:29'),(62,'http://qiniu-picture.xiyanit.cn/FkYLRDcRn5ePIaFipppq5q2eh8YK','Kubernetes如何通过服务名发现服务','Kubernetes,','Kubernetes如何通过服务名发现服务,kube-proxy 和 kube-dns 原理解密,kube-proxy,kube-dns',5,0,0,'1',1,' <p><h1 id=\"puywo\">前言</h1><font size=\"3\">在这里，你将了解 Kubernetes 集群如何实现通过服务名，进行服务发现，负载均衡，调用后端服务。<br>这里，我们以服务名为ticknet为例，假设我们要访问内部服务ticknet的某个http接口，则，我们的请求链接格式可以是：http://ticknet/get/user/10000</font><br><br><h1 id=\"3pl19\">目录</h1><font size=\"3\">kube-dns服务发现原理<br>kube-proxy实现负载均衡<br></font></p><p><h1 id=\"1nuke\">1. kube-dns服务发现原理</h1><font size=\"3\">DNS：我们非常熟悉且最简单的一种方式，跟域名和IP映射的原理类似，我们可以将服务域名名称和一到多个机器IP进行关联或者是一个负载均衡器（指向服负载均衡好处是可以避免失效DNS条目问题）。DNS的服务发现方式最大的优点就是它是一种大家熟知的标准形式，技术支持性好。缺点就是当服务节点的启动和销毁变得更加动态时DNS更新条目很难做到高可用和实时性。<br><br>K8S选择的是DNS作服务发现，除此之外，感兴趣还可以了解Zookeeper、Consoul、Doozerd、Eureka、Etcd<br>注意：Etcd在k8s集群中的作用是用于保存集群所有的网络配置和对象的状态信息。如果etcd需要实现负载均衡，需要与第三方工具结合，常与Registrator(通过检查容器在线或停止来完成相关服务数据的注册和更新)和Confd(为轻量级的配置管理工具通过储存在Etcd中的数据来保持配置文件的最新状态)结合。</font><br><br><h1 id=\"fu5o2\">a. kube-dns原理</h1><font size=\"3\">kube-dns组成<br></font><img src=\"https://img-blog.csdnimg.cn/2019080217032789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RlYWlkYWk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"3\">etcd存储SkyDNS需要的各种数据；kube2sky是数据写入方；skydns是数据读入方；execheathz是辅助容器，有健康检查作用。<br>域名格式<br>kube-dns支持的域名格式，具体为：<font color=\"#f9963b\">&lt;service_name&gt;.&lt;namespace&gt;.svc.&lt;cluster_domain&gt;。</font></font></p><p>b. K8S自动为容器配置域名解析<br>进入K8S集群某个Pod容器，我们通过命令行cat /etc/resolv.conf，得到：<br><br><code>nameserver 172.22.0.10</code></p><p><code>search default.svc.cluster.local svc.cluster.local cluster.localoptions ndots:5</code><br><br><font size=\"3\">感兴趣的可以在网上查找一些resolv.conf的资料来了解具体的含义。之所以能够通过Service名称和Namespace就能访问Service，就是因为search配置的规则。<br>举个栗子：我们有服务名ticknet，则其服务名(Service)对应的完整域名就是ticknet.default.svc.cluster.local。看到这里，相信很多人会有疑问，既然完整域名是这样的，那为什么在Pod中只通过Service名称和Namespace就能访问Service呢？下面kube-proxy会告诉你。</font><br><br><h1 id=\"ii56y\">c. 通过域名配置解析到该服务的IP地址</h1><font size=\"3\">在解析域名(此时域名我叫“短域名”)时会自动拼接成完整域名去查询DNS。查询到DNS后，我们查找到该DNS的A记录IP地址，然后转发请求该IP地址。<br>该IP地址是我们服务名的IP地址，也可以说是该服务的集群IP地址，也可以说是该服务的网关IP。<br>但是我们是如何从服务IP请求转发到其“内部”的Pod呢？这就是接下来要讲的负载均衡了。</font><br><br><h1 id=\"hfdxo\">2. kube-proxy实现负载均衡</h1><font size=\"3\">service是一组pod的服务抽象，相当于一组pod的LB，负责将请求分发给对应的pod。service会为这个LB提供一个IP，一般称为cluster IP。<br><br>kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。<br><br>举个栗子：我们有服务名ticknet，其下，我们运行了两个实例（pod）。那么kube-proxy的作用，就是可以将对服务 ticknet的请求转发到其下任一个实例容器上。<br>当然，我们可以通过kubectl logs &lt;Pod Name&gt;来查看这两个Pod的访问日志来确认是否真的负载均衡了。</font><br><br><h1 id=\"m2uhq\">a.kube-proxy负载均衡的方式</h1><font size=\"3\">Iptables模式(目前的默认模式)，它支持相当复杂的基于规则的IP管理。在内核中通过iptables的NAT实现本地转发和负载均衡。默认负载均衡方案是随机转发。在大规模试用下存在性能问题。。<br></font></p><p><font size=\"5\" color=\"#c24f4a\">在</font><font size=\"5\" color=\"#c24f4a\"> pod 中可以通过&nbsp;<code>service_name.namespace.svc.domain</code>&nbsp;来访问任何的服务，也可以使用缩写&nbsp;<code>service_name.namespace</code>，如果 pod 和 service 在同一个 namespace，甚至可以直接使用&nbsp;<code>service_name</code>。</font><font size=\"3\"><br></font></p>',' <p><h1 id=\"puywo\">前言</h1><font size=\"3\">在这里，你将了解 Kubernetes 集群如何实现通过服务名，进行服务发现，负载均衡，调用后端服务。<br>这里，我们以服务名为ticknet为例，假设我们要访问内部服务ticknet的某个http接口，则，我们的请求链接格式可以是：http://ticknet/get/user/10000</font><br><br><h1 id=\"3pl19\">目录</h1><font size=\"3\">kube-dns服务发现原理<br>kube-proxy实现负载均衡<br></font></p><p><h1 id=\"1nuke\">1. kube-dns服务发现原理</h1><font size=\"3\">DNS：我们非常熟悉且最简单的一种方式，跟域名和IP映射的原理类似，我们可以将服务域名名称和一到多个机器IP进行关联或者是一个负载均衡器（指向服负载均衡好处是可以避免失效DNS条目问题）。DNS的服务发现方式最大的优点就是它是一种大家熟知的标准形式，技术支持性好。缺点就是当服务节点的启动和销毁变得更加动态时DNS更新条目很难做到高可用和实时性。<br><br>K8S选择的是DNS作服务发现，除此之外，感兴趣还可以了解Zookeeper、Consoul、Doozerd、Eureka、Etcd<br>注意：Etcd在k8s集群中的作用是用于保存集群所有的网络配置和对象的状态信息。如果etcd需要实现负载均衡，需要与第三方工具结合，常与Registrator(通过检查容器在线或停止来完成相关服务数据的注册和更新)和Confd(为轻量级的配置管理工具通过储存在Etcd中的数据来保持配置文件的最新状态)结合。</font><br><br><h1 id=\"fu5o2\">a. kube-dns原理</h1><font size=\"3\">kube-dns组成<br></font><img src=\"https://img-blog.csdnimg.cn/2019080217032789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RlYWlkYWk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br></p><p><font size=\"3\">etcd存储SkyDNS需要的各种数据；kube2sky是数据写入方；skydns是数据读入方；execheathz是辅助容器，有健康检查作用。<br>域名格式<br>kube-dns支持的域名格式，具体为：<font color=\"#f9963b\">&lt;service_name&gt;.&lt;namespace&gt;.svc.&lt;cluster_domain&gt;。</font></font></p><p>b. K8S自动为容器配置域名解析<br>进入K8S集群某个Pod容器，我们通过命令行cat /etc/resolv.conf，得到：<br><br><code>nameserver 172.22.0.10</code></p><p><code>search default.svc.cluster.local svc.cluster.local cluster.localoptions ndots:5</code><br><br><font size=\"3\">感兴趣的可以在网上查找一些resolv.conf的资料来了解具体的含义。之所以能够通过Service名称和Namespace就能访问Service，就是因为search配置的规则。<br>举个栗子：我们有服务名ticknet，则其服务名(Service)对应的完整域名就是ticknet.default.svc.cluster.local。看到这里，相信很多人会有疑问，既然完整域名是这样的，那为什么在Pod中只通过Service名称和Namespace就能访问Service呢？下面kube-proxy会告诉你。</font><br><br><h1 id=\"ii56y\">c. 通过域名配置解析到该服务的IP地址</h1><font size=\"3\">在解析域名(此时域名我叫“短域名”)时会自动拼接成完整域名去查询DNS。查询到DNS后，我们查找到该DNS的A记录IP地址，然后转发请求该IP地址。<br>该IP地址是我们服务名的IP地址，也可以说是该服务的集群IP地址，也可以说是该服务的网关IP。<br>但是我们是如何从服务IP请求转发到其“内部”的Pod呢？这就是接下来要讲的负载均衡了。</font><br><br><h1 id=\"hfdxo\">2. kube-proxy实现负载均衡</h1><font size=\"3\">service是一组pod的服务抽象，相当于一组pod的LB，负责将请求分发给对应的pod。service会为这个LB提供一个IP，一般称为cluster IP。<br><br>kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问。<br><br>举个栗子：我们有服务名ticknet，其下，我们运行了两个实例（pod）。那么kube-proxy的作用，就是可以将对服务 ticknet的请求转发到其下任一个实例容器上。<br>当然，我们可以通过kubectl logs &lt;Pod Name&gt;来查看这两个Pod的访问日志来确认是否真的负载均衡了。</font><br><br><h1 id=\"m2uhq\">a.kube-proxy负载均衡的方式</h1><font size=\"3\">Iptables模式(目前的默认模式)，它支持相当复杂的基于规则的IP管理。在内核中通过iptables的NAT实现本地转发和负载均衡。默认负载均衡方案是随机转发。在大规模试用下存在性能问题。。<br></font></p><p><font size=\"5\" color=\"#c24f4a\">在</font><font size=\"5\" color=\"#c24f4a\"> pod 中可以通过&nbsp;<code>service_name.namespace.svc.domain</code>&nbsp;来访问任何的服务，也可以使用缩写&nbsp;<code>service_name.namespace</code>，如果 pod 和 service 在同一个 namespace，甚至可以直接使用&nbsp;<code>service_name</code>。</font><font size=\"3\"><br></font></p>','1','8','1','1','0','2021-03-16 09:32:05','2021-03-16 09:32:05');

/*Table structure for table `t_attention` */

DROP TABLE IF EXISTS `t_attention`;

CREATE TABLE `t_attention` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL COMMENT '用户id',
  `attention_user_id` int NOT NULL COMMENT '被关注的用户id',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='关注表';

/*Data for the table `t_attention` */

insert  into `t_attention`(`id`,`user_id`,`attention_user_id`,`create_time`) values (1,21,1,'2021-01-30 11:47:28'),(2,21,1,'2021-01-30 11:47:30'),(3,21,1,'2021-01-30 11:47:31'),(4,21,1,'2021-01-30 11:47:31'),(5,21,1,'2021-01-30 11:47:32'),(6,21,1,'2021-01-30 11:47:34'),(7,21,1,'2021-01-30 11:48:35'),(8,21,1,'2021-01-30 11:50:00');

/*Table structure for table `t_code` */

DROP TABLE IF EXISTS `t_code`;

CREATE TABLE `t_code` (
  `id` int NOT NULL AUTO_INCREMENT,
  `pic` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '封面',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章简介',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '名称',
  `tag` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标签',
  `download_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '下载地址',
  `read_count` int NOT NULL DEFAULT '0' COMMENT '阅读量',
  `star_count` int NOT NULL DEFAULT '0' COMMENT '点赞数',
  `con_count` int NOT NULL DEFAULT '0' COMMENT '评论数',
  `download_count` int NOT NULL DEFAULT '0' COMMENT '下载数',
  `type` char(2) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '系统类型 0.JAVA 1.Python 2.GO 3.PHP 4.VUE 5.JavaScript 6.C 7.C++ 8.其它',
  `download_point` int NOT NULL DEFAULT '0' COMMENT '下载需要金币数',
  `state` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '审核是否通过：0待审核 1通过 2 不通过',
  `user_id` int NOT NULL COMMENT '发布人',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容  转换html的内容',
  `markdown_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'markdown 未转换html的内容',
  `markdown_type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '0. mavon-editor 1.editor-wang',
  `top` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1' COMMENT '置顶：0不是 1是',
  `boutique` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1' COMMENT '精品：0不是 1是',
  `recommend` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '1' COMMENT '推荐：0不是 1是',
  `official` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '官方出品：0不是 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=254 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='源码表';

/*Data for the table `t_code` */

insert  into `t_code`(`id`,`pic`,`remark`,`title`,`tag`,`download_url`,`read_count`,`star_count`,`con_count`,`download_count`,`type`,`download_point`,`state`,`user_id`,`content`,`markdown_content`,`markdown_type`,`top`,`boutique`,`recommend`,`official`,`create_time`,`update_time`) values (232,'http://qiniu-picture.xiyanit.cn/QQ截图20200630130053.png','springboot前后端分离工资管理系统（带文档）','springboot前后端分离工资管理系统（带文档）','Java,','http://qiniu-file.xiyanit.cn/Group12-master.zip',150,0,0,1,'0',500,'1',1,'<p><strong>项目描述</strong></p><p>springboot前后端分离工资管理系统</p><p><strong>运行环境</strong></p><p>jdk8+tomcat8+mysql+IntelliJ IDEA或者Eclipse+maven</p><p><br></p><p><strong>项目技术(必填)</strong></p><p>springboot+vue</p><p><br></p><p><strong>数据库文件(可选)</strong></p><p>项目目录下</p><p><br></p><p><strong>依赖包文件(可选)</strong></p><p>压缩包超20M请把依赖包文件拆出上传到百度网盘,提供百度网盘分享地址(比如java的jar包)</p><p><br></p><p><strong>运行视频(可选)</strong></p><p>mp4视频文件请上传到百度网盘,提供百度网盘分享地址,加快官方审核速度</p><p><br></p><p><strong>项目截图(必填)</strong></p><p><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130000.png\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630123832.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130006.png\" style=\"max-width: 100%;\"></p><p><strong>运行截图(必填)</strong></p><p><span style=\"font-size: large;\">财务管理员: pyzy&nbsp; &nbsp;密码：123456kk</span></p><p><span style=\"font-size: large;\">院系管理员:&nbsp; 李华&nbsp; &nbsp; 密码：zhangjuan</span></p><p><span style=\"font-size: large;\">用户:&nbsp; 张三&nbsp; &nbsp; &nbsp;密码：newpass</span></p><p><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630125906.png\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130053.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130104.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130113.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130128.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130136.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130649.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200630130728.png\" style=\"max-width: 100%;\"></p><p><strong>注意事项(可选)</strong></p><p><strong><br></strong></p><p><span style=\"font-size: x-large;\">npm install&nbsp;\r\n\r\n</span></p><p><span style=\"font-size: x-large;\"><br></span></p><p><span style=\"font-size: x-large;\">npm install --save moment</span></p><p><span style=\"font-size: x-large;\"><br></span></p><p><span style=\"font-size: x-large;\">npm run&nbsp;</span></p>','','1','1','1','1','1','2020-06-30 13:16:46','2020-12-18 23:25:05'),(243,'http://qiniu-picture.xiyanit.cn/QQ截图20200704132035.png','springboot书城商城+后台','springboot书城商城+后台','Java,','http://qiniu-file.xiyanit.cn/bookstore-master.zip',262,0,0,2,'0',400,'1',1,'<p><strong>项目描述</strong></p><p>springboot书城商城+后台</p><p><strong>运行环境</strong></p><p>jdk8+tomcat8+mysql+IntelliJ IDEA或者Eclipse+maven</p><p><br></p><p><strong>项目技术(必填)</strong></p><p>springbootmybatis+bootstrap+jquery</p><p><br></p><p><strong>数据库文件(可选)</strong></p><p>项目目录下</p><p><br></p><p><strong>依赖包文件(可选)</strong></p><p>压缩包超20M请把依赖包文件拆出上传到百度网盘,提供百度网盘分享地址(比如java的jar包)</p><p><br></p><p><strong>运行视频(可选)</strong></p><p>mp4视频文件请上传到百度网盘,提供百度网盘分享地址,加快官方审核速度</p><p><br></p><p><strong>项目截图(必填)</strong></p><p><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132751.png\" style=\"max-width:100%;\"></p><p><strong>运行截图(必填)</strong></p><p>首页：<a href=\"http://localhost/\">http://localhost</a>:8080</p><p>后台：<a href=\"http://localhost/admin\">http://localhost/admin</a>&nbsp; &nbsp; &nbsp;密码都是123</p><p><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132035.png\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132044.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132058.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132112.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132123.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132129.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132136.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132237.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132250.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132313.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132541.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132547.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132553.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132617.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132622.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132629.png\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/QQ截图20200704132635.png\" style=\"max-width: 100%;\"></p><p><strong>注意事项(可选)</strong></p><p><br></p>','','1','1','1','1','1','2020-07-04 13:31:24','2020-12-20 03:03:32'),(248,'http://qiniu-picture.xiyanit.cn/d78437f0390d4400b4ebb51242d7e5f9.jpg','springboot客户管理系统','springboot客户管理系统','Java,','http://qiniu-file.xiyanit.cn/2020_06_28_springboot-kehu.zip',194,0,0,2,'0',200,'1',1,'<p><b>项目描述</b></p><p>很简单实用的一个springboot客户管理系统</p><p><b>运行环境</b></p><p>tomcat7.0+jdk1.7<font face=\"宋体\">或以上</font></p><p>eclipse<font face=\"宋体\">或</font><font face=\"Calibri\">idea</font></p><p><b>项目技术</b></p><p>springboot + mysql<br></p><p><b>运行截图</b></p><p><img src=\"http://qiniu-picture.xiyanit.cn/6e65b3ec35df49e6a4ff41582acb470d.jpg\" style=\"max-width:100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/c0ded8d22a204de8a3c497a28ad83a92.jpg\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/ce9e873c9e1b407c98477a7dba00b000.jpg\" style=\"max-width: 100%;\"><img src=\"http://qiniu-picture.xiyanit.cn/d78437f0390d4400b4ebb51242d7e5f9.jpg\" style=\"max-width: 100%;\"></p><p><br></p>','','1','1','1','1','1','2020-09-06 13:04:49','2020-12-23 17:41:06');

/*Table structure for table `t_comment` */

DROP TABLE IF EXISTS `t_comment`;

CREATE TABLE `t_comment` (
  `id` int NOT NULL AUTO_INCREMENT,
  `info_id` int DEFAULT NULL COMMENT '文章或者源码或者说说id',
  `comment_user_id` int NOT NULL COMMENT '评论id',
  `target_user_id` int NOT NULL COMMENT '被评论用户id',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `create_time` datetime NOT NULL COMMENT '评论时间',
  `type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '1.blog 2.code 3.shuoshuo',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='评论表';

/*Data for the table `t_comment` */

insert  into `t_comment`(`id`,`info_id`,`comment_user_id`,`target_user_id`,`content`,`create_time`,`type`) values (1,42,21,1,'[微笑]','2021-01-30 11:48:41','1'),(3,41,27,1,'[嘻嘻]','2021-02-02 21:07:19','1'),(4,61,49,1,'[嘻嘻]','2021-03-18 17:20:00','1');

/*Table structure for table `t_download` */

DROP TABLE IF EXISTS `t_download`;

CREATE TABLE `t_download` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL COMMENT '用户id',
  `code_id` int NOT NULL COMMENT '源码id',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='下载记录表';

/*Data for the table `t_download` */

insert  into `t_download`(`id`,`user_id`,`code_id`,`create_time`,`update_time`) values (1,4,212,'2021-01-29 22:18:20',NULL),(2,4,252,'2021-02-01 23:36:04',NULL),(3,4,62,'2021-02-01 23:39:43',NULL),(4,1,79,'2021-03-01 18:01:13',NULL),(5,39,251,'2021-03-10 16:12:33',NULL),(6,39,194,'2021-03-11 16:52:42',NULL),(7,1,157,'2021-03-12 15:22:00',NULL),(8,1,130,'2021-03-16 09:34:10',NULL),(9,1,162,'2021-03-16 10:47:03',NULL);

/*Table structure for table `t_favorites` */

DROP TABLE IF EXISTS `t_favorites`;

CREATE TABLE `t_favorites` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL COMMENT '用户id',
  `info_id` int NOT NULL COMMENT '资源id',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  `type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '类型 1blog 2.code 3.shuoshuo',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='收藏表';

/*Data for the table `t_favorites` */

insert  into `t_favorites`(`id`,`user_id`,`info_id`,`create_time`,`update_time`,`type`) values (1,4,2,'2021-01-27 08:16:22',NULL,'2'),(2,4,2,'2021-01-27 08:16:22',NULL,'2'),(3,21,253,'2021-01-29 19:35:10',NULL,'2'),(4,21,253,'2021-01-29 19:35:11',NULL,'2'),(5,21,253,'2021-01-29 19:35:14',NULL,'2'),(6,21,42,'2021-01-30 11:48:13',NULL,'1'),(7,21,42,'2021-01-30 11:48:15',NULL,'1'),(8,21,42,'2021-01-30 11:48:15',NULL,'1'),(9,31,104,'2021-02-22 10:19:19',NULL,'2'),(10,31,104,'2021-02-22 10:19:21',NULL,'2'),(11,36,253,'2021-03-10 01:44:36',NULL,'2'),(12,36,253,'2021-03-10 01:44:42',NULL,'2'),(13,36,253,'2021-03-10 01:44:43',NULL,'2'),(14,36,253,'2021-03-10 01:44:43',NULL,'2'),(15,44,253,'2021-03-10 15:26:08',NULL,'2'),(16,44,253,'2021-03-10 15:26:09',NULL,'2'),(17,44,253,'2021-03-10 15:26:12',NULL,'2'),(18,1,59,'2021-03-11 18:32:04',NULL,'1'),(19,1,59,'2021-03-11 18:32:05',NULL,'1'),(20,1,59,'2021-03-11 18:32:05',NULL,'1'),(21,1,59,'2021-03-11 18:32:05',NULL,'1'),(22,1,59,'2021-03-11 18:32:06',NULL,'1'),(23,40,253,'2021-03-15 15:53:48',NULL,'2');

/*Table structure for table `t_friend_link` */

DROP TABLE IF EXISTS `t_friend_link`;

CREATE TABLE `t_friend_link` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '友链名称',
  `address` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '友链地址',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_friend_link` */

insert  into `t_friend_link`(`id`,`name`,`address`) values (1,'阿里云','https://www.aliyun.com/'),(2,'腾讯云','https://cloud.tencent.com/'),(3,'百度智能云','https://cloud.baidu.com/'),(10,'华为云','https://activity.huaweicloud.com/');

/*Table structure for table `t_message` */

DROP TABLE IF EXISTS `t_message`;

CREATE TABLE `t_message` (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '内容',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='留言表';

/*Data for the table `t_message` */

insert  into `t_message`(`id`,`content`,`create_time`) values (8,'嘿嘿','2021-02-13 21:28:07'),(9,'留言板好像有bug，回车以后看不到别人的留言了','2021-02-13 21:29:21'),(10,'是吗','2021-03-06 15:38:37');

/*Table structure for table `t_music` */

DROP TABLE IF EXISTS `t_music`;

CREATE TABLE `t_music` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '音乐名称',
  `artist` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '作者',
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '歌曲来源',
  `cover` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '歌曲封面',
  `lrc` varchar(8000) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '歌词',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_music` */

insert  into `t_music`(`id`,`name`,`artist`,`url`,`cover`,`lrc`) values (1,'沉醉的青丝 (想你 念你dj版)','你的大表哥曲甲','http://qiniu-mp3.xiyanit.cn/%E6%B2%89%E9%86%89%E7%9A%84%E9%9D%92%E4%B8%9D%20%28%E6%83%B3%E4%BD%A0%20%E5%BF%B5%E4%BD%A0dj%E7%89%88%29.mp3','http://p1.music.126.net/q34SncqK9YfGrKclq0jFmg==/109951165501197086.jpg?param=300x300','[00:00.000] 作词 : 辛沐/林乔[00:01.000] 作曲 : 武鹏飞[00:02.000] 编曲 : 中意[00:03.57]想你 念你[00:05.42]停止再继续[00:08.19]如果回忆容易[00:10.45]我会想你念你[00:12.30]假装你在这里[00:15.86]那本旧的日历[00:18.18]翻了日期[00:19.97]告诉我牢记不容易[00:23.19]如果可以作弊[00:24.97]我会想你念你[00:26.71]到最后的荼蘼[00:30.39]时间不会犹豫[00:32.71]等一缕[00:33.84]为你而沉醉的青丝[00:40.70]想你 念你[00:43.72]想你 念你[00:47.25]想你 念你[00:50.86]想你 念你[00:56.56]想你 念你[00:59.98]我追着你而去[01:03.61]想你 念你[01:07.23]停止再继续[01:11.51]我走过那条长椅[01:15.40]默守着那个秘密[01:18.57]拼命在脑海中寻你[01:24.55]如果回忆容易[01:26.96]我会想你念你[01:28.63]假装你在这里[01:32.14]那本旧的日历[01:34.49]翻了日期[01:36.31]告诉我牢记不容易[01:39.52]如果可以作弊[01:41.36]我会想你念你[01:43.17]到最后的荼蘼[01:46.77]时间不会犹豫[01:49.05]等一缕[01:50.30]为你而沉醉的青丝[01:56.31]想你 念你[01:59.96]想你 念你[02:03.61]想你 念你[02:07.19]等一缕[02:09.21]沉醉的青丝[02:10.72]出品方：网易音乐人x飓风计划[02:11.13]本歌曲来自〖网易飓风计划〗[02:11.59]10亿现金激励，千亿流量扶持！[02:11.92]业务联系：jf399@vip.163.com[02:12.22]混音：dB Audio Studio[02:12.54]录音：欧几[02:12.85]制作人：孙正洵[02:13.20]监制：何湲[02:14.20]策划：刘宇航/胡圣羽[02:14.54]宣传：王嘉晟/黄嘉慧/贾焱祺[02:14.83]DJ制作：深声文化（DJ Yaha）[02:15.12]OP: 讯飞音乐'),(2,'是想你的声音啊（DJ完整版）','傲七爷','http://qiniu-mp3.xiyanit.cn/%E6%98%AF%E6%83%B3%E4%BD%A0%E7%9A%84%E5%A3%B0%E9%9F%B3%E5%95%8A%EF%BC%88DJ%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89.mp3','http://p2.music.126.net/cIR63lyPGgQ4mAyuOTg8lA==/109951165109878587.jpg?param=300x300','[00:00.05]出品方：网易音乐人x飓风工作室[00:00.06]10亿现金激励，千亿流量扶持！[00:00.07]网易音乐人合作：st399@vip.163.com[00:00.08]飓风计划商务合作：jf399@vip.163.com[00:00.09]作曲 : 小雨滴[00:00.42]作词 : 小雨滴[00:00.56]编曲：罗洋（卡其漠）[00:00.74]制作：DjYaha@深声文化[00:00.93]出品：匠心音乐[00:01.08]企划：网易音乐人x飓风计划[00:01.47]你快听 滴答滴 滴答滴 滴答滴 是雨滴的声音[00:07.63]你快听 是我在 是我在 是我在哼你最爱听的旋律[00:15.30]你快听 滴答滴 滴答滴 滴答滴 是雨滴的声音[00:22.73]你快听 是我在 是我在 是我在哼你最爱听的旋律[00:30.22]你快听 滴答滴 滴答滴 滴答滴 窗外又在下雨[00:37.65]难道这 不是你最爱的天气[00:45.87]该继续猜测[00:47.46]直接就开口吗[00:49.79]纠结如何说破[00:53.15]可越想了解的[00:55.50]越是无法琢磨[01:00.43]爱就是爱着[01:02.50]不爱就不爱了[01:04.89]请全部藏好它[01:08.17]可越想忘记的[01:11.90]反而记得深刻[01:17.24]你快听 滴答滴 滴答滴 滴答滴 是雨滴的声音[01:24.80]你快听 是我在 是我在 是我在哼你最爱听的旋律[01:32.24]你快听 滴答滴 滴答滴 滴答滴 是雨滴的声音[01:39.58]你快听 是我在 是我在 是我在哼你最爱听的旋律[01:47.15]你快听 滴答滴 滴答滴 滴答滴 窗外又在下雨[01:54.59]难道这 不是你最爱的天气[02:03.90][99:00.01]出品方：网易音乐人x飓风工作室[99:00.01]10亿现金激励，千亿流量扶持！[99:00.01]网易音乐人合作：st399@vip.163.com[99:00.01]飓风计划商务合作：jf399@vip.163.com'),(3,'备爱DJ版','周思涵','http://qiniu-mp3.xiyanit.cn/%E5%A4%87%E7%88%B1DJ.mp3','http://p2.music.126.net/g-TmCrEEW8T29M91ALrxHw==/109951164339640657.jpg?param=300x300','[00:00.355]作曲 : Xun(易硕成)[00:00.532]作词 : 莫凝/阿涵[00:01.319]我永远在你身后[00:02.585]傻傻陪伴 做你的备爱[00:04.953]也许朋友只是找个借口留下不离开[00:08.937]你永远不明白 我想要的未来[00:12.781]只是想变成你的习惯能被你宠爱[00:54.417]又一次你们闹别扭[00:57.953]又一次你伤心泪流[01:01.728]又一次你转身 留我一个[01:05.548]我以为你不会走[01:09.291]又一次你说放不开[01:12.909]又一次被你无心伤害[01:16.612]这次我还是在 可悲的存在感[01:20.257]会刺痛我的偏爱[01:25.496]我永远在你身后[01:26.979]傻傻陪伴 做你的备爱[01:29.406]也许朋友只是找个借口留下不离开[01:33.357]你永远不明白 我想要的未来[01:37.152]就是简单的依赖和有你的现在[01:40.478]我永远在你身后[01:41.964]傻傻等待 做你的备爱[01:44.609]也许朋友只是个理由能让你依赖[01:48.415]你永远不明白 最悲哀的备爱[01:52.062]只是想变成你的习惯能被你宠爱[02:30.112]在你身后傻傻陪伴的备爱[02:33.548]朋友只是找个借口不离开[02:37.221]你永远不明白 我想要的未来[02:40.924]就是简单的依赖和有你的现在[02:44.244]我永远在你身后[02:45.688]傻傻等待 做你的备爱[02:48.433]朋友只是个理由能让你依赖[02:54.049]做悲哀的备爱[02:57.910]能被你宠爱'),(4,'云与海','Kiki','http://qiniu-plug.xiyanit.cn/%E4%BA%91%E4%B8%8E%E6%B5%B7.mp3','http://p1.music.126.net/rj6Ul-n2WFz2Tx-ZMMnDxw==/109951165461137409.jpg','[00:00.000] 编曲 : GG龙[00:03.534]倘若时间重来能选择这起点[00:08.033]不再相隔云与海[00:10.850]无论爱的界限有多远[00:13.967]只为相恋[00:18.068]如果海角天边有你等在终点[00:22.401]只为厮守那天[00:25.284]到最后 两两相望 也值得[00:56.501]天边的云遥不可及[01:03.768]平行的距离无法靠近[01:09.466]我们背道而行[01:13.001]越走越远的距离[01:16.101]无声言语 久久不能平息[01:24.352]如果注定要爱上你[01:27.953]飞蛾赴火般的勇气[01:31.686]我只要你眼神坚定[01:34.513]不褪去[01:39.013]多想与你浑为一体[01:42.497]悱恻无期[01:45.330]来相信 结局不是唯一[01:52.647]倘若时间重来能选择这起点[01:57.147]不再相隔云与海[01:59.921]无论爱的界限有多远[02:03.066]只为相恋[02:07.165]如果海角天边有你等在终点[02:11.515]只为厮守那天[02:14.332]到最后 两两相望 也值得[02:37.182]如果注定要爱上你[02:40.747]飞蛾赴火般的勇气[02:44.431]我只要你眼神坚定[02:47.270]不褪去[02:51.631]多想与你浑为一体[02:55.215]悱恻无期[02:58.098]来相信 结局不是唯一[03:05.298]倘若时间重来能选择这起点[03:09.865]不再相隔云与海[03:12.548]无论爱的界限有多远[03:15.881]只为相恋[03:19.881]如果海角天边有你等在终点[03:24.181]只为厮守那天[03:27.181]到最后 两两相望 也值得[03:34.397]倘若时间重来能选择这起点[03:38.881]不再相隔云与海[03:41.730]无论爱的界限有多远[03:44.948]只为相恋[03:48.980]如果海角天边有你等在终点[03:53.282]只为厮守那天[03:56.270]到最后 两两相望 也值得');

/*Table structure for table `t_order` */

DROP TABLE IF EXISTS `t_order`;

CREATE TABLE `t_order` (
  `id` int NOT NULL AUTO_INCREMENT,
  `order_id` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '订单号',
  `price` decimal(10,2) NOT NULL COMMENT '金额',
  `type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '类型：1：充值 2：提现',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT ' 1：待完成 2：已完成',
  `is_member` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `pay_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '支付方式 1.微信 2.支付宝',
  `user_id` int NOT NULL COMMENT '充值人',
  `point` int NOT NULL COMMENT '充值金币',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `t_order` */

insert  into `t_order`(`id`,`order_id`,`price`,`type`,`status`,`is_member`,`pay_type`,`user_id`,`point`,`create_time`,`update_time`) values (2,'2021013072288779112546304','199.00','1','1','','1',1,0,'2021-01-30 11:29:48','2021-01-30 11:29:48'),(3,'2021013072288804693606400','199.00','1','1','','1',1,0,'2021-01-30 11:29:54','2021-01-30 11:29:54'),(4,'2021013072288821495988224','10.00','1','1','','1',1,100,'2021-01-30 11:29:58','2021-01-30 11:29:58'),(5,'2021013072289224409219072','199.00','1','1','','1',1,0,'2021-01-30 11:31:34','2021-01-30 11:31:34'),(6,'2021030584576300244664320','199.00','1','1','1','1',1,0,'2021-03-05 09:16:01',NULL),(7,'2021030584576329143418880','10.00','1','1','0','1',1,100,'2021-03-05 09:16:08',NULL),(8,'2021030986101298511872000','199.00','1','1','1','1',43,0,'2021-03-09 14:15:49',NULL),(9,'2021030986101375997444096','30.00','1','1','0','2',43,500,'2021-03-09 14:16:08',NULL),(10,'2021031186890588770664448','199.00','1','1','1','1',1,0,'2021-03-11 18:32:11',NULL),(11,'2021031588240528352608256','199.00','1','1','1','1',40,0,'2021-03-15 11:56:21',NULL),(12,'2021031588240588264046592','199.00','1','1','1','2',40,0,'2021-03-15 11:56:36',NULL);

/*Table structure for table `t_tv` */

DROP TABLE IF EXISTS `t_tv`;

CREATE TABLE `t_tv` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '电视名称',
  `type` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'rtmp/mp4' COMMENT '类型',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '流地址',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='电视表';

/*Data for the table `t_tv` */

insert  into `t_tv`(`id`,`name`,`type`,`url`) values (1,'CCTV-1综合','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv1hd'),(2,'CCTV-2财经','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv2hd'),(3,'CCTV-3综艺','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv3hd'),(4,'CCTV-4中文国际','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv4hd'),(5,'CCTV-5体育','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv5hd'),(6,'CCTV-6电影','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv6hd'),(7,'CCTV-7军事农业','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv7hd'),(8,'CCTV-8电视剧','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv8hd'),(9,'CCTV-9记录','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv9hd'),(10,'CCTV-10科教','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv10hd'),(11,'CCTV-11戏曲','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv11'),(12,'CCTV-12社会与法','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv12hd'),(13,'CCTV-13新闻','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv13'),(14,'CCTV-14少儿','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv14hd'),(15,'CCTV-15音乐','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv15'),(16,'安徽卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/ahhd'),(17,'兵团卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/bttv'),(18,'重庆卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cqhd'),(19,'东方卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/dfhd'),(20,'东南卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/dnhd'),(21,'广东卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/gdhd'),(22,'广西卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/gxtv'),(23,'甘肃卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/gstv'),(24,'贵州卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/gztv'),(25,'湖北卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hbhd'),(26,'湖南卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hunanhd'),(27,'河北卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hebhd'),(28,'河南卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hntv'),(29,'黑龙江卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hljtv'),(30,'江苏卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/jshd'),(31,'江西卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/jxhd'),(32,'吉林卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/jltv'),(33,'辽宁卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/lnhd'),(34,'内蒙古卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/nmtv'),(35,'宁夏卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/nxtv'),(36,'青海卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/qhtv'),(37,'四川卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/schd'),(38,'山东卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/sdhd'),(39,'山西卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/sxrtv'),(40,'陕西卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/sxtv'),(41,'山东教育','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/sdetv'),(42,'中国教育-1','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cetv1'),(43,'中国教育-3','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cetv3'),(44,'中国教育-4','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cetv4'),(45,'CCTV-第一剧场','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/dyjctv'),(46,'CCTV-国防军事','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/gfjstv'),(47,'CCTV-怀旧剧场','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hjjctv'),(48,'CCTV-风云剧场','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/fyjctv'),(49,'CCTV-风云足球','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/fyzqtv'),(50,'CCTV-风云音乐','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/fyyytv'),(51,'CCTV-世界地理','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/sjdltv'),(52,'CCTV 5+体育','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv5phd'),(53,'CGTN-新闻','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cctv16'),(54,'CETV-1','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cetv1'),(55,'CETV-3','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cetv3'),(56,'CETV-4','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/cetv4'),(57,'北京卫视高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv1hd'),(58,'北京影视高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv4hd'),(59,'北京体育高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv6hd'),(60,'北京新闻高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv9hd'),(61,'北京纪实高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv11hd'),(62,'北京文艺','rtmp/mp4','tmp://58.200.131.2:1935/livetv/btv2hd'),(63,'北京科教','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv3'),(64,'北京财经','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv5'),(65,'北京生活','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv7'),(66,'北京青年','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv8'),(67,'北京卡酷','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/btv10'),(69,'天津卫视高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/tjhd'),(71,'浙江卫视高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/zjhd'),(72,'深圳卫视高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/szhd'),(73,'黑龙江卫视高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/hljhd'),(74,'CHC高清电影','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/chchd'),(75,'上海纪实高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/docuchina'),(76,'金鹰纪实高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/gedocu'),(77,'全纪实高清','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/documentaryhd'),(78,'凤凰卫视中文台','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/fhzw'),(79,'凤凰卫视资讯台','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/fhzx'),(80,'凤凰卫视电影台','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/fhdy'),(81,'星空卫视','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/startv'),(82,'Star Sports','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/starsports'),(83,'Channel[V]','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/channelv'),(84,'探索频道','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/discovery'),(85,'国家地理频道','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/natlgeo'),(86,'CHC家庭影院','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/chctv'),(87,'CHC动作电影','rtmp/mp4','rtmp://58.200.131.2:1935/livetv/chcatv'),(88,'美国电视频道','rtmp/mp4','rtmp://media3.scctv.net/live/scctv_800'),(89,'香港财经','rtmp/mp4','rtmp://202.69.69.180:443/webcast/bshdlive-pc'),(90,'韩国GoodTV','rtmp/mp4','rtmp://mobliestream.c3tv.com:554/live/goodtv.sdp'),(92,'美国1','rtmp/mp4','rtmp://ns8.indexforce.com/home/mystream'),(93,'美国2','rtmp/mp4','rtmp://media3.scctv.net/live/scctv_800');

/*Table structure for table `undo_log` */

DROP TABLE IF EXISTS `undo_log`;

CREATE TABLE `undo_log` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `branch_id` bigint NOT NULL,
  `xid` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `context` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `rollback_info` longblob NOT NULL,
  `log_status` int NOT NULL,
  `log_created` datetime NOT NULL,
  `log_modified` datetime NOT NULL,
  `ext` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `undo_log` */

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
